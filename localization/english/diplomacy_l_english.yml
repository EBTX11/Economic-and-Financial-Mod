l_english:
 PRESTIGE_FROM_COUNTRY_GDP:1 "#variable $VALUE|+=$#! from [concept_gdp]"
 PRESTIGE_FROM_ARMY_POWER_PROJECTION:1 "#variable $VALUE|+=$#! from Army [concept_power_projection]"
 PRESTIGE_FROM_NAVY_POWER_PROJECTION:1 "#variable $VALUE|+=$#! from Navy [concept_power_projection]"
 PRESTIGE_FROM_COUNTRY_TIER:1 "#variable $VALUE|+=$#! from [concept_country_tier] of $TIER|v$"
 PRESTIGE_FROM_SUBJECT_GDP:2 "#variable $VALUE|+=$#! from [concept_gdp] of [Concept('concept_subject', '$concept_subjects$')]"
 PRESTIGE_FROM_SUBJECT_ARMY_POWER_PROJECTION:2 "#variable $VALUE|+=$#! from Army [concept_power_projection] of [Concept('concept_subject', '$concept_subjects$')]"
 PRESTIGE_FROM_SUBJECT_NAVY_POWER_PROJECTION:2 "#variable $VALUE|+=$#! from Navy [concept_power_projection] of [Concept('concept_subject', '$concept_subjects$')]"

 PRESTIGE_FROM_GOODS_LEADERBOARDS:1 "#tooltippable #tooltip:[Country.GetTooltipTag],PRESTIGE_FROM_GOODS_LEADERBOARDS_BREAKDOWN #v $VAL|+=$#!#!#! from being leading goods producer"
 PRESTIGE_FROM_GOODS_LEADERBOARDS_BREAKDOWN:1 "[Country.GetGoodsLeaderboardDesc]"
 PRESTIGE_FROM_PRESTIGE_GOODS_LEADERBOARDS: "#tooltippable #tooltip:[Country.GetTooltipTag],PRESTIGE_FROM_PRESTIGE_GOODS_LEADERBOARDS_BREAKDOWN #v $VAL|+=$#!#!#! from being leading [Concept('concept_prestige_good', '$concept_prestige_goods$')] producer"
 PRESTIGE_FROM_PRESTIGE_GOODS_LEADERBOARDS_BREAKDOWN: "[Country.GetPrestigeGoodsLeaderboardDesc]"
 NO_PRESTIGE_RANKING:0 "This [concept_country] has no [concept_prestige] ranking due to #variable $COUNTRY_TYPE$#! status"
 ARMY_POWER_PROJECTION_DESC:0 "#header $ADJECTIVE$ Army [concept_power_projection]: $VALUE|v0$#!\n$TOOLTIP_DELIMITER$\n$DETAILS$"
 NAVY_POWER_PROJECTION_DESC:0 "#header $ADJECTIVE$ Navy [concept_power_projection]: $VALUE|v0$#!\n$TOOLTIP_DELIMITER$\n$DETAILS$"
 great_power:1 "[concept_great_power]"
 great_power_desc:0 "[concept_great_power_desc]"
 major_power:1 "[concept_major_power]"
 major_power_desc:0 "[concept_major_power_desc]"
 minor_power:1 "[concept_minor_power]"
 minor_power_desc:0 "[concept_minor_power_desc]"
 insignificant_power:1 "[concept_insignificant_power]"
 insignificant_power_desc:0 "[concept_insignificant_power_desc]"
 decentralized_nation:1 "[concept_decentralized_nation]"
 decentralized_nation_desc:0 "[concept_decentralized_nation_desc]"
 unrecognized_power:1 "[concept_unrecognized_power]"
 unrecognized_power_desc:0 "[concept_unrecognized_power_desc]"
 unrecognized_regional_power:1 "[Concept('concept_unrecognized_power','$concept_unrecognized_regional_power$')]"
 unrecognized_regional_power_desc:0 "[concept_unrecognized_power_desc]"
 unrecognized_major_power:1 "[Concept('concept_unrecognized_power','$concept_unrecognized_major_power$')]"
 unrecognized_major_power_desc:0 "[concept_unrecognized_power_desc]"

 country_humiliated:2 "Humiliated by Rival"
 country_cut_down_to_size: "Cut Down to Size"
 forced_market_opening:0 "Forced [concept_open_market]"
 forced_slavery_ban:0 "Forced [concept_slavery] Ban"
 forced_regime_change:0 "Forced Regime Change"

 centralized:0 "Centralized Country"
 colonial:0 "Colonial Country"
 decentralized:0 "Decentralized Nation"
 unrecognized:0 "Unrecognized Country"
 recognized: "Recognized"
 company: "Company"

 country_tier_city_state:0 "City-State"
 country_tier_principality:0 "Principality"
 country_tier_grand_principality:0 "Grand Principality"
 country_tier_kingdom:0 "Kingdom"
 country_tier_empire:0 "Empire"
 country_tier_hegemony:0 "Hegemony"

 DIPLO_PLAY_GREAT_POWER_TRIGGER:0 "We must be a [concept_great_power] to launch this [concept_diplomatic_play]"
 DIPLO_PLAY_OUTRAGED_TRIGGER:0 "Their [concept_infamy] level must be at $infamy_pariah$"

 DIPLOMATIC_PACT_REDUCED_LIBERTY_DESIRE: "Will contribute to a decline in [SCOPE.sCountry('target_country').GetAdjective] [concept_liberty_desire]"

 DIPLOMATIC_PACT_REQUIREMENT_MORE_TECHS_RESEARCHED: "[SCOPE.sCountry('actor').GetName] must have unlocked more [Concept('concept_technology', '$concept_technologies$')] than [SCOPE.sCountry('target_country').GetName]"
 DIPLOMATIC_PACT_REQUIREMENT_HIGH_LIBERTY_DESIRE: "[SCOPE.sCountry('actor').GetAdjective] [concept_liberty_desire] must be at least [GetDefine('NDiplomacy','WAR_GOAL_INCREASE_AUTONOMY_MIN_LIBERTY_DESIRE')]"
 DIPLOMATIC_PACT_REQUIREMENT_TARGET_HIGH_LIBERTY_DESIRE: "[SCOPE.sCountry('target_country').GetAdjective] [concept_liberty_desire] must be at least [GetDefine('NDiplomacy','WAR_GOAL_INCREASE_AUTONOMY_MIN_LIBERTY_DESIRE')]"
 DIPLOMATIC_PACT_REQUIREMENT_DURATION_NOT_EXPIRED: "Duration of the enforced [concept_diplomatic_pact] has not expired"
 DIPLOMATIC_PACT_REQUIREMENT_NOT_DECENTRALIZED: "Neither of the two [Concept('concept_country', '$concept_countries$')] is a [concept_decentralized_nation]"
 DIPLOMATIC_PACT_REQUIREMENT_NO_SUBJECT_RELATION: "Neither [concept_country] is a [concept_subject] of the other"
 DIPLOMATIC_PACT_REQUIREMENT_DIPLOMATIC_AUTONOMY: "Neither of the two [Concept('concept_country', '$concept_countries$')] is a [concept_subject] without diplomatic autonomy"
 DIPLOMATIC_PACT_REQUIREMENT_VALID_RIVALS: "[concept_rank] difference of the two [Concept('concept_country', '$concept_countries$')] allows for a [concept_rivalry]"
 DIPLOMATIC_PACT_REQUIREMENT_AT_PEACE: "The two [Concept('concept_country', '$concept_countries$')] must not be on opposite sides in a [concept_war]"
 DIPLOMATIC_PACT_REQUIREMENT_SUBJECT_WITH_INCOME_TRANSFER: "The [concept_subject] is of a type that pays tribute to its [concept_overlord]"
 DIPLOMATIC_PACT_REQUIREMENT_NO_SUPPORT_FOR_INDEPENDENCE: "The independence of a [concept_subject] is being supported"
 EQUAL_OR_BETTER_RANK_THAN_TARGET: "[SCOPE.sCountry('actor').GetName] is of equal or higher [concept_rank] to [SCOPE.sCountry('target_country').GetName] ([SCOPE.sCountry('target_country').GetRank])"

 DIPLO_ACTION_RELATIONS: "[concept_relations] between [SCOPE.GetRootScope.GetCountry.GetName] and [SCOPE.sC('target_country').GetName]"
 DIPLO_ACTION_RELATIONS_CORDIAL:1 "$DIPLO_ACTION_RELATIONS$ are $relations_cordial$"
 DIPLO_ACTION_RELATIONS_CORDIAL_NOT:1 "$DIPLO_ACTION_RELATIONS$ are NOT $relations_cordial$"
 DIPLO_ACTION_RELATIONS_AMICABLE:1 "$DIPLO_ACTION_RELATIONS$ are $relations_amicable$"
 DIPLO_ACTION_RELATIONS_AMICABLE_NOT:1 "$DIPLO_ACTION_RELATIONS$ are NOT $relations_amicable$"
 DIPLO_ACTION_RELATIONS_FRIENDLY:1 "$DIPLO_ACTION_RELATIONS$ are $relations_friendly$"
 DIPLO_ACTION_RELATIONS_FRIENDLY_NOT:1 "$DIPLO_ACTION_RELATIONS$ are NOT $relations_friendly$"
 DIPLO_ACTION_RELATIONS_POOR:1 "$DIPLO_ACTION_RELATIONS$ are $relations_poor$"
 DIPLO_ACTION_RELATIONS_POOR_NOT:1 "$DIPLO_ACTION_RELATIONS$ are NOT $relations_poor$"
 DIPLO_ACTION_RELATIONS_COLD:1 "$DIPLO_ACTION_RELATIONS$ are $relations_cold$"
 DIPLO_ACTION_RELATIONS_COLD_NOT:1 "$DIPLO_ACTION_RELATIONS$ are NOT $relations_cold$"
 DIPLO_ACTION_RELATIONS_HOSTILE:1 "$DIPLO_ACTION_RELATIONS$ are $relations_hostile$"
 DIPLO_ACTION_RELATIONS_HOSTILE_NOT:1 "$DIPLO_ACTION_RELATIONS$ are NOT $relations_hostile$"
 DIPLO_ACTION_RELATIONS_CORDIAL_OR_GREATER:1 "$DIPLO_ACTION_RELATIONS$ are at least $relations_cordial$"
 DIPLO_ACTION_RELATIONS_CORDIAL_OR_GREATER_NOT:1 "$DIPLO_ACTION_RELATIONS$ are less than $relations_cordial$"
 DIPLO_ACTION_RELATIONS_AMICABLE_OR_GREATER:1 "$DIPLO_ACTION_RELATIONS$ are at least $relations_amicable$"
 DIPLO_ACTION_RELATIONS_AMICABLE_OR_GREATER_NOT:1 "$DIPLO_ACTION_RELATIONS$ are less than $relations_amicable$"
 DIPLO_ACTION_RELATIONS_POOR_OR_LESS:1 "$DIPLO_ACTION_RELATIONS$ at or below $relations_poor$"
 DIPLO_ACTION_RELATIONS_POOR_OR_LESS_NOT:1 "$DIPLO_ACTION_RELATIONS$ are above $relations_poor$"
 DIPLO_ACTION_RELATIONS_COLD_OR_LESS:1 "$DIPLO_ACTION_RELATIONS$ at or below $relations_cold$"
 DIPLO_ACTION_RELATIONS_COLD_OR_LESS_NOT:1 "$DIPLO_ACTION_RELATIONS$ are above $relations_cold$"
 DIPLO_ACTION_MARKET_CONNECTION_REQUIRED:0 "We must either have a land connection between our [Concept('concept_market_capital','$concept_market_capitals$')] or be able to form a [concept_port_connection] to the [SCOPE.sC('target_country').GetCapital.GetMarket.GetName]"
 DIPLO_ACTION_MARKET_CONNECTION_REQUIRED_CHANGE:0 "We must either have a land connection between our [Concept('concept_market_capital','$concept_market_capitals$')] or be able to form a [concept_port_connection] to [SCOPE.sC('target_country').GetCapital.GetName]"

 DIPLO_ACTION_OVERLORD_RELATIONS:0 "[concept_relations] between [SCOPE.GetRootScope.GetCountry.GetName] and [SCOPE.sC('target_country').GetOverlord.GetName]"
 DIPLO_ACTION_OVERLORD_RELATIONS_CORDIAL:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are $relations_cordial$"
 DIPLO_ACTION_OVERLORD_RELATIONS_CORDIAL_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are NOT $relations_cordial$"
 DIPLO_ACTION_OVERLORD_RELATIONS_AMICABLE:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are $relations_amicable$"
 DIPLO_ACTION_OVERLORD_RELATIONS_AMICABLE_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are NOT $relations_amicable$"
 DIPLO_ACTION_OVERLORD_RELATIONS_FRIENDLY:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are $relations_friendly$"
 DIPLO_ACTION_OVERLORD_RELATIONS_FRIENDLY_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are NOT $relations_friendly$"
 DIPLO_ACTION_OVERLORD_RELATIONS_POOR:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are $relations_poor$"
 DIPLO_ACTION_OVERLORD_RELATIONS_POOR_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are NOT $relations_poor$"
 DIPLO_ACTION_OVERLORD_RELATIONS_COLD:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are $relations_cold$"
 DIPLO_ACTION_OVERLORD_RELATIONS_COLD_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are NOT $relations_cold$"
 DIPLO_ACTION_OVERLORD_RELATIONS_HOSTILE:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are $relations_hostile$"
 DIPLO_ACTION_OVERLORD_RELATIONS_HOSTILE_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are NOT $relations_hostile$"
 DIPLO_ACTION_OVERLORD_RELATIONS_CORDIAL_OR_GREATER:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are at least $relations_cordial$"
 DIPLO_ACTION_OVERLORD_RELATIONS_CORDIAL_OR_GREATER_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are less than $relations_cordial$"
 DIPLO_ACTION_OVERLORD_RELATIONS_AMICABLE_OR_GREATER:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are at least $relations_amicable$"
 DIPLO_ACTION_OVERLORD_RELATIONS_AMICABLE_OR_GREATER_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are less than $relations_amicable$"
 DIPLO_ACTION_OVERLORD_RELATIONS_POOR_OR_LESS:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ at or below $relations_poor$"
 DIPLO_ACTION_OVERLORD_RELATIONS_POOR_OR_LESS_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are above $relations_poor$"
 DIPLO_ACTION_OVERLORD_RELATIONS_COLD_OR_LESS:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ at or below $relations_cold$"
 DIPLO_ACTION_OVERLORD_RELATIONS_COLD_OR_LESS_NOT:0 "$DIPLO_ACTION_OVERLORD_RELATIONS$ are above $relations_cold$"

 DIPLO_ACTION_TOP_OVERLORD_RELATIONS: "[concept_relations] between [SCOPE.GetRootScope.GetCountry.GetName] and [SCOPE.sC('target_country').GetTopOverlord.GetName]"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_CORDIAL: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are $relations_cordial$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_CORDIAL_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are NOT $relations_cordial$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_AMICABLE: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are $relations_amicable$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_AMICABLE_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are NOT $relations_amicable$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_FRIENDLY: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are $relations_friendly$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_FRIENDLY_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are NOT $relations_friendly$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_POOR: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are $relations_poor$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_POOR_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are NOT $relations_poor$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_COLD: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are $relations_cold$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_COLD_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are NOT $relations_cold$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_HOSTILE: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are $relations_hostile$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_HOSTILE_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are NOT $relations_hostile$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_CORDIAL_OR_GREATER: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are at least $relations_cordial$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_CORDIAL_OR_GREATER_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are less than $relations_cordial$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_AMICABLE_OR_GREATER: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are at least $relations_amicable$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_AMICABLE_OR_GREATER_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are less than $relations_amicable$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_POOR_OR_LESS: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ at or below $relations_poor$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_POOR_OR_LESS_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are above $relations_poor$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_COLD_OR_LESS: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ at or below $relations_cold$"
 DIPLO_ACTION_TOP_OVERLORD_RELATIONS_COLD_OR_LESS_NOT: "$DIPLO_ACTION_TOP_OVERLORD_RELATIONS$ are above $relations_cold$"

 DIPLO_ACTION_TRADE_STATES_NOT_SAME_REGION: "Traded [Concept('concept_state','$concept_states$')] must be in different [Concept('concept_state_region', '$concept_state_regions$')]"
 DIPLO_ACTION_TRADE_STATES_WOULD_BREAK_CONNECTION: "Both [Concept('concept_country', '$concept_countries$')] must have a land or sea connection to the selected [Concept('concept_state','$concept_states$')] after the trade"

 APPOINT_COLONIAL_GOVERNOR_ON_COOLDOWN: "They are still reeling from the last time you appointed a governor"

 relations_friendly:0 "#P Friendly#!"
 relations_amicable:0 "#P Amicable#!"
 relations_cordial:0 "#P Cordial#!"
 relations_neutral:0 "#V Neutral#!"
 relations_poor:0 "#N Poor#!"
 relations_cold:0 "#N Cold#!"
 relations_hostile:0 "#N Hostile#!"

 tension_calm:0 "#G Calm#!"
 tension_uneasy:0 "#V Uneasy#!"
 tension_tense:0 "#N Tense#!"
 tension_volatile:0 "#N Volatile#!"

 infamy_reputable:0 "#V Reputable#!"
 infamy_infamous:0 "#N Infamous#!"
 infamy_notorious:0 "#N Notorious#!"
 infamy_pariah:0 "#N Pariah#!"

 subject_type_protectorate: "@protectorate! $subject_type_protectorate_no_icon$"
 subject_type_protectorate_no_icon: "$concept_protectorate$"
 subject_type_puppet: "@puppet! $subject_type_puppet_no_icon$"
 subject_type_puppet_no_icon: "$concept_puppet$"
 subject_type_tributary: "@tributary! $subject_type_tributary_no_icon$"
 subject_type_tributary_no_icon: "$concept_tributary$"
 subject_type_vassal: "@vassal! $subject_type_vassal_no_icon$"
 subject_type_vassal_no_icon: "$concept_vassal$"
 subject_type_dominion: "@dominion! $subject_type_dominion_no_icon$"
 subject_type_dominion_no_icon: "$concept_dominion$"
 subject_type_personal_union: "@personal_union! $subject_type_personal_union_no_icon$"
 subject_type_personal_union_no_icon: "$concept_personal_union$"
 subject_type_chartered_company: "@chartered_company! $subject_type_chartered_company_no_icon$"
 subject_type_chartered_company_no_icon: "$concept_chartered_company$"
 subject_type_colony: "@colony! $subject_type_colony_no_icon$"
 subject_type_colony_no_icon: "$concept_colony_subject$"

 SUBJECT_CANNOT_HAVE_SUBJECTS:1 " [COUNTRY.GetName] cannot have subjects of their own due to being a $SUBJECT_TYPE|v$-type [concept_subject]!"
 SUBJECT_MUST_BE_HIGHER_COUNTRY_RANK:1 " $COUNTRY_NAME$ must be of a higher [concept_rank] than $COUNTRY_OTHER_NAME$ to make them into a $SUBJECT_TYPE|v$-type [concept_subject]"
 SUBJECT_INVALID_OVERLORD_RANK:1 " $COUNTRY_NAME$ cannot have a $SUBJECT_TYPE|v$-type [concept_subject] due to their [concept_rank] being $RANK|v$"
 SUBJECT_INVALID_SUBJECT_RANK:1 " $COUNTRY_NAME$ cannot become a $SUBJECT_TYPE|v$-type [concept_subject] due to their [concept_rank] being $RANK|v$"
 SUBJECT_MUST_BE_SAME_COUNTRY_TYPE:1 " $COUNTRY_NAME$ cannot have $COUNTRY_OTHER_NAME$ as their $SUBJECT_TYPE|v$-type [concept_subject] due to being a $COUNTRY_TYPE|v$"
 SUBJECT_INVALID_OVERLORD_COUNTRY_TYPE:1 " $COUNTRY_NAME$ cannot have a $SUBJECT_TYPE|v$-type [concept_subject] due to being a $COUNTRY_TYPE|v$"
 SUBJECT_INVALID_SUBJECT_COUNTRY_TYPE:1 " $COUNTRY_NAME$ cannot become a $SUBJECT_TYPE|v$-type [concept_subject] due to being a $COUNTRY_TYPE|v$"
 SUBJECT_IS_ALREADY_SUBJECT:1 " [TARGET_COUNTRY.GetName] is already [concept_subject] to another country"
 SUBJECT_NOT_VALID_CHANGE:1 " Not possible to change a $SUBJECT_TYPE_FROM|v$-type [concept_subject] into a $SUBJECT_TYPE|v$-type [concept_subject]"
 SUBJECT_OVERLORD_IS_SUBJECT:1 " [COUNTRY.GetName] cannot make their suzerain [TARGET_COUNTRY.GetName] into a [concept_subject]"

 protector:0 "Protector"
 suzerain:0 "Suzerain"
 obligation:1 "[concept_obligation]"
 RELEASE:0 "Release"
 CONFIRM:0 "Confirm"
 CANCEL:0 "Cancel"
 USE_OBLIGATION:1 "Use [concept_obligation]"
 OWE_OBLIGATION:1 "Owe [concept_obligation]"
 CALLING_IN_OBLIGATION:1 "Calling in [concept_obligation]"
 OFFERING_OBLIGATION:1 "Offering [concept_obligation]"
 THEY_DO_NOT_OWE_OBLIGATION:1 "They do not owe us an [concept_obligation]."
 THEY_OWE_OBLIGATION:1 "They already owe us an [concept_obligation]."
 WE_OWE_OBLIGATION:1 "We already owe them an [concept_obligation]."
 EXISTING_PACT:0 "Value of existing [DIPLOMATIC_PACT.GetName]"
 NO_PACT_TO_TRANSFER:0 "There is no existing [concept_diplomatic_pact] of this type to transfer"
 AI_ACCEPTANCE_LIBERTY_DESIRE_LEVEL: "$LIBERTY_DESIRE_LEVEL$"
 NO_STATE_SELECTED_FOR_COUNTRY: "Must select a [concept_state] for [COUNTRY.GetName]"
 NO_STATE_SELECTED_FOR_ANY_COUNTRY: "Must select a [concept_state] for at least one of [COUNTRY.GetName] or [TARGET_COUNTRY.GetName]"
 STATE_NOT_SELECTABLE_FOR_COUNTRY: "Selected [concept_state] for [COUNTRY.GetName] is not valid due to:\n$DESC$"
 CONFIRM_DIPLOMATIC_ACTION: "#header Confirm#!\n$TOOLTIP_DELIMITER$[ConcatIfNeitherEmpty('\n','$DESC$')]"
 DIPLOMATIC_ACTION_STATE_DESC: "[COUNTRY.GetNameNoFormatting] [STATE.GetName]"

 TREATY_COUNTRY_HAS_CALLED_IN_OBLIGATION: "[Country.GetName] has called in an @obligation! [concept_obligation] on [Treaty.GetOtherCountry(Country.Self).GetName]"
 TREATY_COUNTRY_HAS_OWED_OBLIGATION: "[Country.GetName] has owed [Treaty.GetOtherCountry(Country.Self).GetName] an @obligation! [concept_obligation]"
 TREATY_COUNTRY_WILL_CALL_IN_OBLIGATION: "[Country.GetName] will call in an @obligation! [concept_obligation] on [Treaty.GetOtherCountry(Country.Self).GetName]"
 TREATY_COUNTRY_WILL_OWE_OBLIGATION: "[Country.GetName] will owe [Treaty.GetOtherCountry(Country.Self).GetName] an @obligation! [concept_obligation]"
 OBLIGATION_DELAY_EXPLANATION: "The [concept_obligation] will become a reality after the [concept_binding_period] of the [concept_treaty] has ended, or at most #v [Divide_int32(GetDefine('NDiplomacy', 'MAX_TREATY_OBLIGATIONS_DELAY_DAYS'), '(int32)365')|0]#! years from the signed date [Treaty.GetStartDate]"

 TREATY_COUNTRY_HAS_OWED_OBLIGATION_WITH_EXPLANATION: "#header $TREATY_COUNTRY_HAS_OWED_OBLIGATION$#!\n$TOOLTIP_DELIMITER$\n$OBLIGATION_DELAY_EXPLANATION$"
 TREATY_COUNTRY_WILL_OWE_OBLIGATION_WITH_EXPLANATION: "#header $TREATY_COUNTRY_WILL_OWE_OBLIGATION$#!\n$TOOLTIP_DELIMITER$\n$OBLIGATION_DELAY_EXPLANATION$"

 TREATY_HAS_OR_WILL_CALL_IN_OBLIGATION: "[SelectLocalization(Treaty.AreObligationsEffectuated, 'TREATY_COUNTRY_HAS_CALLED_IN_OBLIGATION', 'TREATY_COUNTRY_WILL_CALL_IN_OBLIGATION')]"
 TREATY_HAS_OR_WILL_OWE_OBLIGATION: "[SelectLocalization(Treaty.AreObligationsEffectuated, 'TREATY_COUNTRY_HAS_OWED_OBLIGATION', 'TREATY_COUNTRY_WILL_OWE_OBLIGATION')]"

 AI_WILL_ACCEPT_GENERIC: "@approves! [Country.GetName] would accept"
 AI_WILL_NOT_ACCEPT_GENERIC: "@disapproves! [Country.GetName] would #bold #n NOT#!#! accept"

 AI_WILL_ACCEPT:1 "@approves! [COUNTRY.GetName] would accept"
 AI_WILL_ACCEPT_WITH_OWE_OBLIGATION:1 "@obligation! [COUNTRY.GetName] would accept, if we owe them an [concept_obligation]"
 AI_WILL_ACCEPT_WITH_CALL_IN_OBLIGATION:1 "@obligation! [COUNTRY.GetName] would accept, if we #b call in#! the [concept_obligation] they owe us"
 AI_MIGHT_ACCEPT: "@indifferent! [COUNTRY.GetName] might accept ([DiplomaticAction.GetRandomAcceptanceChanceNoObligation|%0v] chance)"
 AI_MIGHT_ACCEPT_WITH_OWE_OBLIGATION: "@obligation! [COUNTRY.GetName] might accept, if we owe them an [concept_obligation] ([DiplomaticAction.GetRandomAcceptanceChanceWithOweObligation|%0v] chance)"
 AI_MIGHT_ACCEPT_WITH_CALL_IN_OBLIGATION: "@obligation! [COUNTRY.GetName] might accept, if we #b call in#! the [concept_obligation] they owe us ([DiplomaticAction.GetRandomAcceptanceChanceWithCallInObligation|%0v] chance)"
 AI_MIGHT_ACCEPT_WITH_ACTION: "@indifferent! [COUNTRY.GetName] might accept ([DiplomaticAction.GetRandomAcceptanceChanceNoObligation|%0v] chance)"
 AI_WILL_NOT_ACCEPT:1 "@disapproves! [COUNTRY.GetName] would #bold #n NOT#!#! accept"
 AI_WILL_ACCEPT_TOOLTIP: "[DiplomaticAction.GetWillAcceptDesc]\n$TOOLTIP_DELIMITER$\n[DiplomaticAction.GetWillAcceptBreakdown]"
 AI_WILL_ACCEPT_BREAKDOWN:1 "Their $SCORE|=+$ acceptance score is due to:\n$DETAILS$"
 PLAYER_MIGHT_ACCEPT:0 "They might accept"
 PLAYER_MIGHT_ACCEPT_DESC:0 "[DiplomaticAction.GetSecondCountry.GetName] is a player ([DiplomaticAction.GetSecondCountry.GetPlayedByDesc]), and will decide for themselves if they accept or not"
 AI_WILL_ACCEPT_ENTRY_FORMAT:1 "$SCRIPT_VALUE_KEY_AFTER_FORMAT$"
 AI_DIPLOMATIC_PLAY_SUPPORT_FORMAT: "$VALUE|+=0$ from $KEY$"

 DIPLOMATIC_ACCEPTANCE_RELATIONS:1 "[SCOPE.GetRootScope.GetCountry.GetAdjectiveNoFormatting]-[SCOPE.sCountry('actor').GetAdjectiveNoFormatting] [concept_relations] are [SCOPE.GetRootScope.GetCountry.GetRelationsWithDesc(SCOPE.sCountry('actor'))]"
 DIPLOMATIC_ACCEPTANCE_ARMY_STRENGTH:1 "[SCOPE.sCountry('target').GetAdjectiveNoFormatting] Army [concept_power_projection] compared to ours"
 DIPLOMATIC_ACCEPTANCE_ARMY_STRENGTH_AGAINST_OVERLORD: "[SCOPE.sCountry('target').GetOverlord.GetAdjectiveNoFormatting] Army [concept_power_projection] compared to ours"
 DIPLOMATIC_ACCEPTANCE_NAVY_STRENGTH: "[SCOPE.sCountry('target').GetAdjectiveNoFormatting] Navy [concept_power_projection] compared to ours"
 DIPLOMATIC_ACCEPTANCE_ANTI_IMPERIALISM: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_anti_imperialism$#!"
 DIPLOMATIC_ACCEPTANCE_TERRITORIAL_EXPANSION: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_territorial_expansion$#!"
 DIPLOMATIC_ACCEPTANCE_WORLD_REVOLUTION: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_world_revolution$#!"
 DIPLOMATIC_ACCEPTANCE_COLONIAL_EXPANSION: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_colonial_expansion$#!"
 DIPLOMATIC_ACCEPTANCE_INDUSTRIAL_EXPANSION: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_industrial_expansion$#!"
 DIPLOMATIC_ACCEPTANCE_AGRICULTURAL_EXPANSION: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_agricultural_expansion$#!"
 DIPLOMATIC_ACCEPTANCE_RESOURCE_EXPANSION: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_resource_expansion$#!"
 DIPLOMATIC_ACCEPTANCE_PLANTATION_ECONOMY: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_plantation_economy$#!"
 DIPLOMATIC_ACCEPTANCE_ECONOMIC_IMPERIALISM:0 "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_economic_imperialism$#!"
 DIPLOMATIC_ACCEPTANCE_MAINTAIN_POWER_BALANCE: "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_maintain_power_balance$#!"
 DIPLOMATIC_ACCEPTANCE_UNRECOGNIZED: "[SCOPE.sCountry('actor').GetName] is an [concept_unrecognized_power]"
 DIPLOMATIC_ACCEPTANCE_LEGITIMACY: "[concept_legitimacy] of [SCOPE.GetRootScope.GetCountry.GetName] ([SCOPE.GetRootScope.GetCountry.GetGovernmentLegitimacy|v])"
 DIPLOMATIC_ACCEPTANCE_NATIONAL_MILITIA: "They have enacted [GetLawType('law_national_militia').GetName]"
 DIPLOMATIC_ACCEPTANCE_DISALLOWED_TRADE: "They disallowed [concept_trade]"
 DIPLOMATIC_ACCEPTANCE_DISALLOWED_TRADE_FIRST: "We disallowed [concept_trade]"
 DIPLOMATIC_ACCEPTANCE_HIGH_ECONOMIC_DEPENDENCE: "They are Economically Dependent on us"
 DIPLOMATIC_ACCEPTANCE_HIGH_ECONOMIC_DEPENDENCE_FIRST: "We are Economically Dependent on them"
 DIPLOMATIC_ACCEPTANCE_LOW_ECONOMIC_DEPENDENCE: "They are Economically Independent from us"
 DIPLOMATIC_ACCEPTANCE_LOW_ECONOMIC_DEPENDENCE_FIRST: "We are Economically Independent from them"
 DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING: "[SCOPE.GetRootScope.GetCountry.GetAdjectiveNoFormatting] military spending"
 DIPLOMATIC_ACCEPTANCE_MILITARY_SPENDING_FIRST: "Our military spending"
 DIPLOMATIC_ACCEPTANCE_SAME_RELIGION: "We share the same [concept_state_religion] [SCOPE.GetRootScope.GetCountry.GetStateReligion.GetName]"
 DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION_BUT_SAME_TRAIT: "[SCOPE.GetRootScope.GetCountry.GetAdjectiveNoFormatting] [concept_state_religion] is different from ours but with a similar [concept_religious_trait]"
 DIPLOMATIC_ACCEPTANCE_DIFFERENT_RELIGION: "[SCOPE.GetRootScope.GetCountry.GetAdjectiveNoFormatting] [concept_state_religion] is different from ours"
 DIPLOMATIC_ACCEPTANCE_TECH_SPREAD_VALUE: "Their rate of [concept_technology_spread]"
 DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION_NEGATIVE:0 "Ideological Differences of our [Concept('concept_government','$concept_governments$')]"
 DIPLOMATIC_ACCEPTANCE_IS_IN_WAR_TOGETHER: "We are on the same side in a [concept_war]"
 DIPLOMATIC_ACCEPTANCE_NO_CUSTOMS_UNION:0 "We do #b not#! have a [concept_customs_union]"
 DIPLOMATIC_ACCEPTANCE_POWERFUL_PROTECTORS_US:0 "We have powerful protectors"
 DIPLOMATIC_ACCEPTANCE_TRUCE:0 "We have a [concept_truce]"
 DIPLOMATIC_ACCEPTANCE_INFLUENCE_PAYMENTS:0 "[SCOPE.sCountry('actor').GetAdjectiveNoFormatting] financial influence over this country"
 DIPLOMATIC_ACCEPTANCE_GIVING_AWAY_LAND: "Being gifted a [concept_state]"
 DIPLOMATIC_ACCEPTANCE_STATES_NOT_SET: "[Concept('concept_state','$concept_states$')] not set"
 DIPLOMATIC_ACCEPTANCE_TRADE_STATE_FIRST_STATE: "Offered [SCOPE.sState('first_state').GetName]"
 DIPLOMATIC_ACCEPTANCE_TRADE_STATE_SECOND_STATE: "Ceding [SCOPE.sState('second_state').GetName]"
 DIPLOMATIC_ACCEPTANCE_DOES_NOT_WANT_FIRST_STATE: "Does not want [SCOPE.sState('first_state').GetName]"
 DIPLOMATIC_ACCEPTANCE_TRADE_STATE_SPLIT_STATE_EXCHANGE: "Unifying [Concept('concept_split_state','$concept_split_states$')] in [SCOPE.sState('first_state').GetStateRegion.GetName] and [SCOPE.sState('second_state').GetStateRegion.GetName]"
 DIPLOMATIC_ACCEPTANCE_CHANCE_TO_WIN_DIPLOMATIC_PLAY: "Perceived ability to defeat [SCOPE.sCountry('actor').GetNameNoFormatting] in a [concept_diplomatic_play]"
 DIPLOMATIC_ACCEPTANCE_ACTOR_ECONOMIC_DEPENDENCE: "[concept_economic_dependence] of [SCOPE.sCountry('actor').GetNameNoFormatting] on [concept_overlord]"
 DIPLOMATIC_ACCEPTANCE_TARGET_ECONOMIC_DEPENDENCE: "[concept_economic_dependence] of [SCOPE.GetRootScope.GetCountry.GetNameNoFormatting] on [concept_overlord]"
 DIPLOMATIC_ACCEPTANCE_ACTOR_LIBERTY_DESIRE: "[concept_liberty_desire] of [SCOPE.sCountry('actor').GetNameNoFormatting]"
 DIPLOMATIC_ACCEPTANCE_TARGET_LIBERTY_DESIRE: "[concept_liberty_desire] of [SCOPE.GetRootScope.GetCountry.GetNameNoFormatting]"
 DIPLOMATIC_ACCEPTANCE_ACTOR_CAPITAL_MARKET_ACCESS: "[concept_market_access] of [SCOPE.sCountry('other_country').GetCapital.GetNameNoFormatting]"

 # Shared with treaties
 DIPLOMATIC_ACCEPTANCE_BASE:1 "Base Reluctance"
 DIPLOMATIC_ACCEPTANCE_IDEOLOGICAL_OPINION:1 "Ideological Similarities of our [Concept('concept_government','$concept_governments$')]"
 DIPLOMATIC_ACCEPTANCE_ISOLATIONIST:1 "They are pursuing a [concept_ai_strategy] of #v $ai_strategy_armed_isolationism$#!"
 DIPLOMATIC_ACCEPTANCE_POWERFUL_PROTECTORS_THEM:0 "They have powerful protectors"
 DIPLOMATIC_ACCEPTANCE_INFAMY:1 "Our [concept_infamy] level is [SCOPE.sCountry('actor').GetInfamyLabel]"
 DIPLOMATIC_ACCEPTANCE_DECREASED_COHESION: "[concept_power_bloc_cohesion] reduction if [SCOPE.sCountry('target').GetName] joined"
 DIPLOMATIC_ACCEPTANCE_ATTITUDE:1 "[SCOPE.sCountry('target').GetAdjectiveNoFormatting] [concept_attitude] towards [SCOPE.sCountry('actor').GetName] is [SCOPE.sCountry('target').GetAttitudeTowards(SCOPE.sCountry('actor')).GetName]"
 DIPLOMATIC_ACCEPTANCE_FROM_IDENTITY: "[SCOPE.sCountry('actor').GetPowerBloc.GetIdentity.GetName]"
 DIPLOMATIC_ACCEPTANCE_RANK:1 "[SCOPE.sCountry('target').GetAdjectiveNoFormatting] [concept_rank] of [SCOPE.sCountry('target').GetRank] compared to [SCOPE.sCountry('actor').GetAdjectiveNoFormatting] [concept_rank] of [SCOPE.sCountry('actor').GetRank]"
 DIPLOMATIC_ACCEPTANCE_HIGH_GDP: "Amount by which [SCOPE.sCountry('target').GetAdjective] $GDP_SHORT$ exceeds #v [GetPlayer.GetCustom('currency_symbol')]2.0M#!"
 DIPLOMATIC_ACCEPTANCE_LEVERAGE: "[concept_power_bloc_leverage] of [SCOPE.sCountry('actor').GetPowerBloc.GetName] on [SCOPE.sCountry('target').GetName]"
 DIPLOMATIC_ACCEPTANCE_LEVERAGE_OF_TARGET: "[concept_power_bloc_leverage] of [SCOPE.sCountry('target').GetPowerBloc.GetName] on [SCOPE.sCountry('actor').GetName]"
 DIPLOMATIC_ACCEPTANCE_COHESION: "[concept_power_bloc_cohesion] of [SCOPE.sCountry('actor').GetPowerBloc.GetName]"
 DIPLOMATIC_ACCEPTANCE_COHESION_OF_TARGET: "[concept_power_bloc_cohesion] of [SCOPE.sCountry('target').GetPowerBloc.GetName]"
 DIPLOMATIC_ACCEPTANCE_IDENTITY_AFFINITY_TO_RANK: "[SCOPE.sCountry('actor').GetPowerBloc.GetName] affinity to [SCOPE.sCountry('target').GetAdjectiveNoFormatting] [concept_rank] of [SCOPE.sCountry('target').GetRank]"

 DIPLOMATIC_ACCEPTANCE_FELLOW_SUBJECT: "[concept_subject] to the same [concept_overlord]"
 DIPLOMATIC_ACCEPTANCE_ATTITUDE_TOWARDS_OWN_OVERLORD: "[SCOPE.sCountry('target').GetAdjectiveNoFormatting] [concept_attitude] towards [SCOPE.sCountry('target').GetOverlord.GetName] is [SCOPE.sCountry('target').GetAttitudeTowards(SCOPE.sCountry('target').GetOverlord).GetName]"
 DIPLOMATIC_ACCEPTANCE_ATTITUDE_TOWARDS_ACTOR_OVERLORD: "[SCOPE.sCountry('target').GetAdjectiveNoFormatting] [concept_attitude] towards [SCOPE.sCountry('actor').GetOverlord.GetName] is [SCOPE.sCountry('target').GetAttitudeTowards(SCOPE.sCountry('actor').GetOverlord).GetName]"
 DIPLOMATIC_ACCEPTANCE_GDP:1 "[SCOPE.sCountry('target').GetAdjectiveNoFormatting] $GDP_SHORT$ ([GetPlayer.GetCustom('currency_symbol')][SCOPE.sCountry('target').GetGDP|Dv]) compared to our $GDP_SHORT$ ([GetPlayer.GetCustom('currency_symbol')][SCOPE.sCountry('actor').GetGDP|Dv])"
 DIPLOMATIC_ACCEPTANCE_NEIGHBORS:1 "We are [concept_neighbors] with [SCOPE.sCountry('target').GetName]"

 DIPLOMATIC_ACCEPTANCE_LOW_CONSTRUCTION: "[SCOPE.sCountry('target').GetNameNoFormatting] has limited construction capabilities"
 DIPLOMATIC_ACCEPTANCE_ALLIED_TO_RIVALS:1 "We have [Concept('concept_alliance','$concept_alliances$')] or [Concept('concept_defensive_pact','$concept_defensive_pacts$')] with [SCOPE.sCountry('target').GetAdjectiveNoFormatting] [Concept('concept_rivalry','$concept_rivals$')]"
 DIPLOMATIC_ACCEPTANCE_ALLIED_TO_ALLIES:1 "We have [Concept('concept_alliance','$concept_alliances$')] or [Concept('concept_defensive_pact','$concept_defensive_pacts$')] with [SCOPE.sCountry('target').GetAdjectiveNoFormatting] allies"
 DIPLOMATIC_ACCEPTANCE_SHARED_RIVALS: "We have shared [Concept('concept_rivalry','$concept_rivals$')]"
 DIPLOMATIC_ACCEPTANCE_NUM_ALLIES:1 "Number of [SCOPE.sCountry('target').GetAdjectiveNoFormatting] [Concept('concept_alliance','$concept_alliances$')]"
 DIPLOMATIC_ACCEPTANCE_NUM_MILITARY_ASSISTANCE_PACTS: "Number of [SCOPE.sCountry('actor').GetAdjectiveNoFormatting] [concept_military_assistance] pacts"
 DIPLOMATIC_ACCEPTANCE_NUM_MILITARY_ASSISTANCE_PACTS_TARGET: "Number of [SCOPE.sCountry('target').GetAdjectiveNoFormatting] [concept_military_assistance] pacts"
 DIPLOMATIC_ACCEPTANCE_NUM_DEFENSIVE_PACTS:1 "Number of [SCOPE.sCountry('target').GetAdjectiveNoFormatting] [Concept('concept_defensive_pact','$concept_defensive_pacts$')]"
 DIPLOMATIC_ACCEPTANCE_DEFENSIVE_PACT:1 "We have a [concept_defensive_pact]"
 DIPLOMATIC_ACCEPTANCE_ALLIANCE: "We have an [concept_alliance]"
 DIPLOMATIC_ACCEPTANCE_TRADE_PRIVILEGES: "We receive [Concept('concept_trade_privilege','$concept_trade_privileges$')]"
 DIPLOMATIC_ACCEPTANCE_MUTUAL_TRADE_VALUE: "Total monetary value of our mutual [concept_trade]"
 DIPLOMATIC_ACCEPTANCE_FOREIGN_INVESTMENT_RIGHTS: "They have [concept_foreign_investment_rights]"
 DIPLOMATIC_ACCEPTANCE_SAME_POWER_BLOC: "In the same [concept_power_bloc]"
 DIPLOMATIC_ACCEPTANCE_DIFFERENT_POWER_BLOC: "In a different [concept_power_bloc]"
 DIPLOMATIC_ACCEPTANCE_DEBT:0 "Size of [SCOPE.GetRootScope.GetCountry.GetAdjective] [concept_loans]"
 DIPLOMATIC_ACCEPTANCE_GOLD_RESERVES: "Size of [SCOPE.GetRootScope.GetCountry.GetAdjective] [concept_gold_reserves]"
 DIPLOMATIC_ACCEPTANCE_INCOMPATIBLE_ECONOMIC_SYSTEMS:0 "We have incompatible economic systems"
 DIPLOMATIC_ACCEPTANCE_IS_CHINA: "From Chinese Internal Politics"
 DIPLOMATIC_ACCEPTANCE_POWERFUL_ENEMY_IN_WAR: "At [concept_war] with a more powerful enemy"
 DIPLOMATIC_ACCEPTANCE_POWERFUL_ENEMY_IN_WAR_FIRST: "We are at [concept_war] with a more powerful enemy"
 DIPLOMATIC_ACCEPTANCE_LIBERTY_DESIRE: "This [concept_country]'s [concept_liberty_desire]"
 DIPLOMATIC_ACCEPTANCE_TRADE_STATE_SOURCE: "Offered $concept_state$"
 DIPLOMATIC_ACCEPTANCE_TRADE_STATE_TARGET: "Ceding $concept_state$"
 DIPLOMATIC_ACCEPTANCE_TRADE_STATE_REJECT: "Does not want this $concept_state$"

 DIPLOMATIC_ACCEPTANCE_TARGET_PRO_LOBBY_CLOUT: "[concept_clout] of Pro-[SCOPE.GetRootScope.GetCountry.GetAdjectiveNoFormatting] [Concept('concept_political_lobby', '$concept_political_lobbies_short$')] in [SCOPE.sCountry('other_country').GetNameNoFormatting]"
 DIPLOMATIC_ACCEPTANCE_TARGET_ANTI_LOBBY_CLOUT: "[concept_clout] of Anti-[SCOPE.GetRootScope.GetCountry.GetAdjectiveNoFormatting] [Concept('concept_political_lobby', '$concept_political_lobbies_short$')] in [SCOPE.sCountry('other_country').GetNameNoFormatting]"
 DIPLOMATIC_ACCEPTANCE_SOURCE_PRO_LOBBY_CLOUT: "[concept_clout] of Pro-[SCOPE.sCountry('other_country').GetAdjectiveNoFormatting] [Concept('concept_political_lobby', '$concept_political_lobbies_short$')] in [SCOPE.GetRootScope.GetCountry.GetNameNoFormatting]"
 DIPLOMATIC_ACCEPTANCE_SOURCE_ANTI_LOBBY_CLOUT: "[concept_clout] of Anti-[SCOPE.sCountry('other_country').GetAdjectiveNoFormatting] [Concept('concept_political_lobby', '$concept_political_lobbies_short$')] in [SCOPE.GetRootScope.GetCountry.GetNameNoFormatting]"

 ### Diplomatic Acceptance Strings for Treaties
 DIPLOMATIC_ACCEPTANCE_UNTRUSTWORTHY_COUNTRY: "$modifier_untrustworthy_country$"
 DIPLOMATIC_ACCEPTANCE_GIFT: "Happy to be gifted this [concept_article]"
 DIPLOMATIC_ACCEPTANCE_BINDING_PERIOD: "From Binding Period"
 DIPLOMATIC_ACCEPTANCE_BASE_ADDITIONAL: "Base Article Reluctance"
 DIPLOMATIC_ACCEPTANCE_INPUT_QUANTITY: "From Input Quantity"
 DIPLOMATIC_ACCEPTANCE_DOES_NOT_WANT_ARTICLE: "Not interested in Article"
 DIPLOMATIC_ACCEPTANCE_NO_LONGER_WANTS_ARTICLE: "No longer interested in Article"
 DIPLOMATIC_ACCEPTANCE_VALUE_OF_STATES_IN_REGION: "Value of [SCOPE.GetRootScope.GetCountry.GetAdjective] [Concept('concept_state', '$concept_states$')] in the [concept_strategic_region]"
 DIPLOMATIC_ACCEPTANCE_BUDGET_SURPLUS: "From [SCOPE.GetRootScope.GetCountry.GetAdjective] Budget Surplus"
 DIPLOMATIC_ACCEPTANCE_BUDGET_DEFICIT: "From [SCOPE.GetRootScope.GetCountry.GetAdjective] Budget Deficit"
 DIPLOMATIC_ACCEPTANCE_MONEY_TRANSFER_CAP: "Existing [SCOPE.GetRootScope.GetCountry.GetAdjective] $money_transfer$ expenses"
 DIPLOMATIC_ACCEPTANCE_TRANSIT_RIGHTS_VALUE: "Value of $transit_rights$"
 DIPLOMATIC_ACCEPTANCE_EQUAL_EXCHANGE: "Equal Exchange"
 DIPLOMATIC_ACCEPTANCE_VALUE_OF_BUILDING_TYPE: "Value of Building Type"
 DIPLOMATIC_ACCEPTANCE_WANTS_TO_EXPORT: "Desired Export"
 DIPLOMATIC_ACCEPTANCE_WANTS_TO_IMPORT: "Desired Import"
 DIPLOMATIC_ACCEPTANCE_WANTS_TO_TRADE: "Wants unimpeded Trade of this Good"
 DIPLOMATIC_ACCEPTANCE_DOMESTIC_PRODUCTION: "From affected Domestic Production"
 DIPLOMATIC_ACCEPTANCE_LIKES_LAW: "Their Government likes this Law"
 DIPLOMATIC_ACCEPTANCE_ANTI_SLAVERY: "Wants to see Slavery abolished"
 DIPLOMATIC_ACCEPTANCE_RECENTLY_TRADED_STATES: "Traded $concept_states$ recently"

 LOBBY_OPPORTUNITY_BONUS: "Opportunity bonus from Pro-[SCOPE.GetRootScope.GetCountry.GetAdjectiveNoFormatting] [Concept('concept_political_lobby', '$concept_political_lobbies_short$')]"
 AT_WAR_WITH_UNFRIENDLY_COUNTRY: "We are at [concept_war] with a mutually hostile nation"
 AT_WAR_WITH_FRIENDLY_COUNTRY: "We are at [concept_war] with a nation that is friendly to them"
 GREAT_GAME_BONUS: "From interests in the Great Game"

 DIPLOMATIC_INCIDENT_WARGOAL_DESC:0 "Demanding this will result in a [concept_diplomatic_incident] in $STRATEGIC_REGION$, giving #N #B #tooltippable #tooltip:$INFAMY_BREAKDOWN_TAG$ $INFAMY_AMOUNT|1$#!#!#!#! [concept_infamy] to [COUNTRY.GetName] and reducing their $RELATIONS$ with #tooltippable #tooltip:$RELATIONS_BREAKDOWN_TAG$ $NUM_COUNTRIES_IMPACTED|v$ countries#!#!"
 DIPLOMATIC_INCIDENT_NON_WARGOAL_DESC:0 "Will result in a [concept_diplomatic_incident] in $STRATEGIC_REGION$, giving #N #B #tooltippable #tooltip:$INFAMY_BREAKDOWN_TAG$ $INFAMY_AMOUNT|1$#!#!#!#! [concept_infamy] to [COUNTRY.GetName] and reducing their $RELATIONS$ with #tooltippable #tooltip:$RELATIONS_BREAKDOWN_TAG$ $NUM_COUNTRIES_IMPACTED|v$ countries#!#!"
 DIPLOMATIC_INCIDENT_RELATIONS_IMPACT:2 "[COUNTRY.GetAdjectiveNoFormatting] [concept_relations] with [COUNTRY_THIRD_PARTY.GetName]: $AMOUNT|=+$"
 WARGOAL_BASE_TYPE_VALUE:0 "Base Value for $TYPE$: #BOLD $VAL|Dv$#!"
 WARGOAL_MULT_FROM_POPULATION:1 "Multiplied by #v x$MULT$#! due to total population of target"
 WARGOAL_PRIMARY_IS_FREE:1 "First [concept_war_goal] never has a [concept_maneuver] cost"
 INFAMY_EFFECT_FROM_RANK:0 "[COUNTRY.GetName] is a $RANK_NAME|v$: $EFFECT|%=-$"
 WARGOAL_MULT_FROM_HOMELANDS:0 "Target is a [concept_homeland] for [COUNTRY.GetName]: $EFFECT|%=-$"
 WARGOAL_MULT_FROM_UNINCORPORATED_STATE:0 "Target is an [concept_unincorporated_state]: $EFFECT|%=-$"
 WARGOAL_MULT_FROM_UNINCORPORATED_STATES:0 "Target contains [Concept('concept_unincorporated_state','$concept_unincorporated_states$')]: $EFFECT|%=-$"
 WARGOAL_MULT_FROM_OWN_SUBJECT:0 "Multiplied by #v x$EFFECT$#! because [TARGET_COUNTRY.GetName] is a [concept_subject] of [COUNTRY.GetName]"

 # Power Bloc Sacred Civics Principle
 DIPLOMATIC_ACCEPTANCE_PRINCIPLE_SACRED_CIVICS: "$principle_group_sacred_civics$ [concept_power_bloc_principle]"

 RELATIONS:2 "[concept_relations]"
 ATTITUDE:0 "[concept_attitude]"
 AI_STRATEGIES:0 "[Concept('concept_ai_strategy', '$concept_ai_strategies$')]"

 DIPLO_ACTION_IS_ACTIVE:0 "#i Currently Active#!"
 DIPLO_ACTION:0 "[DIPLOMATIC_ACTION.GetName]"
 DIPLO_ACTION_PROPOSE:0 "[DIPLOMATIC_ACTION.GetProposeName]"
 DIPLO_ACTION_BREAK:0 "[DIPLOMATIC_ACTION.GetBreakName]"
 DIPLO_ACTION_ASK_TO_BREAK:0 "[DIPLOMATIC_ACTION.GetAskToBreakName]"
 DIPLOMATIC_ACTION_TOO_SOON:0 "We must wait until #variable $DATE$#! to conduct diplomacy with #variable $COUNTRY$#! again."
 TREATY_PROPOSAL_DECLINED_TOO_SOON:0 "We must wait until #variable $DATE$#! to send another proposal to #variable [COUNTRY.GetName]#!."
 CANNOT_AFFORD_DIPLO_PACT:1 "Have at least @inf!#BOLD #V $COST|1=+$#!#! to maintain this [concept_diplomatic_action]"
 NO_POSSIBLE_STATES_TO_SELECT: "There are no available [Concept('concept_state', '$concept_states$')]"
 COUNTRY_IS_A_SUBJECT_OF: "[COUNTRY.GetName] is a [concept_subject] of [TARGET_COUNTRY.GetName]"
 DIPLOMATIC_ACTION_MAINTENANCE_COST: "Maintenance Cost: @inf!$COST|v0$ [concept_influence]"
 DIPLOMATIC_ACTION_MAINTENANCE_COST_FORMATTED:0 "#tooltippable #tooltip:$BREAKDOWN_TAG$ @inf!$COST|0v$#!#!"
 DIPLOMATIC_ACTION_MAINTENANCE_COST_DESC: "#header $NAME$ Maintenance Cost: @inf!$COST|v0$#!\n$TOOLTIP_DELIMITER$\n$BREAKDOWN$"
 DIPLO_ACTION_REVERSE_PACT_ALREADY_ACTIVE: "This pact is already established"

 DIPLO_ACTION_PENDING:0 "Our proposal is pending approval"
 DIPLO_ACTION_PENDING_OTHER: "They are already considering a proposal from us"
 DIPLO_ACTION_REVERSE_PENDING:0 "Their proposal is pending approval"
 DIPLO_PACT_RELATIONS_CHANGE_POS:2 "Currently improving [concept_relations] by #g +1#! every $DAYS|v$ days from a total daily progress of #v $PROGRESS_DAILY|%+=2$#!"
 DIPLO_PACT_RELATIONS_CHANGE_NEG:2 "Currently damaging [concept_relations] by #r -1#! every $DAYS|v$ days from a total daily progress of #v $PROGRESS_DAILY|%+=2$#!"
 DIPLO_ACTION_FORCED_DURATION:0 "We cannot break this [Concept('concept_diplomatic_pact','$concept_diplomatic_pact_short$')] for another $TIME_LEFT$ ($DATE$)"
 DIPLOMATIC_PACT_HEADER:0 "#header [DiplomaticPact.GetName]#!"
 DIPLOMATIC_PACT_DESC:0 "[DiplomaticPact.GetDesc]"
 DIPLOMATIC_PACT_TOOLTIP:0 "$DIPLOMATIC_PACT_HEADER$\n$TOOLTIP_DELIMITER$\n$DIPLOMATIC_PACT_DESC$"
 RELATIONS_CHANGE_MAX_CAP: " (Max: $MAX_VALUE|=+$)"
 RELATIONS_CHANGE_MIN_CAP: " (Min: $MIN_VALUE|=+$)"
 RELATIONS_CHANGE_EFFECT: "#tooltippable #tooltip:[GetRawTextTooltipTag('$BREAKDOWN$')] #variable $PROGRESS_DAILY|%+=2$#!#!#! progress from $NAME$$CAPDESC$"
 DIPLO_PACT_RELATIONS_EFFECT_BASE_VALUE: "#v $VAL|%2=+$#! base value"
 DIPLO_PACT_RELATIONS_BREAKDOWN_FORMAT: "#header [concept_relations] progress#!\n#v $DAYS$#! days to [SelectLocalization( LessThan_CFixedPoint( '(CFixedPoint)$PROGRESS_DAILY|5$', '(CFixedPoint)0' ), '#r -', '#g ' )]100%#!\n$TOOLTIP_DELIMITER$\n#v $PROGRESS_DAILY|%2=+$#! daily progress due to:\n$BREAKDOWN$"
 DIPLO_PACT_RELATIONS_CHANGE_TOTAL: "\n$DESC$, due to: #indent_newline:3 \n$DESC_DETAILS$#!"

 FORCE_REGIME_CHANGE_GOV_PRINCIPLES_DIST_POWER_PROGRESSIVENESS_DIFFERENCE: "#indent_newline:3 [SCOPE.GetRootScope.GetCountry.GetName] and [SCOPE.sC('target_country').GetName] have very different [Concept('concept_law','$concept_laws$')] in the [GetLawGroup('lawgroup_governance_principles').GetName] and [GetLawGroup('lawgroup_distribution_of_power').GetName] categories\n[SCOPE.GetRootScope.GetCountry.GetName]: [SCOPE.GetRootScope.GetCountry.GetActiveLawFromGroup('lawgroup_governance_principles').GetName] and [SCOPE.GetRootScope.GetCountry.GetActiveLawFromGroup('lawgroup_distribution_of_power').GetName]\n[SCOPE.sC('target_country').GetName]: [SCOPE.sC('target_country').GetActiveLawFromGroup('lawgroup_governance_principles').GetName] and [SCOPE.sC('target_country').GetActiveLawFromGroup('lawgroup_distribution_of_power').GetName]#!"

 # Unilateral actions
 increase_relations:0 "Improve Relations"
 increase_relations_action_name:2 "Improve [concept_relations]"
 increase_relations_action_propose_name:2 "Begin Improving [concept_relations]"
 increase_relations_action_break_name:2 "Stop Improving [concept_relations]"
 increase_relations_desc: "Increases the [concept_relations] between two [Concept('concept_country', '$concept_countries$')] over time."
 increase_relations_country_info: "Currently [TARGET_COUNTRY.GetRelationsWithDesc(GetPlayer.Self)] (#tooltippable #tooltip:[GetRawTextTooltipTag(TARGET_COUNTRY.GetRelationsTooltip(GetPlayer.Self))] [TARGET_COUNTRY.GetRelationsWith(GetPlayer.Self)|+]#!#!) [concept_relations] with [TARGET_COUNTRY.GetName]"
 increase_relations_action_notification_name:2 "[INITIATOR_COUNTRY.GetName] improving [concept_relations]"
 increase_relations_pact_desc:2 "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] is actively improving their [concept_relations] with [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 increase_relations_action_notification_desc: "[INITIATOR_COUNTRY.GetName] have started to improve our mutual [concept_relations], which are currently #tooltippable #tooltip:[GetRawTextTooltipTag(INITIATOR_COUNTRY.GetRelationsTooltip(GetPlayer))] [INITIATOR_COUNTRY.GetRelationsWithDesc( GetPlayer )|+]#!#! (#BOLD #tooltippable #tooltip:[GetRawTextTooltipTag(INITIATOR_COUNTRY.GetRelationsTooltip(GetPlayer))] [INITIATOR_COUNTRY.GetRelationsWith( GetPlayer )|+]#!#!#!). Their [concept_attitude] towards [GetPlayer.GetName] is #tooltippable #tooltip:[INITIATOR_COUNTRY.GetTooltipTag],COUNTRY_ATTITUDE_TOOLTIP [INITIATOR_COUNTRY.GetAttitudeTowards(GetPlayer).GetName]#!#!."
 increase_relations_action_notification_break_name:2 "[INITIATOR_COUNTRY.GetName] stopped improving [concept_relations]"
 increase_relations_action_notification_break_desc:2 "[INITIATOR_COUNTRY.GetName] have stopped improving our mutual [concept_relations]."

 increase_relations_effect_desc_global:0 "Starts to increase [concept_relations]"
 increase_relations_effect_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] starts to increase [concept_relations] with [TARGET_COUNTRY.GetName]"
 increase_relations_effect_desc_third:0 "[COUNTRY.GetName] starts to increase [concept_relations] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 increase_relations_trigger_desc_global:0 "Is increasing [concept_relations]"
 increase_relations_trigger_false_desc_global:0 "Is increasing [concept_relations]"
 increase_relations_trigger_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] is #b not#! increasing [concept_relations] with [TARGET_COUNTRY.GetName]"
 increase_relations_trigger_false_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] is increasing [concept_relations] with [TARGET_COUNTRY.GetName]"
 increase_relations_trigger_desc_third:0 "[COUNTRY.GetName] is #b not#! increasing [concept_relations] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 increase_relations_trigger_false_desc_third:0 "[COUNTRY.GetName] is #b not#! increasing [concept_relations] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 damage_relations:0 "Damage Relations"
 damage_relations_action_name:2 "Damage [concept_relations]"
 damage_relations_action_propose_name:2 "Begin Damaging [concept_relations]"
 damage_relations_action_break_name:2 "Stop Damaging [concept_relations]"
 damage_relations_desc: "Decreases the [concept_relations] between two [Concept('concept_country', '$concept_countries$')] over time."
 damage_relations_country_info: "Currently [TARGET_COUNTRY.GetRelationsWithDesc(GetPlayer.Self)] (#tooltippable #tooltip:[GetRawTextTooltipTag(TARGET_COUNTRY.GetRelationsTooltip(GetPlayer.Self))] [TARGET_COUNTRY.GetRelationsWith(GetPlayer.Self)|+]#!#!) [concept_relations] with [TARGET_COUNTRY.GetName]"
 damage_relations_action_notification_name:2 "[INITIATOR_COUNTRY.GetName] damaging [concept_relations]"
 damage_relations_pact_desc:2 "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] is actively damaging their [concept_relations] with [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 damage_relations_action_notification_desc: "[INITIATOR_COUNTRY.GetName] have started to damage our mutual [concept_relations], which are currently #tooltippable #tooltip:[GetRawTextTooltipTag(INITIATOR_COUNTRY.GetRelationsTooltip(GetPlayer))] [INITIATOR_COUNTRY.GetRelationsWithDesc( GetPlayer )|+]#!#! (#BOLD #tooltippable #tooltip:[GetRawTextTooltipTag(INITIATOR_COUNTRY.GetRelationsTooltip(GetPlayer))] [INITIATOR_COUNTRY.GetRelationsWith( GetPlayer )|+]#!#!#!). Their [concept_attitude] towards [GetPlayer.GetName] is #tooltippable #tooltip:[INITIATOR_COUNTRY.GetTooltipTag],COUNTRY_ATTITUDE_TOOLTIP [INITIATOR_COUNTRY.GetAttitudeTowards(GetPlayer).GetName]#!#!."
 damage_relations_action_notification_break_name:2 "[INITIATOR_COUNTRY.GetName] stopped damaging [concept_relations]"
 damage_relations_action_notification_break_desc:2 "[INITIATOR_COUNTRY.GetName] have stopped damaging our mutual [concept_relations]."

 damage_relations_effect_desc_global:0 "Starts to damage [concept_relations]"
 damage_relations_effect_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] starts to damage [concept_relations] with [TARGET_COUNTRY.GetName]"
 damage_relations_effect_desc_third:0 "[COUNTRY.GetName] starts to damage [concept_relations] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 damage_relations_trigger_desc_global:0 "Is damaging [concept_relations]"
 damage_relations_trigger_false_desc_global:0 "Is #b not#! damaging [concept_relations]"
 damage_relations_trigger_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] is damaging [concept_relations] with [TARGET_COUNTRY.GetName]"
 damage_relations_trigger_false_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] is #b not#! damaging [concept_relations] with [TARGET_COUNTRY.GetName]"
 damage_relations_trigger_desc_third:0 "[COUNTRY.GetName] is damaging [concept_relations] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 damage_relations_trigger_false_desc_third:0 "[COUNTRY.GetName] is #b not#! damaging [concept_relations] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 redeem_obligation:1 "Absolve Obligation"
 redeem_obligation_action_name:1 "Absolve [concept_obligation]"
 redeem_obligation_action_propose_name:0 "Absolve [concept_obligation]"
 redeem_obligation_desc: "Removes the [concept_obligation] a [concept_country] owes another in exchange for an instant increase of [concept_relations]."
 redeem_obligation_action_notification_name:1 "[concept_obligation] Absolved"
 redeem_obligation_action_notification_desc:2 "[INITIATOR_COUNTRY.GetName] have absolved us of the [concept_obligation] we owe them, increasing our mutual $concept_relations$."

 expel_diplomats:0 "Expel Diplomats"
 expel_diplomats_action_name:0 "Expel Diplomats"
 expel_diplomats_action_propose_name:0 "Expel Diplomats"
 expel_diplomats_desc: "Immediately damages [concept_relations] with the target country and prevents all improvement of $concept_relations$ for #v 5 years#!, at the cost of [concept_infamy]."
 expel_diplomats_action_notification_name:0 "Diplomats Expelled"
 expel_diplomats_action_notification_desc:2 "[INITIATOR_COUNTRY.GetName] has expelled our diplomats, damaging our mutual [concept_relations], resulting in a relation of #BOLD [INITIATOR_COUNTRY.GetRelationsWithDesc( GetPlayer )]#! ([INITIATOR_COUNTRY.GetRelationsWith(GetPlayer)|+]). Their [concept_attitude] towards [GetPlayer.GetName] is #tooltippable #tooltip:[INITIATOR_COUNTRY.GetTooltipTag],COUNTRY_ATTITUDE_TOOLTIP [INITIATOR_COUNTRY.GetAttitudeTowards(GetPlayer).GetName]#!#!."

 rivalry:0 "Rivalry"
 rivalry_action_name:0 "[concept_rivalry]"
 rivalry_action_propose_name:0 "Declare [concept_rivalry]"
 rivalry_action_break_name:0 "End [concept_rivalry]"
 rivalry_pact_desc:1 "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] considers [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] to be their [Concept('concept_rivalry', '$concept_rival$')]."
 rivalry_desc: "Establishes a [concept_rivalry] with another [concept_country]."
 rivalry_action_notification_name:0 "[INITIATOR_COUNTRY.GetName] declared [concept_rivalry]"
 rivalry_action_notification_desc:4 "[INITIATOR_COUNTRY.GetName] have declared [GetPlayer.GetName] their [Concept('concept_rivalry','$concept_rival$')]. Their [concept_attitude] towards [GetPlayer.GetName] is #tooltippable #tooltip:[INITIATOR_COUNTRY.GetTooltipTag],COUNTRY_ATTITUDE_TOOLTIP [INITIATOR_COUNTRY.GetAttitudeTowards(GetPlayer).GetName]#!#!."
 rivalry_action_notification_third_party_name:1 "[INITIATOR_COUNTRY.GetAdjectiveNoFormatting]-[TARGET_COUNTRY.GetAdjectiveNoFormatting] [concept_rivalry] Declared"
 rivalry_action_notification_third_party_desc:1 "[INITIATOR_COUNTRY.GetName] have declared [TARGET_COUNTRY.GetName] to be their [Concept('concept_rivalry', '$concept_rival$')]."
 rivalry_action_notification_break_name:0 "[INITIATOR_COUNTRY.GetName] ended [concept_rivalry]"
 rivalry_action_notification_break_desc:1 "[INITIATOR_COUNTRY.GetName] no longer view [GetPlayer.GetName] as a [Concept('concept_rivalry', '$concept_rival$')]."
 rivalry_action_notification_third_party_break_name:1 "[INITIATOR_COUNTRY.GetAdjectiveNoFormatting]-[TARGET_COUNTRY.GetAdjectiveNoFormatting] [concept_rivalry] Ended"
 rivalry_action_notification_third_party_break_desc:0 "[INITIATOR_COUNTRY.GetName] ended their [concept_rivalry] with [TARGET_COUNTRY.GetName]."

 rivalry_effect_desc_global:0 "Declares a [concept_rivalry]"
 rivalry_effect_desc_first:0 "[COUNTRY.GetNameNoFlag] declares a [concept_rivalry] with [TARGET_COUNTRY.GetName]"
 rivalry_effect_desc_third:0 "[COUNTRY.GetName] declares a [concept_rivalry] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 rivalry_trigger_desc_global:0 "Has a [concept_rivalry]"
 rivalry_trigger_false_desc_global:0 "Does #b not#! have a [concept_rivalry]"
 rivalry_trigger_desc_first:0 "[COUNTRY.GetNameNoFlag] has a [concept_rivalry] with [TARGET_COUNTRY.GetName]"
 rivalry_trigger_false_desc_first:0 "[COUNTRY.GetNameNoFlag] does #b not#! have a [concept_rivalry] with [TARGET_COUNTRY.GetName]"
 rivalry_trigger_desc_third:0 "[COUNTRY.GetName] has a [concept_rivalry] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 rivalry_trigger_false_desc_third:0 "[COUNTRY.GetName] does #b not#! have a [concept_rivalry] with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 fund_lobbies_trigger_desc_global:0 "Is [Concept('concept_fund_lobbies', '$concept_funding_lobbies$')]"
 fund_lobbies_trigger_false_desc_global:0 "Is #b not#! [Concept('concept_fund_lobbies', '$concept_funding_lobbies$')]"
 fund_lobbies_trigger_desc_first:0 "[COUNTRY.GetName] is [Concept('concept_fund_lobbies', '$concept_funding_lobbies$')] in [TARGET_COUNTRY.GetName]"
 fund_lobbies_trigger_false_desc_first:0 "[COUNTRY.GetName] is #b not#! [Concept('concept_fund_lobbies', '$concept_funding_lobbies$')] in [TARGET_COUNTRY.GetName]"
 fund_lobbies_trigger_desc_third:0 "[COUNTRY.GetName] is [Concept('concept_fund_lobbies', '$concept_funding_lobbies$')] in [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 fund_lobbies_trigger_false_desc_third:0 "[COUNTRY.GetName] is #b not#! [Concept('concept_fund_lobbies', '$concept_funding_lobbies$')] in [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 embargo:0 "Embargo"
 embargo_action_name:0 "[concept_embargo]"
 embargo_action_propose_name:0 "[concept_embargo]"
 embargo_action_break_name:0 "End [concept_embargo]"
 embargo_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] is [Concept('concept_embargo', '$concept_embargoing$')] [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 embargo_desc: "Places an [concept_embargo] on another [concept_country]."
 embargo_action_notification_name:0 "[concept_embargo]"
 embargo_action_notification_desc:0 "[INITIATOR_COUNTRY.GetName] have begun [Concept('concept_embargo', '$concept_embargoing$')] [GetPlayer.GetName]."
 embargo_action_notification_third_party_name:0 "[concept_embargo]"
 embargo_action_notification_third_party_desc:0 "[INITIATOR_COUNTRY.GetName] began [Concept('concept_embargo', '$concept_embargoing$')] [TARGET_COUNTRY.GetName]."
 embargo_action_notification_break_name:0 "[concept_embargo] Ended"
 embargo_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] ceased [Concept('concept_embargo', '$concept_embargoing$')] [GetPlayer.GetName]."
 embargo_action_notification_third_party_break_name:0 "[concept_embargo] Ended"
 embargo_action_notification_third_party_break_desc:0 "[INITIATOR_COUNTRY.GetName] ended their [concept_embargo] with [TARGET_COUNTRY.GetName]."

 embargo_effect_desc_global:0 "Starts an [concept_embargo]"
 embargo_effect_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] starts to [concept_embargo] [TARGET_COUNTRY.GetName]"
 embargo_effect_desc_third:0 "[COUNTRY.GetName] starts to [concept_embargo] [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 embargo_trigger_desc_global:0 "Has an [concept_embargo]"
 embargo_trigger_false_desc_global:0 "Does #b not#! have an [concept_embargo]"
 embargo_trigger_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] has an [concept_embargo] against [TARGET_COUNTRY.GetName]"
 embargo_trigger_false_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] does #b not#! have an [concept_embargo] against [TARGET_COUNTRY.GetName]"
 embargo_trigger_desc_third:0 "[COUNTRY.GetName] has an [concept_embargo] against [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 embargo_trigger_false_desc_third:0 "[COUNTRY.GetName] does #b not#! have an [concept_embargo] against [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 war_reparations:0 "War Reparations"
 war_reparations_action_name:0 "[concept_war_reparations]"
 war_reparations_action_propose_name:0 "Demand [concept_war_reparations]"
 war_reparations_action_break_name:0 "End [concept_war_reparations]"
 war_reparations_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] are paying weekly [concept_war_reparations] to [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 war_reparations_desc: "Causes one [concept_country] to have to pay part of its income to another for the duration of the pact."
 war_reparations_type_break_desc:0 "End the ongoing payment of [concept_war_reparations] from another country to us."
 war_reparations_action_notification_name:0 "[concept_war_reparations] from [TARGET_COUNTRY.GetName]"
 war_reparations_action_notification_desc:0 "[TARGET_COUNTRY.GetName] have started to pay us [concept_war_reparations]."
 war_reparations_action_notification_break_name:0 "[concept_war_reparations] Ended"
 war_reparations_action_notification_break_desc:0 "[TARGET_COUNTRY.GetName] ended our ongoing payments of [concept_war_reparations]."

 colonization_rights:0 "Colonization Rights"
 colonization_rights_action_name:0 "[concept_colonization_rights]"
 colonization_rights_action_propose_name:0 "Demand [concept_colonization_rights]"
 colonization_rights_action_break_name:0 "End [concept_colonization_rights]"
 colonization_rights_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] have granted [concept_colonization_rights] to [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 colonization_rights_desc: "One [concept_country] is granted [concept_colonization_rights] over another for the duration of the pact."
 colonization_rights_type_break_desc:0 "End the ongoing [concept_colonization_rights] from another country to us."
 colonization_rights_action_notification_name:0 "[concept_colonization_rights] from [TARGET_COUNTRY.GetName]"
 colonization_rights_action_notification_desc:0 "[TARGET_COUNTRY.GetName] have started to pay us [concept_colonization_rights]."
 colonization_rights_action_notification_break_name:0 "[concept_colonization_rights] Ended"
 colonization_rights_action_notification_break_desc:0 "[TARGET_COUNTRY.GetName] ended our ongoing payments of [concept_colonization_rights]."

 #military_assistance: "Military Assistance"
 #military_assistance_desc: "Grants [concept_military_assistance] to another [concept_country]."
 military_assistance_action_notification_name: "[concept_military_assistance] to [TARGET_COUNTRY.GetName]"
 military_assistance_action_notification_desc: "[INITIATOR_COUNTRY.GetName] is providing [concept_military_assistance] to [TARGET_COUNTRY.GetName]"
 military_assistance_action_notification_third_party_name: "[concept_military_assistance] to [TARGET_COUNTRY.GetName]"
 military_assistance_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] is providing [concept_military_assistance] to [TARGET_COUNTRY.GetName]"
 military_assistance_action_propose_name: "Offer $military_assistance$"
 military_assistance_action_break_name: "Halt $military_assistance$"
 military_assistance_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] is providing [concept_military_assistance] to [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 military_assistance_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] halted $military_assistance$"
 military_assistance_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] has stopped providing [concept_military_assistance] to our country."
 military_assistance_action_notification_third_party_break_name: "[INITIATOR_COUNTRY.GetName]-[TARGET_COUNTRY.GetName] $military_assistance$ ended"
 military_assistance_action_notification_third_party_break_desc: "[INITIATOR_COUNTRY.GetName] has stopped providing [concept_military_assistance] to [TARGET_COUNTRY.GetName]."
 military_assistance_action_name: "$military_assistance$"
 military_assistance_proposal_accepted_name: "[concept_military_assistance] Accepted"
 military_assistance_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our request to grant them [concept_military_assistance]."
 military_assistance_proposal_declined_name: "[concept_military_assistance] Rejected"
 military_assistance_proposal_declined_desc: "[TARGET_COUNTRY.GetName] refused our request to grant them [concept_military_assistance]."
 military_assistance_proposal_notification_name: "Offer for [concept_military_assistance]"
 military_assistance_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] is offering to provide [concept_military_assistance] to our [concept_country]."
 military_assistance_proposal_third_party_accepted_name: "[concept_military_assistance] granted to [TARGET_COUNTRY.GetNameNoFormatting]"
 military_assistance_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] was granted [concept_military_assistance] from [INITIATOR_COUNTRY.GetName]."
 military_assistance_proposal_third_party_declined_name: "[concept_military_assistance] denied to [TARGET_COUNTRY.GetNameNoFormatting]"
 military_assistance_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] was denied [concept_military_assistance] from [INITIATOR_COUNTRY.GetName]."

 military_assistance_trigger_desc_global: "Is providing [concept_military_assistance]"
 military_assistance_trigger_false_desc_global: "Is #bold not#! providing [concept_military_assistance]"
 military_assistance_trigger_desc_first: "[COUNTRY.GetAdjectiveNoFlag] administration is providing [concept_military_assistance] to [TARGET_COUNTRY.GetName]"
 military_assistance_trigger_false_desc_first: "[COUNTRY.GetAdjectiveNoFlag] administration is #b not#! providing [concept_military_assistance] to [TARGET_COUNTRY.GetName]"
 military_assistance_trigger_desc_third: "[COUNTRY.GetName] is providing [concept_military_assistance] to [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 military_assistance_trigger_false_desc_third: "[COUNTRY.GetName] is #bold not#! providing [concept_military_assistance] to [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 military_assistance_request: "Request Military Assistance"
 military_assistance_request_desc: "$military_assistance_desc$"
 military_assistance_request_action_name: "$request_military_assistance$"
 military_assistance_request_proposal_accepted_name: "[concept_military_assistance] Granted"
 military_assistance_request_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our request for [concept_military_assistance]."
 military_assistance_request_proposal_declined_name: "[concept_military_assistance] Denied"
 military_assistance_request_proposal_declined_desc: "[TARGET_COUNTRY.GetName] refused our request for [concept_military_assistance]."
 military_assistance_request_proposal_notification_name: "Request for [concept_military_assistance]"
 military_assistance_request_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] is requesting that we provide [concept_military_assistance] to them."
 military_assistance_request_proposal_third_party_accepted_name: "[concept_military_assistance] granted to [INITIATOR_COUNTRY.GetNameNoFormatting]"
 military_assistance_request_proposal_third_party_accepted_desc: "[INITIATOR_COUNTRY.GetName] was granted [concept_military_assistance] from [TARGET_COUNTRY.GetName]."
 military_assistance_request_proposal_third_party_declined_name: "[concept_military_assistance] denied to [INITIATOR_COUNTRY.GetNameNoFormatting]"
 military_assistance_request_proposal_third_party_declined_desc: "[INITIATOR_COUNTRY.GetName] was denied [concept_military_assistance] from [TARGET_COUNTRY.GetName]."

 military_assistance_effect_desc_global:0 "Begins [concept_military_assistance]"
 military_assistance_effect_desc_first:1 "[COUNTRY.GetName] begins sending [concept_military_assistance] to [TARGET_COUNTRY.GetNameNoFlag]"
 military_assistance_effect_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, COUNTRY.Self),COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, COUNTRY.Self)),COUNTRY.GetName)] begins sending [concept_military_assistance] to [TARGET_COUNTRY.GetName]"

 #foreign_investment_rights: "Investment Rights"
 foreign_investment_rights_action_name: "$foreign_investment_rights$"
 foreign_investment_rights_action_propose_name: "Request $foreign_investment_rights$"
 foreign_investment_rights_action_break_name: "Cancel $concept_foreign_investment_rights$"
 foreign_investment_rights_action_notification_name: "[concept_foreign_investment_rights] in [TARGET_COUNTRY.GetName]"
 foreign_investment_rights_action_notification_desc: "[INITIATOR_COUNTRY.GetName] now have [concept_foreign_investment_rights] in [TARGET_COUNTRY.GetName]."
 #foreign_investment_rights_desc: "Establishes unilateral [concept_foreign_investment_rights] in a [concept_country]."
 foreign_investment_rights_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] has been granted [concept_foreign_investment_rights] in [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 foreign_investment_rights_proposal_notification_name: "Request for [concept_foreign_investment_rights]"
 foreign_investment_rights_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] requests [concept_foreign_investment_rights] in our [concept_country]."
 foreign_investment_rights_proposal_notification_effects_desc: "If we accept, they will be able to construct and acquire [Concept('concept_building', '$concept_buildings$')] in our [concept_country]."
 foreign_investment_rights_proposal_accepted_name: "[concept_foreign_investment_rights] Accepted"
 foreign_investment_rights_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our request for [concept_foreign_investment_rights] in their [concept_country]."
 foreign_investment_rights_proposal_declined_name: "[concept_foreign_investment_rights] Rejected"
 foreign_investment_rights_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined our request for [concept_foreign_investment_rights] in their [concept_country]."
 foreign_investment_rights_action_notification_break_name: "[INITIATOR_COUNTRY.GetAdjective] [concept_foreign_investment_rights] revoked"
 foreign_investment_rights_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] have revoked our [concept_foreign_investment_rights]."
 foreign_investment_rights_proposal_third_party_accepted_name: "[concept_foreign_investment_rights] Granted"
 foreign_investment_rights_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] granted [concept_foreign_investment_rights] to [INITIATOR_COUNTRY.GetName]."
 foreign_investment_rights_proposal_third_party_declined_name: "[concept_foreign_investment_rights] Rejected"
 foreign_investment_rights_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] refused to grant [concept_foreign_investment_rights] to [INITIATOR_COUNTRY.GetName]."
 foreign_investment_rights_action_notification_third_party_break_name: "[concept_foreign_investment_rights] Revoked"
 foreign_investment_rights_action_notification_third_party_break_desc: "[INITIATOR_COUNTRY.GetName] revoked the [concept_foreign_investment_rights] they had granted to [TARGET_COUNTRY.GetName]."
 foreign_investment_rights_trigger_desc_first: "[COUNTRY.GetNameNoFlag] has [concept_foreign_investment_rights] in [TARGET_COUNTRY.GetName]"
 foreign_investment_rights_trigger_false_desc_first: "[COUNTRY.GetName] does #b not#! have [concept_foreign_investment_rights] in [TARGET_COUNTRY.GetName]"
 foreign_investment_rights_trigger_desc_global: "Has [concept_foreign_investment_rights] in this country"
 foreign_investment_rights_trigger_false_desc_global: "Does #b not#! have [concept_foreign_investment_rights] in this country"
 foreign_investment_rights_trigger_desc_third: "[COUNTRY.GetName] has [concept_foreign_investment_rights] in [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 foreign_investment_rights_trigger_false_desc_third: "[COUNTRY.GetName] does #b not#! have [concept_foreign_investment_rights] in [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 grant_foreign_investment_rights: "Grant $foreign_investment_rights$"
 grant_foreign_investment_rights_action_name: "$grant_foreign_investment_rights$"
 grant_foreign_investment_rights_action_propose_name: "$grant_foreign_investment_rights$"
 grant_foreign_investment_rights_desc: "Grants [concept_foreign_investment_rights] to another [concept_country]."
 grant_foreign_investment_rights_proposal_notification_name: "Offer to Grant [concept_foreign_investment_rights]"
 grant_foreign_investment_rights_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] wishes to grant us [concept_foreign_investment_rights] in their [concept_country]."
 grant_foreign_investment_rights_proposal_accepted_name: "[concept_foreign_investment_rights] Accepted"
 grant_foreign_investment_rights_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our offer to grant them [concept_foreign_investment_rights]."
 grant_foreign_investment_rights_proposal_declined_name: "[concept_foreign_investment_rights] Rejected"
 grant_foreign_investment_rights_proposal_declined_desc: "[TARGET_COUNTRY.GetName] rejected our offer to grant them [concept_foreign_investment_rights]."
 grant_foreign_investment_rights_proposal_notification_effects_desc: "If we accept, we will be able to construct and acquire [Concept('concept_building', '$concept_buildings$')] in their [concept_country]."
 grant_foreign_investment_rights_proposal_third_party_accepted_name: "[concept_foreign_investment_rights] Granted"
 grant_foreign_investment_rights_proposal_third_party_accepted_desc: "[INITIATOR_COUNTRY.GetName] granted [concept_foreign_investment_rights] to [TARGET_COUNTRY.GetName]."
 grant_foreign_investment_rights_proposal_third_party_declined_name: "[concept_foreign_investment_rights] Rejected"
 grant_foreign_investment_rights_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] refused to accept the granting of [concept_foreign_investment_rights] in [TARGET_COUNTRY.GetName]."

 foreign_investment_agreement: "Mutual Investment Agreement"
 foreign_investment_agreement_action_name: "Mutual [concept_foreign_investment_rights] Agreement"
 foreign_investment_agreement_desc: "A [concept_diplomatic_pact] between two [Concept('concept_country','$concept_countries$')] to establish a Mutual [concept_foreign_investment_rights] Agreement."
 foreign_investment_agreement_proposal_accepted_name: "$foreign_investment_agreement$ Accepted"
 foreign_investment_agreement_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our proposal for Mutual [concept_foreign_investment_rights]."
 foreign_investment_agreement_proposal_declined_name: "$foreign_investment_agreement$ Declined"
 foreign_investment_agreement_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined our proposal for Mutual [concept_foreign_investment_rights]."
 foreign_investment_agreement_proposal_notification_name: "Mutual [concept_foreign_investment_rights] Agreement with [INITIATOR_COUNTRY.GetName]"
 foreign_investment_agreement_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] has proposed a Mutual [concept_foreign_investment_rights] Agreement with us."
 foreign_investment_agreement_proposal_notification_effects_desc: "$foreign_investment_agreement_desc$"
 foreign_investment_agreement_action_propose_name: "Propose Investment Agreement"
 foreign_investment_agreement_action_break_name: "Break Investment Agreement"
 foreign_investment_agreement_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] and [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] have entered into a Mutual [concept_foreign_investment_rights] Agreement."
 foreign_investment_agreement_action_notification_break_name: "[concept_foreign_investment_rights] Agreement Ended"
 foreign_investment_agreement_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] has canceled our Mutual [concept_foreign_investment_rights] Agreement"
 foreign_investment_agreement_proposal_third_party_accepted_name: "$foreign_investment_agreement$ Accepted"
 foreign_investment_agreement_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] has accepted the proposal for Mutual [concept_foreign_investment_rights] from [INITIATOR_COUNTRY.GetName] ."
 foreign_investment_agreement_proposal_third_party_declined_name: "$foreign_investment_agreement$ Declined"
 foreign_investment_agreement_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] has declined the proposal for Mutual [concept_foreign_investment_rights] from [INITIATOR_COUNTRY.GetName] ."
 foreign_investment_agreement_action_notification_third_party_break_name: "End [concept_foreign_investment_rights]"
 foreign_investment_agreement_action_notification_third_party_break_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] and [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] have ended their Mutual [concept_foreign_investment_rights] Agreement."

 humiliation:0 "Humiliation"
 humiliation_action_name:0 "[concept_humiliation]"
 humiliation_action_propose_name:0 "Demand [concept_humiliation]"
 humiliation_action_break_name:0 "End [concept_humiliation]"
 humiliation_pact_desc:1 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] have been [Concept('concept_humiliation', '$concept_humiliated$')] by [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 humiliation_desc: "Prevents a [concept_country] from opposing the other in [Concept('concept_diplomatic_play','$concept_diplomatic_plays$')] for the duration of the pact."
 humiliation_type_break_desc:1 "End the [Concept('concept_humiliation', '$concept_humiliated$')] of another country."
 humiliation_action_notification_name:0 "Humiliation"
 humiliation_action_notification_desc:1 "We [Concept('concept_humiliation', '$concept_humiliated$')] [TARGET_COUNTRY.GetName]."
 humiliation_action_notification_break_name:0 "[concept_humiliation] Ended"
 humiliation_action_notification_break_desc:1 "[TARGET_COUNTRY.GetName] ended our ongoing [Concept('concept_humiliation', '$concept_humiliated$')]."

 #guarantee_independence: "Guarantee Independence"
 guarantee_independence_action_name: "$guarantee_independence$"
 guarantee_independence_action_propose_name: "$guarantee_independence$"
 guarantee_independence_action_break_name: "Stop Guaranteeing Independence"
 guarantee_independence_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] are guaranteeing the independence of [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 #guarantee_independence_desc: "[concept_guarantee_independence_desc]"
 guarantee_independence_action_notification_name: "[INITIATOR_COUNTRY.GetName] guaranteeing our independence"
 guarantee_independence_action_notification_desc: "[INITIATOR_COUNTRY.GetName] have started to guarantee the independence of our [concept_country]. We will be able to call on them for help if we are the target of a [concept_diplomatic_play]."
 guarantee_independence_action_notification_break_name: "[INITIATOR_COUNTRY.GetAdjective] stopped guaranteeing our independence"
 guarantee_independence_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] are no longer guaranteering our independence."

 guarantee_independence_effect_desc_global: "Starts to [concept_guarantee_independence]"
 guarantee_independence_effect_desc_first: "[COUNTRY.GetName] starts to [concept_guarantee_independence] of [TARGET_COUNTRY.GetName]"
 guarantee_independence_effect_desc_third: "[COUNTRY.GetName] starts to [concept_guarantee_independence] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 bankroll:0 "Bankroll"
 bankroll_action_name:0 "$bankroll$"
 bankroll_action_propose_name:0 "Start Bankrolling"
 bankroll_action_break_name:0 "Stop Bankrolling"
 bankroll_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] are bankrolling [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 bankroll_desc:1 "[concept_bankroll_desc]"
 bankroll_action_notification_name:1 "[INITIATOR_COUNTRY.GetName] bankrolling us"
 bankroll_action_notification_desc:1 "[INITIATOR_COUNTRY.GetName] have started to bankroll our country for a sum equal to #v 10%#! of our tax income each week. Over time, this may cause us to owe them an [concept_obligation]."
 bankroll_action_notification_break_name:1 "[INITIATOR_COUNTRY.GetName] no longer bankrolling us"
 bankroll_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] ended their ongoing bankrolling of our country."
 bankroll_weekly_obligation_effect:0 "#v 0.2%#! chance to generate or absolve an [concept_obligation] for the bankrolling country"

 bankroll_effect_desc_global:0 "Starts to [concept_bankroll]"
 bankroll_effect_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] starts to [concept_bankroll] [TARGET_COUNTRY.GetName]"
 bankroll_effect_desc_third:0 "[COUNTRY.GetName] starts to [concept_bankroll] [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 bankroll_trigger_desc_global:0 "Is [Concept('concept_bankroll','$concept_bankrolling$')]"
 bankroll_trigger_false_desc_global:0 "Is #b not#! [Concept('concept_bankroll','$concept_bankrolling$')]"
 bankroll_trigger_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] is [Concept('concept_bankroll','$concept_bankrolling$')] [TARGET_COUNTRY.GetName]"
 bankroll_trigger_false_desc_first:0 "[COUNTRY.GetAdjectiveNoFlag] is #b not#! [Concept('concept_bankroll','$concept_bankrolling$')] [TARGET_COUNTRY.GetName]"
 bankroll_trigger_desc_third:0 "[COUNTRY.GetName] is [Concept('concept_bankroll','$concept_bankrolling$')] [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 bankroll_trigger_false_desc_third:0 "[COUNTRY.GetName] is #b not#! [Concept('concept_bankroll','$concept_bankrolling$')] [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 fund_lobbies: "Fund Lobbies"
 fund_lobbies_action_name: "$fund_lobbies$"
 fund_lobbies_action_propose_name: "Start $concept_funding_lobbies$"
 fund_lobbies_action_break_name: "Stop $concept_funding_lobbies$"
 fund_lobbies_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] are $concept_funding_lobbies$ in [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 fund_lobbies_desc: "[concept_fund_lobbies_desc]"
 fund_lobbies_action_notification_name: "[INITIATOR_COUNTRY.GetName] $concept_funding_lobbies$"
 fund_lobbies_action_notification_desc: "[INITIATOR_COUNTRY.GetName] have started to $fund_lobbies$. Over time this may create and strengthen [Concept('concept_political_lobby', '$concept_political_lobbies_short$')] friendly to them in our [concept_country]."
 fund_lobbies_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] stopped $concept_funding_lobbies$"
 fund_lobbies_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] have ceased to $fund_lobbies$ in our [concept_country]."
 fund_lobbies_weekly_create_lobby_effect: "Between #v 0.25%#! and #v 1%#! chance (depending on [concept_rank] and geographical proximity) to create a friendly [concept_political_lobby] in the target [concept_country], if there are [Concept('concept_interest_group','$concept_interest_groups$')] who are interested in supporting us"
 fund_lobbies_increase_friendly_join_weight_effect: "Increases [concept_interest_group] desire to join $concept_political_lobbies$ who are friendly towards us"
 fund_lobbies_decrease_hostile_join_weight_effect: "Decreases [concept_interest_group] desire to join $concept_political_lobbies$ who are hostile towards us"
 fund_lobbies_decrease_rival_friendly_join_weight_effect: "Decreases [concept_interest_group] desire to join $concept_political_lobbies$ who are friendly towards our [Concept('concept_rivalry','$concept_rivals$')]"
 fund_lobbies_increase_rival_hostile_join_weight_effect: "Increases [concept_interest_group] desire to join $concept_political_lobbies$ who are hostile towards our [Concept('concept_rivalry','$concept_rivals$')]"

 #take_on_debt:1 "Take on Debt"
 take_on_debt_action_name:1 "Take On [Concept('concept_credit','$concept_credit_debt$')]"
 take_on_debt_action_propose_name:0 "Take On [Concept('concept_credit','$concept_credit_debt$')]"
 #take_on_debt_desc: "Take over another [Concept('concept_country','$concept_country_possessive$')] [concept_loans] in exchange for an [concept_obligation]."
 take_on_debt_proposal_notification_name:1 "$take_on_debt_action_name$ Proposed"
 take_on_debt_proposal_notification_desc:5 "[INITIATOR_COUNTRY.GetName] has proposed to take on our national [Concept('concept_credit','$concept_credit_debt$')], hopefully this is not done with a sinister motive."
 take_on_debt_proposal_notification_effects_desc:0 "$take_on_debt_desc$"
 take_on_debt_proposal_accepted_name:0 "$take_on_debt_action_name$ Accepted"
 take_on_debt_proposal_accepted_desc:1 "[TARGET_COUNTRY.GetName] accepted our proposal to take on their national [Concept('concept_credit','$concept_credit_debt$')]."
 take_on_debt_proposal_declined_name:0 "$take_on_debt_action_name$ Refused"
 take_on_debt_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our proposal to take on their national [Concept('concept_credit','$concept_credit_debt$')]."
 take_on_debt_proposal_third_party_accepted_name:1 "$take_on_debt_action_name$ Accepted"
 take_on_debt_proposal_third_party_accepted_desc:2 "[INITIATOR_COUNTRY.GetName] has taken on [TARGET_COUNTRY.GetName]'s national [Concept('concept_credit','$concept_credit_debt$')]. As a result, they are now owed an [concept_obligation]."
 take_on_debt_proposal_third_party_declined_name:0 "$take_on_debt_action_name$ Refused"
 take_on_debt_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] declined to have [INITIATOR_COUNTRY.GetName] take on their national [Concept('concept_credit','$concept_credit_debt$')]."

 trade_states: "Trade States"
 trade_states_action_name: "Trade [Concept('concept_state','$concept_states$')]"
 trade_states_action_propose_name: "Trade [Concept('concept_state','$concept_states$')]"
 trade_states_desc: "Propose to give away or swap [Concept('concept_state','$concept_states$')] with another [concept_country]."
 trade_states_proposal_notification_name: "$trade_states_action_name$ Proposed"
 trade_states_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] has proposed a transfer of [Concept('concept_state','$concept_states$')]:\n$STATES_DESC$"
 trade_states_proposal_notification_effects_desc: "$trade_states_desc$"
 trade_states_proposal_accepted_name: "$trade_states_action_name$ Accepted"
 trade_states_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our proposal to a transfer of [Concept('concept_state','$concept_states$')]:\n$STATES_DESC$"
 trade_states_proposal_declined_name: "$trade_states_action_name$ Refused"
 trade_states_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined our proposal to a transfer of [Concept('concept_state','$concept_states$')]:\n$STATES_DESC$"
 trade_states_proposal_third_party_accepted_name: "$trade_states_action_name$ Accepted"
 trade_states_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] accepted a transfer of [Concept('concept_state','$concept_states$')] with [INITIATOR_COUNTRY.GetName]:\n$STATES_DESC$"
 trade_states_proposal_third_party_declined_name: "$trade_states_action_name$ Refused"
 trade_states_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] declined a transfer of [Concept('concept_state','$concept_states$')] with [INITIATOR_COUNTRY.GetName]:\n$STATES_DESC$"

 force_regime_change: "Force Regime Change"
 force_regime_change_action_name: "Force [concept_regime_change]"
 force_regime_change_desc: "Enforce an immediate [concept_regime_change] in a [concept_power_bloc_member] whose politics are out of line with the rest of the [concept_power_bloc]."
 force_regime_change_action_notification_name: "[INITIATOR_COUNTRY.GetName] enforced [concept_regime_change]"
 force_regime_change_action_notification_desc: "[INITIATOR_COUNTRY.GetName] has enforced a [concept_regime_change] on us"
 force_regime_change_action_notification_third_party_name: "[INITIATOR_COUNTRY.GetName] enforced [concept_regime_change]"
 force_regime_change_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] has enforced a [concept_regime_change] on [TARGET_COUNTRY.GetName]"

 force_state_religion: "Impose $concept_state_religion$"
 force_state_religion_action_name: "Impose [concept_state_religion]"
 force_state_religion_desc: "Enforce an immediate change of [concept_state_religion] in a [concept_power_bloc_member] to match our own."
 force_state_religion_action_notification_name: "[INITIATOR_COUNTRY.GetName] imposed [concept_state_religion]"
 force_state_religion_action_notification_desc: "[INITIATOR_COUNTRY.GetName] has imposed their [concept_state_religion] on us"
 force_state_religion_action_notification_third_party_name: "[INITIATOR_COUNTRY.GetName] imposed [concept_state_religion]"
 force_state_religion_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] has imposed their [concept_state_religion] on [TARGET_COUNTRY.GetName]"

 force_become_subject: "Subjugate"
 force_become_subject_action_name: "Subjugate"
 force_become_subject_desc: "Immediately turn them into our [concept_subject]."
 force_become_subject_action_notification_name: "Subjugation by [INITIATOR_COUNTRY.GetName]"
 force_become_subject_action_notification_desc: "[INITIATOR_COUNTRY.GetName] have turned us into their [concept_subject]"
 force_become_subject_action_notification_third_party_name: "Subjugation by [INITIATOR_COUNTRY.GetName]"
 force_become_subject_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] have turned [TARGET_COUNTRY.GetName] into their [TARGET_COUNTRY.GetSubjectType.GetName]"

 grant_state: "Grant State"
 grant_state_action_name: "Grant [concept_state]"
 grant_state_desc: "Give away one of your own [Concept('concept_state','$concept_states$')] to a [concept_subject], or transfer a $concept_state$ from one $concept_subject$ to another. This will affect [concept_liberty_desire], and [concept_homeland] $concept_states$ are worth more $concept_liberty_desire$."
 grant_state_action_notification_name: "[INITIATOR_COUNTRY.GetName] granted $concept_state$"
 grant_state_action_notification_desc: "[INITIATOR_COUNTRY.GetName] has granted us [INITIATOR_STATE.GetName]"
 grant_state_action_notification_third_party_name: "[INITIATOR_COUNTRY.GetName] granted $concept_state$"
 grant_state_action_notification_third_party_desc: "[TARGET_COUNTRY.GetName] has been granted [INITIATOR_STATE.GetName] by [INITIATOR_COUNTRY.GetName] "

 take_state: "Take State"
 take_state_action_name: "Take [concept_state]"
 take_state_desc: "Take a [concept_state] from a [concept_subject]. This will affect [concept_liberty_desire], and [concept_homeland] $concept_states$ cost more $concept_liberty_desire$."
 take_state_action_notification_name: "[INITIATOR_COUNTRY.GetName] took $concept_state$"
 take_state_action_notification_desc: "[INITIATOR_COUNTRY.GetName] took [TARGET_STATE.GetName] from us"
 take_state_action_notification_third_party_name: "[INITIATOR_COUNTRY.GetName] took $concept_state$"
 take_state_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] took [TARGET_STATE.GetName] from [TARGET_COUNTRY.GetName]"

 demand_state: "Demand State"
 demand_state_action_name: "Demand [concept_state]"
 demand_state_desc: "Demand your [concept_overlord] grant you one of their own [Concept('concept_state','$concept_states$')], or transfer a $concept_state$ from one of their $concept_subjects$ to you. This will decrease your [concept_liberty_desire] if granted."
 demand_state_proposal_notification_name: "[INITIATOR_COUNTRY.GetName] demanded $concept_state$"
 demand_state_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] has demanded $STATES_DESC$ from us"
 demand_state_proposal_accepted_name: "$demand_state_action_name$ Accepted"
 demand_state_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our demand for $STATES_DESC$"
 demand_state_proposal_declined_name: "$demand_state_action_name$ Refused"
 demand_state_proposal_declined_desc: "[TARGET_COUNTRY.GetName] refused our demand for $STATES_DESC$"
 demand_state_proposal_third_party_accepted_name: "$demand_state_action_name$ Accepted"
 demand_state_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] accepted a demand from [INITIATOR_COUNTRY.GetName] to grant them $STATES_DESC$"
 demand_state_proposal_third_party_declined_name: "$demand_state_action_name$ Refused"
 demand_state_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] refused a demand from [INITIATOR_COUNTRY.GetName] to grant them $STATES_DESC$"

 customs_union:0 "Customs Union"
 customs_union_action_name:0 "[concept_customs_union]"
 customs_union_action_propose_name:0 "Invite to [concept_customs_union]"
 customs_union_action_break_name:0 "End [concept_customs_union]"
 customs_union_action_notification_name:0 "[concept_customs_union] with [INITIATOR_COUNTRY.GetName]"
 customs_union_action_notification_desc:0 "We have entered into a [concept_customs_union] with [INITIATOR_COUNTRY.GetName]."
 customs_union_desc: "Establishes a [concept_customs_union] between two [Concept('concept_country', '$concept_countries$')]."
 customs_union_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] is the [concept_senior_partner] in a [concept_customs_union] with [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 customs_union_proposal_notification_name:0 "Proposal for [concept_customs_union]"
 customs_union_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] wishes for us to enter their #variable [concept_customs_union]#!."
 customs_union_proposal_notification_effects_desc:0 "$customs_union_desc$"
 customs_union_proposal_accepted_name:0 "[concept_customs_union] Accepted"
 customs_union_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted our proposal for a #variable [concept_customs_union]#!."
 customs_union_proposal_declined_name:0 "[concept_customs_union] Declined"
 customs_union_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our proposal for a #variable [concept_customs_union]#!."
 customs_union_action_notification_break_name:0 "[concept_customs_union] with [INITIATOR_COUNTRY.GetName] broken"
 customs_union_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have broken off their #variable [concept_customs_union]#! with us."
 customs_union_proposal_third_party_accepted_name:0 "[concept_customs_union] Joined"
 customs_union_proposal_third_party_accepted_desc:0 "[TARGET_COUNTRY.GetName] entered into a [concept_customs_union] with [INITIATOR_COUNTRY.GetName]."
 customs_union_proposal_third_party_declined_name:0 "[concept_customs_union] Rejected"
 customs_union_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to enter into a #variable [concept_customs_union]#! with [INITIATOR_COUNTRY.GetName]."
 customs_union_action_notification_third_party_break_name:0 "[concept_customs_union] Broken"
 customs_union_action_notification_third_party_break_desc:0 "[INITIATOR_COUNTRY.GetName] broke off their #variable [concept_customs_union]#! with [TARGET_COUNTRY.GetName]."

 customs_union_effect_desc_global:0 "Enters into a [concept_customs_union]"
 customs_union_effect_desc_first:0 "[TARGET_COUNTRY.GetName] enters into a [concept_customs_union] under [COUNTRY.GetNameNoFlag]"
 customs_union_effect_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] enters into a [concept_customs_union] under [COUNTRY.GetName]"

 customs_union_trigger_desc_global:0 "Is in a [concept_customs_union]"
 customs_union_trigger_false_desc_global:0 "Is #b not#! in a [concept_customs_union]"
 customs_union_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is in a [concept_customs_union] under [COUNTRY.GetNameNoFlag]"
 customs_union_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! in a [concept_customs_union] under [COUNTRY.GetNameNoFlag]"
 customs_union_trigger_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is in a [concept_customs_union] under [COUNTRY.GetName]"
 customs_union_trigger_false_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is #b not#! in a [concept_customs_union] under [COUNTRY.GetName]"

 join_customs_union:0 "Join Customs Union"
 join_customs_union_action_name:0 "Join [concept_customs_union]"
 join_customs_union_action_propose_name:0 "Join [concept_customs_union]"
 join_customs_union_desc: "Establishes a [concept_customs_union] between two [Concept('concept_country', '$concept_countries$')], with the proposing country as the junior participant."
 join_customs_union_proposal_notification_name:0 "Request to Join [concept_customs_union]"
 join_customs_union_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] wishes to join our #variable [concept_customs_union]#!."
 join_customs_union_proposal_notification_effects_desc:0 "If we accept, their states will be able to join our markets."
 join_customs_union_proposal_accepted_name:0 "[concept_customs_union] Request Accepted"
 join_customs_union_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted our offer to join their #variable [concept_customs_union]#!."
 join_customs_union_proposal_declined_name:0 "[concept_customs_union] Request Declined"
 join_customs_union_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our offer to join their #variable [concept_customs_union]#!."
 join_customs_union_proposal_third_party_accepted_name:0 "[concept_customs_union] Joined"
 join_customs_union_proposal_third_party_accepted_desc:0 "[INITIATOR_COUNTRY.GetName] entered into a [concept_customs_union] with [TARGET_COUNTRY.GetName]."
 join_customs_union_proposal_third_party_declined_name:0 "[concept_customs_union] Rejected"
 join_customs_union_proposal_third_party_declined_desc:0 "[INITIATOR_COUNTRY.GetName] refused to enter into a #variable [concept_customs_union]#! with [TARGET_COUNTRY.GetName]."

 change_customs_union:0 "Change to Our Customs Union"
 change_customs_union_action_name:0 "Change to Our [concept_customs_union]"
 change_customs_union_action_propose_name:0 "Change to Our [concept_customs_union]"
 change_customs_union_desc: "Establishes a [concept_customs_union] between two [Concept('concept_country', '$concept_countries$')], with the recipient leaving their current [concept_customs_union] in the process."
 change_customs_union_proposal_notification_name:0 "Request to Change [concept_customs_union]"
 change_customs_union_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] wishes us to change to their #variable [concept_customs_union]#!."
 change_customs_union_proposal_notification_effects_desc:0 "If we accept, we will leave our current [concept_customs_union] and join the [INITIATOR_COUNTRY.GetCapital.GetMarket.GetName]."
 change_customs_union_proposal_accepted_name:0 "$change_customs_union$ Request Accepted"
 change_customs_union_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted our offer to change to our #variable [concept_customs_union]#!."
 change_customs_union_proposal_declined_name:0 "$change_customs_union$ Request Declined"
 change_customs_union_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our offer to change to our #variable [concept_customs_union]#!."
 change_customs_union_proposal_third_party_accepted_name:0 "$change_customs_union$ Joined"
 change_customs_union_proposal_third_party_accepted_desc:0 "[TARGET_COUNTRY.GetName] changed their [concept_customs_union] to that of [INITIATOR_COUNTRY.GetName]."
 change_customs_union_proposal_third_party_declined_name:0 "$change_customs_union$ Rejected"
 change_customs_union_proposal_third_party_declined_desc:0 "[INITIATOR_COUNTRY.GetName] refused to change their [concept_customs_union] to that of [INITIATOR_COUNTRY.GetName]."

 #alliance:0 "Alliance"
 alliance_action_name:0 "[concept_alliance]"
 alliance_action_propose_name:0 "Form [concept_alliance]"
 alliance_action_break_name:0 "End [concept_alliance]"
 alliance_action_notification_name:0 "[concept_alliance] with [INITIATOR_COUNTRY.GetName]"
 alliance_action_notification_desc:0 "We have formed an [concept_alliance] with [INITIATOR_COUNTRY.GetName]."
 #alliance_desc: "Establishes an [concept_alliance] between two [Concept('concept_country', '$concept_countries$')]."
 alliance_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] and [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] have an [concept_alliance]."
 alliance_proposal_notification_name:0 "Proposal for [concept_alliance]"
 alliance_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] wishes to enter into an [concept_alliance] with us."
 alliance_proposal_notification_effects_desc:0 "$alliance_desc$"
 alliance_proposal_accepted_name:0 "[concept_alliance] Accepted"
 alliance_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted our proposal for an [concept_alliance]."
 alliance_proposal_declined_name:0 "[concept_alliance] Declined"
 alliance_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our proposal for an [concept_alliance]."
 alliance_action_notification_break_name:0 "[concept_alliance] with [INITIATOR_COUNTRY.GetName] broken"
 alliance_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have broken off their [concept_alliance] with us."
 alliance_proposal_third_party_accepted_name:0 "[concept_alliance] Signed"
 alliance_proposal_third_party_accepted_desc:0 "[INITIATOR_COUNTRY.GetName] and [TARGET_COUNTRY.GetName] entered into a [concept_alliance]."
 alliance_proposal_third_party_declined_name:0 "[concept_alliance] Rejected"
 alliance_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to enter into an [concept_alliance] with [INITIATOR_COUNTRY.GetName]."
 alliance_action_notification_third_party_break_name:0 "[concept_alliance] Broken"
 alliance_action_notification_third_party_break_desc:0 "[INITIATOR_COUNTRY.GetName] broke off their [concept_alliance] with [TARGET_COUNTRY.GetName]."

 alliance_effect_desc_global:0 "Enters into an [concept_alliance]"
 alliance_effect_desc_first:0 "[TARGET_COUNTRY.GetName] enters into an [concept_alliance] with [COUNTRY.GetNameNoFlag]"
 alliance_effect_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] enters into an [concept_alliance] with [COUNTRY.GetName]"

 alliance_trigger_desc_global:0 "Is in an [concept_alliance]"
 alliance_trigger_false_desc_global:0 "Is #b not#! in an [concept_alliance]"
 alliance_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is in an [concept_alliance] with [COUNTRY.GetNameNoFlag]"
 alliance_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! in an [concept_alliance] with [COUNTRY.GetNameNoFlag]"
 alliance_trigger_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is in an [concept_alliance] with [COUNTRY.GetName]"
 alliance_trigger_false_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is #b not#! in an [concept_alliance] with [COUNTRY.GetName]"

 alliance_support_independence_subject: "None of the two countries is #v Supporting Independence#! of a [concept_subject] of either country"

 support_independence_trigger_desc_global:0 "Is #v Supporting Independence#! of this country"
 support_independence_trigger_false_desc_global:0 "Is #b not#! #v Supporting Independence#! of this country"
 support_independence_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is #v supporting the independence#! of [COUNTRY.GetNameNoFlag]"
 support_independence_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! #v supporting the independence#! of [COUNTRY.GetNameNoFlag]"
 support_independence_trigger_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is #v supporting the independence#! of [COUNTRY.GetName]"
 support_independence_trigger_false_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is #b not#! #v supporting the independence#! of [COUNTRY.GetName]"

 #defensive_pact:0 "Defensive Pact"
 defensive_pact_action_name:0 "[concept_defensive_pact]"
 defensive_pact_action_propose_name:0 "Form [concept_defensive_pact]"
 defensive_pact_action_break_name:0 "End [concept_defensive_pact]"
 defensive_pact_action_notification_name:0 "[concept_defensive_pact] with [INITIATOR_COUNTRY.GetName]"
 defensive_pact_action_notification_desc:0 "We have formed a [concept_defensive_pact] with [INITIATOR_COUNTRY.GetName]."
 #defensive_pact_desc: "Establishes a [concept_defensive_pact] between two [Concept('concept_country', '$concept_countries$')]."
 defensive_pact_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] and [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] have an [concept_defensive_pact]."
 defensive_pact_proposal_notification_name:0 "Proposal for [concept_defensive_pact]"
 defensive_pact_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] wishes to enter into a [concept_defensive_pact] with us."
 defensive_pact_proposal_notification_effects_desc:0 "$defensive_pact_desc$"
 defensive_pact_proposal_accepted_name:0 "[concept_defensive_pact] Accepted"
 defensive_pact_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted our proposal for a [concept_defensive_pact]."
 defensive_pact_proposal_declined_name:0 "[concept_defensive_pact] Declined"
 defensive_pact_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our proposal for a [concept_defensive_pact]."
 defensive_pact_action_notification_break_name:0 "[concept_defensive_pact] with [INITIATOR_COUNTRY.GetName] broken"
 defensive_pact_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have broken off their [concept_defensive_pact] with us."
 defensive_pact_proposal_third_party_accepted_name:0 "[concept_defensive_pact] Signed"
 defensive_pact_proposal_third_party_accepted_desc:0 "[INITIATOR_COUNTRY.GetName] and [TARGET_COUNTRY.GetName] entered into a [concept_defensive_pact]."
 defensive_pact_proposal_third_party_declined_name:0 "[concept_defensive_pact] Rejected"
 defensive_pact_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to enter into a [concept_defensive_pact] with [INITIATOR_COUNTRY.GetName]."
 defensive_pact_action_notification_third_party_break_name:0 "[concept_defensive_pact] Broken"
 defensive_pact_action_notification_third_party_break_desc:0 "[INITIATOR_COUNTRY.GetName] broke off their [concept_defensive_pact] with [TARGET_COUNTRY.GetName]."

 defensive_pact_effect_desc_global:0 "Enters into a [concept_defensive_pact]"
 defensive_pact_effect_desc_first:1 "[TARGET_COUNTRY.GetName] enters into a [concept_defensive_pact] with [COUNTRY.GetNameNoFlag]"
 defensive_pact_effect_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] enters into a [concept_defensive_pact] with [COUNTRY.GetName]"

 defensive_pact_trigger_desc_global:0 "Is in a [concept_defensive_pact]"
 defensive_pact_trigger_false_desc_global:0 "Is #b not#! in a [concept_defensive_pact]"
 defensive_pact_trigger_desc_first:1 "[TARGET_COUNTRY.GetName] is in a [concept_defensive_pact] with [COUNTRY.GetNameNoFlag]"
 defensive_pact_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! in a [concept_defensive_pact] with [COUNTRY.GetNameNoFlag]"
 defensive_pact_trigger_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is in a [concept_defensive_pact] with [COUNTRY.GetName]"
 defensive_pact_trigger_false_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is #b not#! in a [concept_defensive_pact] with [COUNTRY.GetName]"

 foreign_investment_agreement_trigger_desc_global:0 "Has a [concept_foreign_investment_rights] Agreement"
 foreign_investment_agreement_trigger_false_desc_global:0 "Does #b not#! have a [concept_foreign_investment_rights] Agreement"
 foreign_investment_agreement_trigger_desc_first:0 "[COUNTRY.GetNameNoFlag] has a [concept_foreign_investment_rights] Agreement with [TARGET_COUNTRY.GetName]"
 foreign_investment_agreement_trigger_false_desc_first:0 "[COUNTRY.GetNameNoFlag] does #b not#! have a [concept_foreign_investment_rights] Agreement with [TARGET_COUNTRY.GetName]"
 foreign_investment_agreement_trigger_desc_third:0 "[COUNTRY.GetName] has a [concept_foreign_investment_rights] Agreement with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 foreign_investment_agreement_trigger_false_desc_third:0 "[COUNTRY.GetName] does #b not#! have a [concept_foreign_investment_rights] Agreement with [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 raise_payments: "Raise Subject Payments"
 raise_payments_desc: "Increases the payment burden on a [concept_subject] towards its [concept_overlord]."
 raise_payments_action_notification_name: "[INITIATOR_COUNTRY.GetName] raising our payments"
 raise_payments_action_notification_desc: "[INITIATOR_COUNTRY.GetName] has demanded a #negative_value 100%#! increase to our regular payments. Our [concept_liberty_desire] has increased as a result."
 raise_payments_action_propose_name: "$raise_payments$"
 raise_payments_action_break_name: "Restore Subject Payments"
 raise_payments_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] demands increased regular payments from [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 # raise_payments_propose_name: "$raise_payments$"
 # raise_payments_break_name: "[INITIATOR_COUNTRY.GetName] restores regular payments"
 raise_payments_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] restored payments"
 raise_payments_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] has restored [concept_subject] @arrow_right! [concept_overlord] payments to their regular level."

 raise_payments_trigger_desc_global: "Has raised subject payments"
 raise_payments_trigger_false_desc_global: "Has #b not#! raised subject payments"
 raise_payments_trigger_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has demanded an increase in payments from their subject [TARGET_COUNTRY.GetName]"
 raise_payments_trigger_false_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has #b not#! demanded an increase in payments from their subject [TARGET_COUNTRY.GetName]"
 raise_payments_trigger_desc_third: "[COUNTRY.GetName] has demanded an increase in payments from their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 raise_payments_trigger_false_desc_third: "[COUNTRY.GetName] has #b not#! demanded an increase in payments from their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 RAISE_PAYMENTS_BREAK_ON_COOLDOWN: "You cannot break this [concept_diplomatic_pact] yet since it's been established too recently."
 CHANGE_AUTONOMY_ON_COOLDOWN_OVERLORD: "[concept_autonomy] has not been changed within the last #v 5 years#! (can be used again on [SCOPE.sCountry('target_country').GetLastCatalystExpiryDate(GetPlayer,'catalyst_autonomy_change_imposed')|v])"
 CHANGE_AUTONOMY_ON_COOLDOWN_SUBJECT: "[concept_autonomy] has not been changed within the last #v 5 years#! (can be used again on [GetPlayer.GetLastCatalystExpiryDate(SCOPE.sCountry('target_country'),'catalyst_autonomy_change_imposed')|v])"
 REQUEST_AUTONOMY_ON_COOLDOWN: "We have not requested increased [concept_autonomy] within the last #v 5 years#! (can be used again on [SCOPE.sCountry('target_country').GetLastCatalystExpiryDate(GetPlayer,'catalyst_autonomy_increase_requested')|v])"
 REQUEST_MARKET_ON_COOLDOWN: "We have not requested market control within the last #v 5 years#! (can be used again on [SCOPE.sCountry('target_country').GetLastCatalystExpiryDate(GetPlayer,'catalyst_market_control_requested')|v])"
 SUPPORT_REGIME_ON_COOLDOWN: "We have not requested support for our regime within the last #v 5 years#! (can be used again on [SCOPE.sCountry('target_country').GetLastCatalystExpiryDate(GetPlayer,'catalyst_support_regime_requested')|v])"
 REQUEST_RECOGNITION_ON_COOLDOWN: "We have not requested an embassy from them within the last #v 10 years#! (can be used again on [SCOPE.sCountry('target_country').GetLastCatalystExpiryDate(GetPlayer,'catalyst_recognition_requested')|v])"
 REQUEST_AUTONOMY_RECENTLY_DENIED: "We have been denied increased [concept_autonomy] within the last #v 5 years#!"
 KNOWLEDGE_SHARING_ON_COOLDOWN: "We have not requested knowledge sharing within the last #v 5 years#! (can be used again on [SCOPE.sCountry('target_country').GetLastCatalystExpiryDate(GetPlayer,'catalyst_knowledge_sharing_requested')|v])"

 decrease_payments: "Reduce Subject Payments"
 decrease_payments_desc: "Reduces the payment burden on a [concept_subject] towards its [concept_overlord]."
 decrease_payments_action_notification_name: "[INITIATOR_COUNTRY.GetName] reducing our payments"
 decrease_payments_action_notification_desc: "[INITIATOR_COUNTRY.GetName] has permitted a #positive_value -90%#! decrease to our regular payments. Our [concept_liberty_desire] has reduced as a result."
 decrease_payments_action_propose_name: "$decrease_payments$"
 decrease_payments_action_break_name: "Restore Subject Payments"
 decrease_payments_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] has permitted a reduction in regular payments from [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 decrease_payments_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] restored payments"
 decrease_payments_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] has restored our payments to their regular level."

 decrease_payments_trigger_desc_global: "Has decreased subject payments"
 decrease_payments_trigger_false_desc_global: "Has #b not#! decreased subject payments"
 decrease_payments_trigger_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has permitted a decrease in payments from their subject [TARGET_COUNTRY.GetName]"
 decrease_payments_trigger_false_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has #b not#! permitted a decrease in payments from their subject [TARGET_COUNTRY.GetName]"
 decrease_payments_trigger_desc_third: "[COUNTRY.GetName] has permitted a decrease in payments from their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 decrease_payments_trigger_false_desc_third: "[COUNTRY.GetName] has #b not#! permitted a decrease in payments from their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 grant_own_market: "Grant Own Market"
 grant_own_market_desc: "Grants a [concept_subject] control of its own [concept_market]."
 grant_own_market_action_notification_name: "[INITIATOR_COUNTRY.GetName] grants market control"
 grant_own_market_action_notification_desc: "[INITIATOR_COUNTRY.GetName] has permitted us to operate our own [concept_market], and we are no longer connected to theirs. Our [concept_liberty_desire] has reduced as a result."
 grant_own_market_action_propose_name: "$grant_own_market$"
 grant_own_market_action_break_name: "Revoke Market Control"
 grant_own_market_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] has permitted [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] to control their own [concept_market]."
 grant_own_market_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] revoked market control"
 grant_own_market_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] has revoked our permission to control our own [concept_market], and we are now connect to theirs."
 grant_own_market_increase_liberty_desire_effect: "Increased [concept_liberty_desire] due to high [concept_economic_dependence] on [concept_overlord]"
 grant_own_market_decrease_liberty_desire_effect: "Decreased [concept_liberty_desire] due to low [concept_economic_dependence] on [concept_overlord]"

 grant_own_market_trigger_desc_global: "Has granted subject their own market"
 grant_own_market_trigger_false_desc_global: "Has #b not#! granted subject their own market"
 grant_own_market_trigger_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has granted their subject [TARGET_COUNTRY.GetName] their own market"
 grant_own_market_trigger_false_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has #b not#! granted their subject [TARGET_COUNTRY.GetName] their own market"
 grant_own_market_trigger_desc_third: "[COUNTRY.GetName] has granted their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] their own market"
 grant_own_market_trigger_false_desc_third: "[COUNTRY.GetName] has #b not#! granted their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] their own market"

 exempt_from_service: "Exempt from Service"
 exempt_from_service_desc: "Permits a [concept_subject] to freely decide if they wish to join their [concept_overlord] in [Concept('concept_diplomatic_play','$concept_diplomatic_plays$')]."
 exempt_from_service_action_notification_name: "[INITIATOR_COUNTRY.GetName] military exemption"
 exempt_from_service_action_notification_desc: "We are no longer forced to join wars initiated by [INITIATOR_COUNTRY.GetName]. Our [concept_liberty_desire] has reduced as a result."
 exempt_from_service_action_propose_name: "$exempt_from_service$"
 exempt_from_service_action_break_name: "Remove Service Exemptions"
 exempt_from_service_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] has permitted an exemption to military service, and [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is no longer obliged to join their wars."
 exempt_from_service_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] removed military exemptions"
 exempt_from_service_action_notification_break_desc: "We are once again demanded to join wars initiated by [INITIATOR_COUNTRY.GetName]. Our [concept_liberty_desire] has increased as a result."

 exempt_from_service_trigger_desc_global: "Has exempted their subject from military service"
 exempt_from_service_trigger_false_desc_global: "Has #b not#! exempted their subject from military service"
 exempt_from_service_trigger_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has exempted their subject [TARGET_COUNTRY.GetName] from military service"
 exempt_from_service_trigger_false_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has #b not#! exempted their subject [TARGET_COUNTRY.GetName] from military service"
 exempt_from_service_trigger_desc_third: "[COUNTRY.GetName] has exempted their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] from military service"
 exempt_from_service_trigger_false_desc_third: "[COUNTRY.GetName] has #b not#! exempted their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] from military service"

 enforce_military_access: "Enforce Military Access"
 enforce_military_access_desc: "Makes a [concept_subject] join all [Concept('concept_war','$concept_wars$')] their [concept_overlord] is taking part."
 enforce_military_access_action_notification_name: "[INITIATOR_COUNTRY.GetName] is enforcing military access"
 enforce_military_access_action_notification_desc: "We are forced to join all current [Concept('concept_war','$concept_wars$')] initiated by [INITIATOR_COUNTRY.GetName]."
 enforce_military_access_action_notification_third_party_name: "Enforcing military access in [TARGET_COUNTRY.GetName]"
 enforce_military_access_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] is enforcing its military access in [TARGET_COUNTRY.GetName]."

 da_evangelize: "Evangelize"
 da_evangelize_desc: "Spreads your [concept_religion] in a [concept_subject]."
 da_evangelize_action_notification_name: "Evangelizing in [TARGET_COUNTRY.GetName]"
 da_evangelize_action_notification_desc: "[INITIATOR_COUNTRY.GetName] is spreading its faith in [TARGET_COUNTRY.GetName]."
 da_evangelize_action_notification_third_party_name: "Evangelizing in [TARGET_COUNTRY.GetName]"
 da_evangelize_action_notification_third_party_desc:  "[INITIATOR_COUNTRY.GetName] is spreading its faith in [TARGET_COUNTRY.GetName]."
 da_evangelize_action_propose_name: "Evangelize"
 da_evangelize_action_break_name: "Stop Evangelizing"
 da_evangelize_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] is using its power as an overlord to spread its own [concept_religion] in [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 da_evangelize_action_notification_break_name: "[INITIATOR_COUNTRY.GetAdjective] evangelizing stops."
 da_evangelize_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] has stopped evangelizing."
 da_evangelize_action_notification_third_party_break_name: "[INITIATOR_COUNTRY.GetAdjective] evangelizing stops in [TARGET_COUNTRY.GetName]."
 da_evangelize_action_notification_third_party_break_desc: "[INITIATOR_COUNTRY.GetName] has stopped evangelizing in [TARGET_COUNTRY.GetName]."

 da_evangelize_action_trigger_desc_global: "Is evangelizing in their subject"
 da_evangelize_action_trigger_false_desc_global: "Is #b not#! evangelizing in their subject"
 da_evangelize_action_trigger_desc_first: "[COUNTRY.GetAdjectiveNoFlag] is evangelizing in their subject [TARGET_COUNTRY.GetName]"
 da_evangelize_action_trigger_false_desc_first: "[COUNTRY.GetAdjectiveNoFlag] is #b not#! evangelizing in their subject [TARGET_COUNTRY.GetName]"
 da_evangelize_action_trigger_desc_third: "[COUNTRY.GetName] is evangelizing in their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 da_evangelize_action_trigger_false_desc_third: "[COUNTRY.GetName] is #b not#! evangelizing in their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 da_evangelize_liberty_desire_decrease_custom_tooltip: "[SCOPE.sCountry('target_country').GetAdjectiveNoFormatting] officials would welcome [SCOPE.GetRootScope.GetCountry.GetName] spreading [ROOT.GetCountry.GetStateReligion.GetName] faith and values in [SCOPE.sCountry('target_country').GetName]. This [concept_subject]'s [concept_liberty_desire] will decrease."
 da_evangelize_liberty_desire_increase_custom_tooltip: "[SCOPE.sCountry('target_country').GetAdjectiveNoFormatting] officials would not welcome [SCOPE.GetRootScope.GetCountry.GetName] spreading [ROOT.GetCountry.GetStateReligion.GetName] faith and values in [SCOPE.sCountry('target_country').GetName]. This [concept_subject]'s [concept_liberty_desire] will increase."

 da_appoint_colonial_governor: "Appoint Governor"
 da_appoint_colonial_governor_desc: "Changes the [concept_ruler] of a [concept_subject]. [concept_liberty_desire] may change depending on the candidate chosen."
 da_appoint_colonial_governor_action_name: "Appoint Governor"
 da_appoint_colonial_governor_action_notification_name: "[TARGET_COUNTRY.GetName] changes governors"
 da_appoint_colonial_governor_action_notification_desc: "[INITIATOR_COUNTRY.GetName] has replaced the [TARGET_COUNTRY.GetRuler.GetPrimaryRoleTitle] of [TARGET_COUNTRY.GetName] with a new appointee."
 da_appoint_colonial_governor_action_notification_third_party_name: "[TARGET_COUNTRY.GetName] changes governors"
 da_appoint_colonial_governor_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] has replaced the [TARGET_COUNTRY.GetRuler.GetPrimaryRoleTitle] of [TARGET_COUNTRY.GetName] with a new appointee."

 da_knowledge_sharing: "Knowledge Sharing"
 da_knowledge_sharing_desc: "Helps spread technological discoveries between [Concept('concept_country','$concept_countries$')]."
 da_knowledge_sharing_action_notification_name: "Technologies spreading in [TARGET_COUNTRY.GetName]"
 da_knowledge_sharing_action_notification_desc: "[INITIATOR_COUNTRY.GetName] is helping technology spread in [TARGET_COUNTRY.GetName]"
 da_knowledge_sharing_action_notification_third_party_name: "Technologies spreading in [TARGET_COUNTRY.GetName]"
 da_knowledge_sharing_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] is helping technology spread in [TARGET_COUNTRY.GetName]"
 da_knowledge_sharing_action_propose_name: "Offer Knowledge Sharing"
 da_knowledge_sharing_action_break_name: "Stop Sharing Knowledge"
 da_knowledge_sharing_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] is actively promoting the spread of technology in [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 da_knowledge_sharing_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] stopped sharing knowledge"
 da_knowledge_sharing_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] has stopped promoting the spread of technologies in our country."
 da_knowledge_sharing_action_notification_third_party_break_name: "[INITIATOR_COUNTRY.GetName]-[TARGET_COUNTRY.GetName] knowledge sharing ended"
 da_knowledge_sharing_action_notification_third_party_break_desc: "[INITIATOR_COUNTRY.GetName] has stopped promoting the spread of technology in [TARGET_COUNTRY.GetName]."

 da_knowledge_sharing_trigger_desc_global: "Has a Knowledge Sharing pact with their subject"
 da_knowledge_sharing_trigger_false_desc_global: "Does #b not#! have a Knowledge Sharing pact with their subject"
 da_knowledge_sharing_trigger_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has a Knowledge Sharing pact with their subject [TARGET_COUNTRY.GetName]"
 da_knowledge_sharing_trigger_false_desc_first: "[COUNTRY.GetAdjectiveNoFlag] does #b not#! have a Knowledge Sharing pact with their subject [TARGET_COUNTRY.GetName]"
 da_knowledge_sharing_trigger_desc_third: "[COUNTRY.GetName] has a Knowledge Sharing pact with their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 da_knowledge_sharing_trigger_false_desc_third: "[COUNTRY.GetName] does #b not#! have a Knowledge Sharing pact with their subject [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 da_request_knowledge_sharing: "Request Knowledge Sharing"
 da_request_knowledge_sharing_desc: "$da_knowledge_sharing_desc$"
 da_request_knowledge_sharing_action_name: "$da_request_knowledge_sharing$"
 da_request_knowledge_sharing_proposal_accepted_name: "Knowledge Sharing Accepted"
 da_request_knowledge_sharing_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our request for knowledge sharing. Our [concept_technology_spread] has increased."
 da_request_knowledge_sharing_proposal_declined_name: "Knowledge Sharing Denied"
 da_request_knowledge_sharing_proposal_declined_desc: "[TARGET_COUNTRY.GetName] refused our request for knowledge sharing."
 da_request_knowledge_sharing_proposal_notification_name: "Request for Knowledge Sharing"
 da_request_knowledge_sharing_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] is requesting that we share details of our [concept_technology] with them."
 da_request_knowledge_sharing_proposal_third_party_accepted_name: "Knowledge Sharing granted to [INITIATOR_COUNTRY.GetNameNoFormatting]"
 da_request_knowledge_sharing_proposal_third_party_accepted_desc: "[INITIATOR_COUNTRY.GetName] was granted knowledge of the [concept_technology] known by [TARGET_COUNTRY.GetName]."
 da_request_knowledge_sharing_proposal_third_party_declined_name: "Knowledge Sharing denied to [INITIATOR_COUNTRY.GetNameNoFormatting]"
 da_request_knowledge_sharing_proposal_third_party_declined_desc: "[INITIATOR_COUNTRY.GetName] was denied knowledge of the [concept_technology] known by [TARGET_COUNTRY.GetName]."

 request_market_control: "Request Market Control"
 request_market_control_desc: "Petitions the [concept_overlord] to permit their [concept_subject] control of its own [concept_market]."
 request_market_control_action_name: "$request_market_control$"
 request_market_control_action_propose_name: "$request_market_control$"
 request_market_control_action_notification_break_name: "Market Control Surrendered"
 request_market_control_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] have returned control of their [concept_market] to us."
 request_market_control_action_break_name: "Surrender Market Control"
 request_market_control_pact_desc: "[SCOPE.sCountry('country').GetName] establishes its own market, separate and independent of [SCOPE.sCountry('target_country').GetName]'s market."
 request_market_control_proposal_notification_name: "Request for Market Control"
 request_market_control_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] is requesting that we permit them control of their own [concept_market]."
 request_market_control_proposal_accepted_name: "Market Control Accepted"
 request_market_control_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our request for market control. We will be able to manage our own national [concept_market]."
 request_market_control_proposal_declined_name: "Market Control Denied"
 request_market_control_proposal_declined_desc: "[TARGET_COUNTRY.GetName] refused our request for market control. Our [concept_liberty_desire] has increased as a result."
 request_market_control_proposal_third_party_accepted_name: "[INITIATOR_COUNTRY.GetAdjectiveNoFormatting] Market Control Granted"
 request_market_control_proposal_third_party_accepted_desc: "[INITIATOR_COUNTRY.GetName] was granted control of their own [concept_market] by their [concept_overlord] [TARGET_COUNTRY.GetName]."
 request_market_control_proposal_third_party_declined_name: "[INITIATOR_COUNTRY.GetAdjectiveNoFormatting] Market Control Denied"
 request_market_control_proposal_third_party_declined_desc: "[INITIATOR_COUNTRY.GetName] was denied control of their own [concept_market] by their [concept_overlord] [TARGET_COUNTRY.GetName]."

 request_market_control_trigger_desc_global: "Has requested their own market from overlord"
 request_market_control_trigger_false_desc_global: "Has #b not#! requested their own market from overlord"
 request_market_control_trigger_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has requested their own market from their overlord [TARGET_COUNTRY.GetName]"
 request_market_control_trigger_false_desc_first: "[COUNTRY.GetAdjectiveNoFlag] has #b not#! requested their their own market from their overlord [TARGET_COUNTRY.GetName]"
 request_market_control_trigger_desc_third: "[COUNTRY.GetName] has requested their own market from their overlord [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 request_market_control_trigger_false_desc_third: "[COUNTRY.GetName] has #b not#! requested their own market from their overlord [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] "

 da_support_regime: "Support Regime"
 da_support_regime_desc: "Boosts the [concept_legitimacy] of a [concept_subject] while decreasing their [concept_liberty_desire]."
 da_support_regime_action_notification_name: "[INITIATOR_COUNTRY.GetName] supports the regime of [TARGET_COUNTRY.GetName]"
 da_support_regime_action_notification_desc: "[INITIATOR_COUNTRY.GetName] is boosting the legitimacy of its subject, [TARGET_COUNTRY.GetName]."
 da_support_regime_action_notification_third_party_name: "[INITIATOR_COUNTRY.GetName] supported their [Concept('concept_subject','$concept_subject_possessive$')] government"
 da_support_regime_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] is boosting the government [concept_legitimacy] of their [concept_subject] [TARGET_COUNTRY.GetName]."
 da_support_regime_action_propose_name: "Support Regime"
 da_support_regime_action_break_name: "Stop Regime Support"
 da_support_regime_pact_desc: "[SCOPE.sCountry('country').GetName] supports [SCOPE.sCountry('target_country').GetName]'s government."
 da_support_regime_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] is no longer boosting our government's [concept_legitimacy]."
 da_support_regime_action_notification_break_desc: "[TARGET_COUNTRY.GetName]'s government is no longer supported by us."
 da_support_regime_action_notification_third_party_break_name: "Regime support ends"
 da_support_regime_action_notification_third_party_break_desc: "[INITIATOR_COUNTRY.GetName] ended their support of [TARGET_COUNTRY.GetName]'s government."

 da_request_support_regime: "Request Support Regime"
 da_request_support_regime_action_name: "$da_request_support_regime$"
 da_request_support_regime_desc: "Boosts the [concept_legitimacy] of a [concept_subject] while decreasing their [concept_liberty_desire]."
 da_request_support_regime_action_notification_name: "[TARGET_COUNTRY.GetName] supports the regime of [INITIATOR_COUNTRY.GetName]"
 da_request_support_regime_action_notification_desc: "[TARGET_COUNTRY.GetName] is boosting the legitimacy of its subject, [INITIATOR_COUNTRY.GetName]."
 da_request_support_regime_action_notification_third_party_name: "[TARGET_COUNTRY.GetName] supported their [Concept('concept_subject','$concept_subject_possessive$')] government"
 da_request_support_regime_action_notification_third_party_desc: "[TARGET_COUNTRY.GetName] is boosting the government [concept_legitimacy] of their [concept_subject] [INITIATOR_COUNTRY.GetName]."
 da_request_support_regime_action_propose_name: "Support Regime"
 da_request_support_regime_action_break_name: "Stop Supporting Regime"
 da_request_support_regime_proposal_notification_name: "Request for Support Regime"
 da_request_support_regime_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] is requesting that we support their regime."
 da_request_support_regime_proposal_accepted_name: "Support Regime Accepted"
 da_request_support_regime_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our request to support our regime. Our [concept_legitimacy] has improved.."
 da_request_support_regime_proposal_declined_name: "Support Regime Denied"
 da_request_support_regime_proposal_declined_desc: "[TARGET_COUNTRY.GetName] refused our request to support our regime. Our [concept_liberty_desire] has increased as a result."
 da_request_support_regime_proposal_third_party_accepted_name: "[INITIATOR_COUNTRY.GetAdjectiveNoFormatting] Support Regime Granted"
 da_request_support_regime_proposal_third_party_accepted_desc: "[INITIATOR_COUNTRY.GetName] was granted support for their regime by their [concept_overlord] [TARGET_COUNTRY.GetName]."
 da_request_support_regime_proposal_third_party_declined_name: "[INITIATOR_COUNTRY.GetAdjectiveNoFormatting] Support Regime Denied"
 da_request_support_regime_proposal_third_party_declined_desc: "[INITIATOR_COUNTRY.GetName] was denied support for their regime by their [concept_overlord] [TARGET_COUNTRY.GetName]."

 protectorate:0 "Protectorate"
 protectorate_action_name:0 "[concept_protectorate]"
 protectorate_action_propose_name:0 "Make into [concept_protectorate]"
 protectorate_action_break_name:0 "Grant Independence"
 protectorate_action_ask_to_break_name:0 "Demand Independence"
 protectorate_desc: "Establishes a [concept_protectorate] type [concept_subject] relationship between two [Concept('concept_country', '$concept_countries$')]."
 protectorate_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is a [concept_protectorate] of [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 protectorate_action_notification_name: "$protectorate_proposal_notification_name$"
 protectorate_action_notification_desc: "$protectorate_proposal_notification_desc$"
 protectorate_proposal_notification_name:0 "Subjugation Demand"
 protectorate_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become their [concept_protectorate]."
 protectorate_proposal_notification_effects_desc:0 "If we accept, we will become their subject."
 protectorate_proposal_accepted_name:0 "Subjugation Accepted"
 protectorate_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand for them to become our [concept_protectorate]."
 protectorate_proposal_declined_name:0 "Subjugation Refused"
 protectorate_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined the demand for them to become our [concept_protectorate]."
 protectorate_action_notification_break_name:0 "Independence Granted"
 protectorate_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have ended our [concept_protectorate] status. We are independent once again."
 protectorate_proposal_notification_break_name:0 "Demand for Independence"
 protectorate_proposal_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] are demanding that we end their [concept_protectorate] status."
 protectorate_proposal_notification_break_effects_desc:0 "If we accept, they will become fully independent."
 protectorate_proposal_break_accepted_name:0 "Independence Granted"
 protectorate_proposal_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand to end our [concept_protectorate] status. We are independent once again."
 protectorate_proposal_break_declined_name:0 "Independence Refused"
 protectorate_proposal_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused the demand to end our [concept_protectorate] status."
 protectorate_proposal_third_party_accepted_name:0 "Country Subjugated"
 protectorate_proposal_third_party_accepted_desc:0 "[TARGET_COUNTRY.GetName] agreed to become the [concept_protectorate] of [INITIATOR_COUNTRY.GetName]."
 protectorate_proposal_third_party_declined_name:0 "Subjugation Refused"
 protectorate_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to become the [concept_protectorate] of [INITIATOR_COUNTRY.GetName]."
 protectorate_action_third_party_notification_break_name:0 "Independence Granted"
 protectorate_action_third_party_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] ended the [concept_protectorate] status of [TARGET_COUNTRY.GetName], granting them full independence."
 protectorate_proposal_third_party_break_accepted_name:0 "Independence Granted"
 protectorate_proposal_third_party_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] ended the [concept_protectorate] status of [INITIATOR_COUNTRY.GetName], granting them full independence."
 protectorate_proposal_third_party_break_declined_name:0 "Independence Refused"
 protectorate_proposal_third_party_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to end the [concept_protectorate] status of [INITIATOR_COUNTRY.GetName]."

 protectorate_effect_desc_global:0 "Becomes a [concept_protectorate]"
 protectorate_effect_desc_first:0 "[TARGET_COUNTRY.GetName] becomes a [COUNTRY.GetAdjectiveNoFlag] [concept_protectorate]"
 protectorate_effect_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] becomes a [concept_protectorate] of [COUNTRY.GetName]"

 protectorate_trigger_desc_global:0 "Is a [concept_protectorate]"
 protectorate_trigger_false_desc_global:0 "Is #b not#! a [concept_protectorate]"
 protectorate_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is a [COUNTRY.GetAdjectiveNoFlag] [concept_protectorate]"
 protectorate_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! a [COUNTRY.GetAdjectiveNoFlag] [concept_protectorate]"
 protectorate_trigger_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is a [concept_protectorate] of [COUNTRY.GetName]"
 protectorate_trigger_false_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is #b not#! a [concept_protectorate] of [COUNTRY.GetName]"

 become_protectorate:0 "Ask to Become Protectorate"
 become_protectorate_action_name:0 "Ask to Become [concept_protectorate]"
 become_protectorate_action_propose_name:0 "Ask to Become [concept_protectorate]"
 become_protectorate_desc: "Establishes a [concept_protectorate] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')], with the proposing country becoming the [concept_subject]."
 become_protectorate_proposal_notification_name:0 "Request to Become [concept_protectorate]"
 become_protectorate_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] wishes to submit to us and become our [concept_protectorate]."
 become_protectorate_proposal_notification_effects_desc:0 "If we accept, they will become our subject."
 become_protectorate_proposal_accepted_name:0 "[concept_protectorate] Request Accepted"
 become_protectorate_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted our offer to become their [concept_protectorate]."
 become_protectorate_proposal_declined_name:0 "[concept_protectorate] Request Declined"
 become_protectorate_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our offer to become their [concept_protectorate]."
 become_protectorate_proposal_third_party_accepted_name:0 "Country Subjugated"
 become_protectorate_proposal_third_party_accepted_desc:0 "[TARGET_COUNTRY.GetName] agreed to become the $suzerain$ of [INITIATOR_COUNTRY.GetName], who is now their [concept_protectorate]."
 become_protectorate_proposal_third_party_declined_name:0 "Subjugation Refused"
 become_protectorate_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to become the $suzerain$ of [INITIATOR_COUNTRY.GetName]."

 puppet:0 "Puppet"
 puppet_action_name:0 "[concept_puppet]"
 puppet_action_propose_name:0 "Make into [concept_puppet]"
 puppet_action_break_name:0 "Grant Independence"
 puppet_action_ask_to_break_name:0 "Demand Independence"
 puppet_desc: "Establishes a [concept_puppet] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')]."
 puppet_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is a [concept_puppet] of [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 puppet_action_notification_name:0 "Demand to become [concept_puppet]"
 puppet_action_notification_desc:0 "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become a [concept_puppet]."
 puppet_action_notification_break_name:0 "Independence Granted"
 puppet_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have ended our [concept_puppet] status. We are independent once again."
 puppet_proposal_notification_break_name:0 "[INITIATOR_COUNTRY.GetName] demands Independence"
 puppet_proposal_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] are demanding that we end our [concept_puppet] status with them."
 puppet_proposal_notification_break_effects_desc:0 "If we accept, they will become fully independent."
 puppet_proposal_break_accepted_name:0 "Independence Granted"
 puppet_proposal_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand to end our [concept_puppet] status. We are independent once again."
 puppet_proposal_break_declined_name:0 "Independence Refused"
 puppet_proposal_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused the demand to end our [concept_puppet] status."
 puppet_proposal_third_party_break_accepted_name:0 "Independence Granted"
 puppet_proposal_third_party_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] ended their [concept_puppet] status with [INITIATOR_COUNTRY.GetName], granting them full independence."
 puppet_proposal_third_party_break_declined_name:0 "Independence Refused"
 puppet_proposal_third_party_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to end their [concept_puppet] status with [INITIATOR_COUNTRY.GetName]."

 puppet_effect_desc_global:0 "Becomes a [concept_puppet]"
 puppet_effect_desc_first:0 "[TARGET_COUNTRY.GetName] becomes a [COUNTRY.GetAdjectiveNoFlag] [concept_puppet]"
 puppet_effect_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] becomes a [concept_puppet] of [COUNTRY.GetName]"

 personal_union_effect_desc_global: "Becomes a [concept_personal_union]"
 personal_union_effect_desc_first: "[TARGET_COUNTRY.GetName] becomes the lesser partner in a [COUNTRY.GetAdjectiveNoFlag] [concept_personal_union]"
 personal_union_effect_desc_third: "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] becomes the lesser partner of [COUNTRY.GetName] in a [concept_personal_union]"

 puppet_trigger_desc_global:0 "Is a [concept_puppet]"
 puppet_trigger_false_desc_global:0 "Is #b not#! a [concept_puppet]"
 puppet_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is a [COUNTRY.GetAdjectiveNoFlag] [concept_puppet]"
 puppet_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! a [COUNTRY.GetAdjectiveNoFlag] [concept_puppet]"
 puppet_trigger_desc_third:1 "[COUNTRY.GetNameNoFlag] is a [concept_puppet] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetName)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 puppet_trigger_false_desc_third:1 "[COUNTRY.GetNameNoFlag] is #b not#! a [concept_puppet] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetName)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 tributary:0 "Tributary"
 tributary_action_name:0 "[concept_tributary]"
 tributary_action_propose_name:0 "Make into [concept_tributary]"
 tributary_action_break_name:0 "Grant Independence"
 tributary_action_ask_to_break_name:0 "Demand Independence"
 tributary_desc: "Establishes a [concept_tributary] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')]."
 tributary_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is a [concept_tributary] of [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 tributary_action_notification_name: "$tributary_proposal_notification_name$"
 tributary_action_notification_desc: "$tributary_proposal_notification_desc$"
 tributary_proposal_notification_name:0 "Subjugation Demand"
 tributary_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become their [concept_tributary]."
 tributary_proposal_notification_effects_desc:0 "If we accept, we will become their subject."
 tributary_proposal_accepted_name:0 "Subjugation Accepted"
 tributary_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand for them to become our [concept_tributary]."
 tributary_proposal_declined_name:0 "Subjugation Refused"
 tributary_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined the demand for them to become our [concept_tributary]."
 tributary_action_notification_break_name:0 "Independence Granted"
 tributary_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have ended our [concept_tributary] status. We are independent once again."
 tributary_proposal_notification_break_name:0 "Demand for Independence"
 tributary_proposal_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] are demanding that we end their [concept_tributary] status."
 tributary_proposal_notification_break_effects_desc:0 "If we accept, they will become fully independent."
 tributary_proposal_break_accepted_name:0 "Independence Granted"
 tributary_proposal_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand to end our [concept_tributary] status. We are independent once again."
 tributary_proposal_break_declined_name:0 "Independence Refused"
 tributary_proposal_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused the demand to end our [concept_tributary] status."
 tributary_proposal_third_party_accepted_name:0 "Country Subjugated"
 tributary_proposal_third_party_accepted_desc:0 "[TARGET_COUNTRY.GetName] agreed to become the [concept_tributary] of [INITIATOR_COUNTRY.GetName]."
 tributary_proposal_third_party_declined_name:0 "Subjugation Refused"
 tributary_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to become the [concept_tributary] of [INITIATOR_COUNTRY.GetName]."
 tributary_action_third_party_notification_break_name:0 "Independence Granted"
 tributary_action_third_party_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] ended the [concept_tributary] status of [TARGET_COUNTRY.GetName], granting them full independence."
 tributary_proposal_third_party_break_accepted_name:0 "Independence Granted"
 tributary_proposal_third_party_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] ended the [concept_tributary] status of [INITIATOR_COUNTRY.GetName], granting them full independence."
 tributary_proposal_third_party_break_declined_name:0 "Independence Refused"
 tributary_proposal_third_party_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to end the [concept_tributary] status of [INITIATOR_COUNTRY.GetName]."

 tributary_effect_desc_global:0 "Becomes a [concept_tributary]"
 tributary_effect_desc_first:0 "[TARGET_COUNTRY.GetName] becomes a [COUNTRY.GetAdjectiveNoFlag] [concept_tributary]"
 tributary_effect_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] becomes a [concept_tributary] of [COUNTRY.GetName]"

 tributary_trigger_desc_global:0 "Is a [concept_tributary]"
 tributary_trigger_false_desc_global:0 "Is #b not#! a [concept_tributary]"
 tributary_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is a [COUNTRY.GetAdjectiveNoFlag] [concept_tributary]"
 tributary_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! a [COUNTRY.GetAdjectiveNoFlag] [concept_tributary]"
 tributary_trigger_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is a [concept_tributary] of [COUNTRY.GetName]"
 tributary_trigger_false_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] is #b not#! a [concept_tributary] of [COUNTRY.GetName]"

 become_tributary:0 "Ask to Become Tributary"
 become_tributary_action_name:0 "Ask to Become [concept_tributary]"
 become_tributary_action_propose_name:0 "Ask to Become [concept_tributary]"
 become_tributary_desc: "Establishes a [concept_tributary] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')], with the proposing country becoming the [concept_subject]."
 become_tributary_proposal_notification_name:0 "Request to Become [concept_tributary]"
 become_tributary_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] wishes to submit to us and become our [concept_tributary]."
 become_tributary_proposal_notification_effects_desc:0 "If we accept, they will become our subject."
 become_tributary_proposal_accepted_name:0 "[concept_tributary] Request Accepted"
 become_tributary_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted our offer to become their [concept_tributary]."
 become_tributary_proposal_declined_name:0 "[concept_tributary] Request Declined"
 become_tributary_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our offer to become their [concept_tributary]."
 become_tributary_proposal_third_party_accepted_name:0 "Country Subjugated"
 become_tributary_proposal_third_party_accepted_desc:0 "[TARGET_COUNTRY.GetName] agreed to become the $suzerain$ of [INITIATOR_COUNTRY.GetName], who is now their [concept_tributary]."
 become_tributary_proposal_third_party_declined_name:0 "Subjugation Refused"
 become_tributary_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to become the $suzerain$ of [INITIATOR_COUNTRY.GetName]."

 vassal:0 "Vassal"
 vassal_action_name:0 "[concept_vassal]"
 vassal_action_propose_name:0 "Make into [concept_vassal]"
 vassal_action_break_name:0 "Grant Independence"
 vassal_action_ask_to_break_name:0 "Demand Independence"
 vassal_desc: "Establishes a [concept_vassal] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')]."
 vassal_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is a [concept_vassal] of [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 vassal_action_notification_name:0 "Demand to become [concept_vassal]"
 vassal_action_notification_desc:0 "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become a [concept_vassal]."
 vassal_action_notification_break_name:0 "Independence Granted"
 vassal_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have ended our [concept_vassal] status. We are independent once again."
 vassal_proposal_notification_break_name:0 "Demand for Independence"
 vassal_proposal_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] are demanding that we end our [concept_vassal] status with them."
 vassal_proposal_notification_break_effects_desc:0 "If we accept, they will become fully independent."
 vassal_proposal_break_accepted_name:0 "Independence Granted"
 vassal_proposal_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand to end our [concept_vassal] status. We are independent once again."
 vassal_proposal_break_declined_name:0 "Independence Refused"
 vassal_proposal_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused the demand to end our [concept_vassal] status."
 vassal_proposal_third_party_break_accepted_name:0 "Independence Granted"
 vassal_proposal_third_party_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] ended their [concept_vassal] status with [INITIATOR_COUNTRY.GetName], granting them full independence."
 vassal_proposal_third_party_break_declined_name:0 "Independence Refused"
 vassal_proposal_third_party_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to end their [concept_vassal] status with [INITIATOR_COUNTRY.GetName]."

 vassal_effect_desc_global: "Becomes a [concept_vassal]"
 vassal_effect_desc_first: "[TARGET_COUNTRY.GetName] becomes a [COUNTRY.GetAdjectiveNoFlag] [concept_vassal]"
 vassal_effect_desc_third: "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] becomes a [concept_vassal] of [COUNTRY.GetName]"

 personal_union:0 "Personal Union"
 personal_union_action_name:0 "[concept_personal_union]"
 personal_union_action_propose_name:0 "Make into [concept_personal_union]"
 personal_union_action_break_name:0 "Grant Independence"
 personal_union_action_ask_to_break_name:0 "Demand Independence"
 personal_union_desc: "Establishes a [concept_personal_union] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')]."
 personal_union_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is in a [concept_personal_union] under [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 personal_union_action_notification_name:0 "Demand for Union"
 personal_union_action_notification_desc:0 "[INITIATOR_COUNTRY.GetName] demands that we submit to them and form a [concept_personal_union]."
 personal_union_action_notification_break_name:0 "Independence Granted"
 personal_union_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have ended our [concept_personal_union]. We are independent once again."
 personal_union_proposal_notification_break_name:0 "Demand for Independence"
 personal_union_proposal_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] are demanding that we end our [concept_personal_union] with them."
 personal_union_proposal_notification_break_effects_desc:0 "If we accept, they will become fully independent."
 personal_union_proposal_break_accepted_name:0 "Independence Granted"
 personal_union_proposal_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand to end our [concept_personal_union]. We are independent once again."
 personal_union_proposal_break_declined_name:0 "Independence Refused"
 personal_union_proposal_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused the demand to end our [concept_personal_union]."
 personal_union_proposal_third_party_break_accepted_name:0 "Independence Granted"
 personal_union_proposal_third_party_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] ended their [concept_personal_union] with [INITIATOR_COUNTRY.GetName], granting them full independence."
 personal_union_proposal_third_party_break_declined_name:0 "Independence Refused"
 personal_union_proposal_third_party_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to end their [concept_personal_union] with [INITIATOR_COUNTRY.GetName]."

 dominion:0 "Dominion"
 dominion_action_name:0 "[concept_dominion]"
 dominion_action_propose_name:0 "Make into [concept_dominion]"
 dominion_action_break_name:0 "Grant Independence"
 dominion_action_ask_to_break_name:0 "Demand Independence"
 dominion_desc: "Establishes a [concept_dominion] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')]."
 dominion_pact_desc:0 "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is a [concept_dominion] of [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 dominion_action_notification_name:0 "Demand for [concept_dominion]"
 dominion_action_notification_desc:0 "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become their [concept_dominion]."
 dominion_action_notification_break_name:0 "Independence Granted"
 dominion_action_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] have ended our [concept_dominion] status. We are independent once again."
 dominion_proposal_notification_break_name:0 "Demand for Independence"
 dominion_proposal_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] are demanding that we end their [concept_dominion] status."
 dominion_proposal_notification_break_effects_desc:0 "If we accept, they will become fully independent."
 dominion_proposal_break_accepted_name:0 "Independence Granted"
 dominion_proposal_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand to end our [concept_dominion] status. We are independent once again."
 dominion_proposal_break_declined_name:0 "Independence Refused"
 dominion_proposal_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused the demand to end our [concept_dominion] status."
 dominion_action_third_party_notification_break_name:0 "Independence Granted"
 dominion_action_third_party_notification_break_desc:0 "[INITIATOR_COUNTRY.GetName] ended the [concept_dominion] status of [TARGET_COUNTRY.GetName], granting them full independence."
 dominion_proposal_third_party_break_accepted_name:0 "Independence Granted"
 dominion_proposal_third_party_break_accepted_desc:0 "[TARGET_COUNTRY.GetName] ended the [concept_dominion] status of [INITIATOR_COUNTRY.GetName], granting them full independence."
 dominion_proposal_third_party_break_declined_name:0 "Independence Refused"
 dominion_proposal_third_party_break_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to end the [concept_dominion] status of [INITIATOR_COUNTRY.GetName]."
 dominion_proposal_notification_name:0 "Subjugation Demand"
 dominion_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become their [concept_dominion]."
 dominion_proposal_notification_effects_desc:0 "If we accept, we will become their subject."
 dominion_proposal_accepted_name:0 "Subjugation Accepted"
 dominion_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted the demand for them to become our [concept_dominion]."
 dominion_proposal_declined_name:0 "Subjugation Refused"
 dominion_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined the demand for them to become our [concept_dominion]."
 dominion_proposal_third_party_accepted_name:0 "Country Subjugated"
 dominion_proposal_third_party_accepted_desc:0 "[TARGET_COUNTRY.GetName] agreed to become the [concept_dominion] of [INITIATOR_COUNTRY.GetName]."
 dominion_proposal_third_party_declined_name:0 "Subjugation Refused"
 dominion_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to become the [concept_dominion] of [INITIATOR_COUNTRY.GetName]."

 dominion_effect_desc_global:0 "Becomes a [concept_dominion]"
 dominion_effect_desc_first:0 "[TARGET_COUNTRY.GetName] becomes a [COUNTRY.GetAdjectiveNoFlag] [concept_dominion]"
 dominion_effect_desc_third:0 "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] becomes a [concept_dominion] of [COUNTRY.GetName]"

 dominion_trigger_desc_global:0 "Is a [concept_dominion]"
 dominion_trigger_false_desc_global:0 "Is #b not#! a [concept_dominion]"
 dominion_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is a [COUNTRY.GetAdjectiveNoFlag] [concept_dominion]"
 dominion_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! a [COUNTRY.GetAdjectiveNoFlag] [concept_dominion]"
 dominion_trigger_desc_third:1 "[COUNTRY.GetName] is a [concept_dominion] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 dominion_trigger_false_desc_third:1 "[COUNTRY.GetNameNoFlag] is #b not#! a [concept_dominion] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetName)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 vassal_trigger_desc_global:0 "Is a [concept_vassal]"
 vassal_trigger_false_desc_global:0 "Is #b not#! a [concept_vassal]"
 vassal_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is a [COUNTRY.GetAdjectiveNoFlag] [concept_vassal]"
 vassal_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! a [COUNTRY.GetAdjectiveNoFlag] [concept_vassal]"
 vassal_trigger_desc_third:0 "[COUNTRY.GetNameNoFlag] is a [concept_vassal] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetName)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 vassal_trigger_false_desc_third:0 "[COUNTRY.GetNameNoFlag] is #b not#! a [concept_vassal] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetName)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 become_dominion:0 "Ask to Become Dominion"
 become_dominion_action_name:0 "Ask to Become [concept_dominion]"
 become_dominion_desc: "Establishes a [concept_dominion] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')], with the proposing country becoming the [concept_subject]."
 become_dominion_proposal_notification_name:0 "Request to Become [concept_dominion]"
 become_dominion_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] wishes to submit to us and become our [concept_dominion]."
 become_dominion_proposal_notification_effects_desc:0 "If we accept, they will become our subject."
 become_dominion_proposal_accepted_name:0 "[concept_dominion] Request Accepted"
 become_dominion_proposal_accepted_desc:0 "[TARGET_COUNTRY.GetName] accepted our offer to become their [concept_dominion]."
 become_dominion_proposal_declined_name:0 "[concept_dominion] Request Declined"
 become_dominion_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] declined our offer to become their [concept_dominion]."
 become_dominion_proposal_third_party_accepted_name:0 "Country Subjugated"
 become_dominion_proposal_third_party_accepted_desc:0 "[TARGET_COUNTRY.GetName] agreed to become the $suzerain$ of [INITIATOR_COUNTRY.GetName], who is now their [concept_dominion]."
 become_dominion_proposal_third_party_declined_name:0 "Subjugation Refused"
 become_dominion_proposal_third_party_declined_desc:0 "[TARGET_COUNTRY.GetName] refused to become the $suzerain$ of [INITIATOR_COUNTRY.GetName]."

 colony: "Colony"
 colony_action_name: "[concept_colony_subject]"
 colony_action_propose_name: "Make into [concept_colony_subject]"
 colony_action_break_name: "Grant Independence"
 colony_action_ask_to_break_name: "Demand Independence"
 colony_desc: "Establishes a [concept_colony_subject] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')]."
 colony_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is a [concept_colony_subject] of [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 colony_action_notification_name: "Demand for [concept_colony_subject]"
 colony_action_notification_desc: "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become their [concept_colony_subject]."
 colony_action_notification_break_name: "Independence Granted"
 colony_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] have ended our [concept_colony_subject] status. We are independent once again."
 colony_proposal_notification_break_name: "Demand for Independence"
 colony_proposal_notification_break_desc: "[INITIATOR_COUNTRY.GetName] are demanding that we end their [concept_colony_subject] status."
 colony_proposal_notification_break_effects_desc: "If we accept, they will become fully independent."
 colony_proposal_break_accepted_name: "Independence Granted"
 colony_proposal_break_accepted_desc: "[TARGET_COUNTRY.GetName] accepted the demand to end our [concept_colony_subject] status. We are independent once again."
 colony_proposal_break_declined_name: "Independence Refused"
 colony_proposal_break_declined_desc: "[TARGET_COUNTRY.GetName] refused the demand to end our [concept_colony_subject] status."
 colony_action_third_party_notification_break_name: "Independence Granted"
 colony_action_third_party_notification_break_desc: "[INITIATOR_COUNTRY.GetName] ended the [concept_colony_subject] status of [TARGET_COUNTRY.GetName], granting them full independence."
 colony_proposal_third_party_break_accepted_name: "Independence Granted"
 colony_proposal_third_party_break_accepted_desc: "[TARGET_COUNTRY.GetName] ended the [concept_colony_subject] status of [INITIATOR_COUNTRY.GetName], granting them full independence."
 colony_proposal_third_party_break_declined_name: "Independence Refused"
 colony_proposal_third_party_break_declined_desc: "[TARGET_COUNTRY.GetName] refused to end the [concept_colony_subject] status of [INITIATOR_COUNTRY.GetName]."
 colony_proposal_notification_name: "Subjugation Demand"
 colony_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become their [concept_colony_subject]."
 colony_proposal_notification_effects_desc: "If we accept, we will become their subject."
 colony_proposal_accepted_name: "Subjugation Accepted"
 colony_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted the demand for them to become our [concept_colony_subject]."
 colony_proposal_declined_name: "Subjugation Refused"
 colony_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined the demand for them to become our [concept_colony_subject]."
 colony_proposal_third_party_accepted_name: "Country Subjugated"
 colony_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] agreed to become the [concept_colony_subject] of [INITIATOR_COUNTRY.GetName]."
 colony_proposal_third_party_declined_name: "Subjugation Refused"
 colony_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] refused to become the [concept_colony_subject] of [INITIATOR_COUNTRY.GetName]."

 colony_effect_desc_global: "Becomes a [concept_colony_subject]"
 colony_effect_desc_first: "[TARGET_COUNTRY.GetName] becomes a [COUNTRY.GetAdjectiveNoFlag] [concept_colony_subject]"
 colony_effect_desc_third: "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] becomes a [concept_colony_subject] of [COUNTRY.GetName]"

 colony_trigger_desc_global: "Is a [concept_colony_subject]"
 colony_trigger_false_desc_global: "Is #b not#! a [concept_colony_subject]"
 colony_trigger_desc_first: "[TARGET_COUNTRY.GetName] is a [COUNTRY.GetAdjectiveNoFlag] [concept_colony_subject]"
 colony_trigger_false_desc_first: "[TARGET_COUNTRY.GetName] is #b not#! a [COUNTRY.GetAdjectiveNoFlag] [concept_colony_subject]"
 colony_trigger_desc_third: "[COUNTRY.GetName] is a [concept_colony_subject] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 colony_trigger_false_desc_third: "[COUNTRY.GetNameNoFlag] is #b not#! a [concept_colony_subject] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetName)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 become_colony: "Ask to Become Colony"
 become_colony_action_name: "Ask to Become [concept_colony_subject]"
 become_colony_desc: "Establishes a [concept_colony_subject] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')], with the proposing country becoming the [concept_subject]."
 become_colony_proposal_notification_name: "Request to Become [concept_colony_subject]"
 become_colony_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] wishes to submit to us and become our [concept_colony_subject]."
 become_colony_proposal_notification_effects_desc: "If we accept, they will become our subject."
 become_colony_proposal_accepted_name: "[concept_colony_subject] Request Accepted"
 become_colony_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our offer to become their [concept_colony_subject]."
 become_colony_proposal_declined_name: "[concept_colony_subject] Request Declined"
 become_colony_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined our offer to become their [concept_colony_subject]."
 become_colony_proposal_third_party_accepted_name: "Country Subjugated"
 become_colony_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] agreed to become the $suzerain$ of [INITIATOR_COUNTRY.GetName], who is now their [concept_colony_subject]."
 become_colony_proposal_third_party_declined_name: "Subjugation Refused"
 become_colony_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] refused to become the $suzerain$ of [INITIATOR_COUNTRY.GetName]."

 chartered_company: "Chartered Company"
 chartered_company_action_name: "[concept_chartered_company]"
 chartered_company_action_propose_name: "Make into [concept_chartered_company]"
 chartered_company_action_break_name: "Grant Independence"
 chartered_company_action_ask_to_break_name: "Demand Independence"
 chartered_company_desc: "Establishes a [concept_chartered_company] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')]."
 chartered_company_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName] is a [concept_chartered_company] of [SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName]."
 chartered_company_action_notification_name: "Demand for [concept_chartered_company]"
 chartered_company_action_notification_desc: "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become their [concept_chartered_company]."
 chartered_company_action_notification_break_name: "Independence Granted"
 chartered_company_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] have ended our [concept_chartered_company] status. We are independent once again."
 chartered_company_proposal_notification_break_name: "Demand for Independence"
 chartered_company_proposal_notification_break_desc: "[INITIATOR_COUNTRY.GetName] are demanding that we end their [concept_chartered_company] status."
 chartered_company_proposal_notification_break_effects_desc: "If we accept, they will become fully independent."
 chartered_company_proposal_break_accepted_name: "Independence Granted"
 chartered_company_proposal_break_accepted_desc: "[TARGET_COUNTRY.GetName] accepted the demand to end our [concept_chartered_company] status. We are independent once again."
 chartered_company_proposal_break_declined_name: "Independence Refused"
 chartered_company_proposal_break_declined_desc: "[TARGET_COUNTRY.GetName] refused the demand to end our [concept_chartered_company] status."
 chartered_company_action_third_party_notification_break_name: "Independence Granted"
 chartered_company_action_third_party_notification_break_desc: "[INITIATOR_COUNTRY.GetName] ended the [concept_chartered_company] status of [TARGET_COUNTRY.GetName], granting them full independence."
 chartered_company_proposal_third_party_break_accepted_name: "Independence Granted"
 chartered_company_proposal_third_party_break_accepted_desc: "[TARGET_COUNTRY.GetName] ended the [concept_chartered_company] status of [INITIATOR_COUNTRY.GetName], granting them full independence."
 chartered_company_proposal_third_party_break_declined_name: "Independence Refused"
 chartered_company_proposal_third_party_break_declined_desc: "[TARGET_COUNTRY.GetName] refused to end the [concept_chartered_company] status of [INITIATOR_COUNTRY.GetName]."
 chartered_company_proposal_notification_name: "Subjugation Demand"
 chartered_company_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] demands that we submit to them and become their [concept_chartered_company]."
 chartered_company_proposal_notification_effects_desc: "If we accept, we will become their subject."
 chartered_company_proposal_accepted_name: "Subjugation Accepted"
 chartered_company_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted the demand for them to become our [concept_chartered_company]."
 chartered_company_proposal_declined_name: "Subjugation Refused"
 chartered_company_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined the demand for them to become our [concept_chartered_company]."
 chartered_company_proposal_third_party_accepted_name: "Country Subjugated"
 chartered_company_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] agreed to become the [concept_chartered_company] of [INITIATOR_COUNTRY.GetName]."
 chartered_company_proposal_third_party_declined_name: "Subjugation Refused"
 chartered_company_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] refused to become the [concept_chartered_company] of [INITIATOR_COUNTRY.GetName]."

 chartered_company_effect_desc_global: "Becomes a [concept_chartered_company]"
 chartered_company_effect_desc_first: "[TARGET_COUNTRY.GetName] becomes a [COUNTRY.GetAdjectiveNoFlag] [concept_chartered_company]"
 chartered_company_effect_desc_third: "[AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)] becomes a [concept_chartered_company] of [COUNTRY.GetName]"

 chartered_company_trigger_desc_global: "Is a [concept_chartered_company]"
 chartered_company_trigger_false_desc_global: "Is #b not#! a [concept_chartered_company]"
 chartered_company_trigger_desc_first: "[TARGET_COUNTRY.GetName] is a [COUNTRY.GetAdjectiveNoFlag] [concept_chartered_company]"
 chartered_company_trigger_false_desc_first: "[TARGET_COUNTRY.GetName] is #b not#! a [COUNTRY.GetAdjectiveNoFlag] [concept_chartered_company]"
 chartered_company_trigger_desc_third: "[COUNTRY.GetName] is a [concept_chartered_company] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 chartered_company_trigger_false_desc_third: "[COUNTRY.GetNameNoFlag] is #b not#! a [concept_chartered_company] of [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetName)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 become_chartered_company: "Ask to Become Chartered Company"
 become_chartered_company_action_name: "Ask to Become [concept_chartered_company]"
 become_chartered_company_desc: "Establishes a [concept_chartered_company] [concept_subject_type] relationship between two [Concept('concept_country', '$concept_countries$')], with the proposing country becoming the [concept_subject]."
 become_chartered_company_proposal_notification_name: "Request to Become [concept_chartered_company]"
 become_chartered_company_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] wishes to submit to us and become our [concept_chartered_company]."
 become_chartered_company_proposal_notification_effects_desc: "If we accept, they will become our subject."
 become_chartered_company_proposal_accepted_name: "[concept_chartered_company] Request Accepted"
 become_chartered_company_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our offer to become their [concept_chartered_company]."
 become_chartered_company_proposal_declined_name: "[concept_chartered_company] Request Declined"
 become_chartered_company_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined our offer to become their [concept_chartered_company]."
 become_chartered_company_proposal_third_party_accepted_name: "Country Subjugated"
 become_chartered_company_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] agreed to become the $suzerain$ of [INITIATOR_COUNTRY.GetName], who is now their [concept_chartered_company]."
 become_chartered_company_proposal_third_party_declined_name: "Subjugation Refused"
 become_chartered_company_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] refused to become the $suzerain$ of [INITIATOR_COUNTRY.GetName]."

 violate_sovereignty:0 "Violate Sovereignty"
 violate_sovereignty_action_name:0 "Violate Sovereignty"
 violate_sovereignty_action_propose_name:0 "Violate Sovereignty"
 violate_sovereignty_wars:1 "This affects the following wars:"
 violate_sovereignty_countries:0 "The following countries may get involved if [Country.GetName] refuses:"
 violate_sovereignty_desc: "Forces a neutral [concept_country] to take sides in a [concept_war] to gain access through their borders. If the target refuses they will join the opposing side instead."
 violate_sovereignty_proposal_accepted_name:0 "[TARGET_COUNTRY.GetName] accepts our demands"
 violate_sovereignty_proposal_accepted_desc:1 "[TARGET_COUNTRY.GetName] has joined our side!"
 violate_sovereignty_proposal_declined_name:0 "[TARGET_COUNTRY.GetName] has refused our ultimatum"
 violate_sovereignty_proposal_declined_desc:0 "[TARGET_COUNTRY.GetName] have joined our enemies!"
 violate_sovereignty_proposal_notification_name:0 "Violate Sovereignty"
 violate_sovereignty_proposal_notification_desc:0 "[INITIATOR_COUNTRY.GetName] demands that we join their wars."
 violate_sovereignty_proposal_notification_effects_desc:0 "If we accept we will join them in their wars. If we refuse we will join their enemies."
 violate_sovereignty_proposal_third_party_accepted_name:2 "[TARGET_COUNTRY.GetName] accepts [INITIATOR_COUNTRY.GetName] demands"
 violate_sovereignty_proposal_third_party_accepted_desc:2 "[TARGET_COUNTRY.GetName] has joined the [concept_war] on side of [INITIATOR_COUNTRY.GetName]!"
 violate_sovereignty_proposal_third_party_declined_name:2 "[TARGET_COUNTRY.GetName] has refused [INITIATOR_COUNTRY.GetName] ultimatum"
 violate_sovereignty_proposal_third_party_declined_desc:2 "[TARGET_COUNTRY.GetName] has joined the [concept_war] against [INITIATOR_COUNTRY.GetName]!"

 personal_union_trigger_desc_global:0 "Is in a [concept_personal_union]"
 personal_union_trigger_false_desc_global:0 "Is #b not#! in a [concept_personal_union]"
 personal_union_trigger_desc_first:0 "[TARGET_COUNTRY.GetName] is in a [concept_personal_union] with [COUNTRY.GetAdjectiveNoFlag]"
 personal_union_trigger_false_desc_first:0 "[TARGET_COUNTRY.GetName] is #b not#! in a [concept_personal_union] with [COUNTRY.GetAdjectiveNoFlag]"
 personal_union_trigger_desc_third:1 "[COUNTRY.GetName] is in a [concept_personal_union] under [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetNameNoFlag)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"
 personal_union_trigger_false_desc_third:1 "[COUNTRY.GetNameNoFlag] is #b not#! in a [concept_personal_union] under [AddTextIf(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self),TARGET_COUNTRY.GetName)][AddTextIf(Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.Self, TARGET_COUNTRY.Self)),TARGET_COUNTRY.GetName)]"

 invite_to_power_bloc: "Invite to Our Power Bloc"
 invite_to_power_bloc_name: "Invite to [concept_power_bloc]"
 invite_to_power_bloc_action_name: "An invitation to join a [concept_power_bloc]"
 invite_to_power_bloc_action_propose_name: "Send an invitation to join our [concept_power_bloc]"
 invite_to_power_bloc_desc: "An invitation for one [concept_country] to join another [Concept('concept_country','$concept_country_possessive$')] [concept_power_bloc]."
 invite_to_power_bloc_proposal_notification_name: "Invitation to join the [concept_power_bloc]"
 invite_to_power_bloc_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] wishes for us to join [INITIATOR_COUNTRY.GetPowerBloc.GetName]."
 invite_to_power_bloc_proposal_notification_effects_desc: "$invite_to_power_bloc_desc$"
 invite_to_power_bloc_proposal_accepted_name: "[concept_power_bloc] invitation accepted"
 invite_to_power_bloc_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our invitation to join the [INITIATOR_COUNTRY.GetPowerBloc.GetName]."
 invite_to_power_bloc_proposal_declined_name: "[concept_power_bloc] invitation declined"
 invite_to_power_bloc_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined our invitation to join the [INITIATOR_COUNTRY.GetPowerBloc.GetName]."
 invite_to_power_bloc_proposal_third_party_accepted_name: "$invite_to_power_bloc_proposal_accepted_name$"
 invite_to_power_bloc_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] accepted the invitation from [INITIATOR_COUNTRY.GetName] to join the [INITIATOR_COUNTRY.GetPowerBloc.GetName]."
 invite_to_power_bloc_proposal_third_party_declined_name: "$invite_to_power_bloc_proposal_declined_name$"
 invite_to_power_bloc_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] declined the invitation from [INITIATOR_COUNTRY.GetName] to join the [INITIATOR_COUNTRY.GetPowerBloc.GetName]."
 invite_to_power_bloc_recently_declined: "[SCOPE.sCountry('target_country').GetName] declined an invitation to join our [concept_power_bloc] too recently. Another invite can be sent on [GetPlayer.GetLastCatalystExpiryDate(SCOPE.sCountry('target_country'),'catalyst_declined_bloc_invite')]."
 military_assistance_recently_declined: "[SCOPE.sCountry('target_country').GetName] declined our request for [concept_military_assistance] too recently. Another request can be sent on [GetPlayer.GetLastCatalystExpiryDate(SCOPE.sCountry('target_country'),'catalyst_declined_military_assistance')]."

 #join_power_bloc: "Join Power Bloc"
 join_power_bloc_name: "Join [concept_power_bloc]"
 join_power_bloc_action_name: "A request to join a [concept_power_bloc]"
 join_power_bloc_action_propose_name: "Send a request to join the [concept_power_bloc]"
 #join_power_bloc_desc: "A request for one [concept_country] to join another [Concept('concept_country','$concept_country_possessive$')] [concept_power_bloc]."
 join_power_bloc_proposal_notification_name: "Request to join the [concept_power_bloc]"
 join_power_bloc_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] wishes to join [TARGET_COUNTRY.GetPowerBloc.GetName]."
 join_power_bloc_proposal_notification_effects_desc: "$join_power_bloc_desc$"
 join_power_bloc_proposal_accepted_name: "[concept_power_bloc] join request accepted"
 join_power_bloc_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our request to join the [TARGET_COUNTRY.GetPowerBloc.GetName]."
 join_power_bloc_proposal_declined_name: "[concept_power_bloc] join request declined"
 join_power_bloc_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined our request to join the [TARGET_COUNTRY.GetPowerBloc.GetName]."
 join_power_bloc_proposal_third_party_accepted_name: "$join_power_bloc_proposal_declined_name$"
 join_power_bloc_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] accepted the request from [INITIATOR_COUNTRY.GetName] to join the [TARGET_COUNTRY.GetPowerBloc.GetName]."
 join_power_bloc_proposal_third_party_declined_name: "$join_power_bloc_proposal_accepted_name$"
 join_power_bloc_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] declined the request from [INITIATOR_COUNTRY.GetName] to join the [TARGET_COUNTRY.GetPowerBloc.GetName]."

 #host_power_bloc_embassy: "Power Bloc Embassy"
 host_power_bloc_embassy_name: "Host [concept_power_bloc] Embassy"
 host_power_bloc_embassy_action_name: "An offer to host a [Concept('concept_power_bloc','$concept_power_bloc_possessive$')] embassy"
 host_power_bloc_embassy_action_propose_name: "Host [Concept('concept_power_bloc','$concept_power_bloc_possessive$')] embassy"
 #host_power_bloc_embassy_desc: "An offer for one [concept_country] to host an embassy for a [concept_power_bloc]."
 host_power_bloc_embassy_proposal_notification_name: "Offer to host a [concept_power_bloc] embassy"
 host_power_bloc_embassy_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] wishes to host an embassy for the [TARGET_COUNTRY.GetPowerBloc.GetName]."
 host_power_bloc_embassy_proposal_notification_effects_desc: "$host_power_bloc_embassy_desc$"
 host_power_bloc_embassy_proposal_accepted_name: "[concept_power_bloc] embassy offer accepted"
 host_power_bloc_embassy_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our offer to host an embassy for the [TARGET_COUNTRY.GetPowerBloc.GetName]."
 host_power_bloc_embassy_proposal_declined_name: "[concept_power_bloc] embassy offer declined"
 host_power_bloc_embassy_proposal_declined_desc: "[TARGET_COUNTRY.GetName] declined our offer to host an embassy for the [TARGET_COUNTRY.GetPowerBloc.GetName]."
 host_power_bloc_embassy_proposal_third_party_accepted_name: "$host_power_bloc_embassy_proposal_accepted_name$"
 host_power_bloc_embassy_proposal_third_party_accepted_desc: "[TARGET_COUNTRY.GetName] accepted the offer from [INITIATOR_COUNTRY.GetName] to host an embassy for the [TARGET_COUNTRY.GetPowerBloc.GetName]."
 host_power_bloc_embassy_proposal_third_party_declined_name: "$host_power_bloc_embassy_proposal_declined_name$"
 host_power_bloc_embassy_proposal_third_party_declined_desc: "[TARGET_COUNTRY.GetName] declined the offer from [INITIATOR_COUNTRY.GetName] to host an embassy for the [TARGET_COUNTRY.GetPowerBloc.GetName]."
 host_power_bloc_embassy_action_break_name: "Revoke [concept_power_bloc] Embassy"
 host_power_bloc_embassy_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] has committed itself to hosting the [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetPowerBloc.GetName] embassy."
 host_power_bloc_embassy_action_notification_break_name: "[INITIATOR_COUNTRY.GetName] revokes embassy"
 host_power_bloc_embassy_action_notification_break_desc: "[INITIATOR_COUNTRY.GetName] is no longer hosting our embassy."
 host_power_bloc_embassy_action_notification_third_party_break_name: "[INITIATOR_COUNTRY.GetName] revokes embassy"
 host_power_bloc_embassy_action_notification_third_party_break_desc: "[INITIATOR_COUNTRY.GetName] is no longer hosting the [TARGET_COUNTRY.GetPowerBloc.GetName] embassy."

request_power_bloc_embassy: "Request Power Bloc Embassy"
request_power_bloc_embassy_desc: "Request a [concept_power_bloc] embassy."
request_power_bloc_embassy_action_name: "Request Power Bloc Embassy"
request_power_bloc_embassy_proposal_accepted_name: "[concept_power_bloc] embassy request accepted"
request_power_bloc_embassy_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] has agreed to host one of our embassies."
request_power_bloc_embassy_proposal_declined_name: "[concept_power_bloc] embassy request decline"
request_power_bloc_embassy_proposal_declined_desc: "[TARGET_COUNTRY.GetName] has refused to host one of our embassies."
request_power_bloc_embassy_proposal_notification_name: "Power Bloc embassy requested"
request_power_bloc_embassy_proposal_notification_desc: "[INITIATOR_COUNTRY.GetPowerBloc.GetName] has requested that we host one of their embassies."

 da_decrease_autonomy_action_name: "Decrease Autonomy"
 da_decrease_autonomy: "Decrease Autonomy"
 da_decrease_autonomy_desc: "Reduces the [concept_autonomy] of a [concept_subject]."
 da_decrease_autonomy_action_notification_name: "[INITIATOR_COUNTRY.GetName] reduces autonomy of [TARGET_COUNTRY.GetName]"
 da_decrease_autonomy_action_notification_desc: "[INITIATOR_COUNTRY.GetName] is decreasing the [concept_autonomy] of its subject, [TARGET_COUNTRY.GetName]."
 da_decrease_autonomy_action_notification_third_party_name: "[INITIATOR_COUNTRY.GetName] decreased [concept_autonomy] in a [concept_subject]"
 da_decrease_autonomy_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] has decreased our [concept_autonomy]."

 da_increase_autonomy_action_name: "Increase Autonomy"
 da_increase_autonomy: "Increase Autonomy"
 da_increase_autonomy_desc: "Increases the [concept_autonomy] of a [concept_subject]."

 da_increase_autonomy_of_self_action_name: "$da_increase_autonomy_action_name$"
 da_increase_autonomy_of_self: "$da_increase_autonomy$"
 da_increase_autonomy_of_self_desc: "$da_increase_autonomy_desc$"
 da_increase_autonomy_of_self_proposal_notification_name: "Request to Increase Autonomy"
 da_increase_autonomy_of_self_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] is requesting a greater degree of [concept_autonomy]."
 da_increase_autonomy_of_self_proposal_accepted_name: "Increased Autonomy Accepted"
 da_increase_autonomy_of_self_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] accepted our request for increased [concept_autonomy]. We are now considered a [INITIATOR_COUNTRY.GetSubjectType.GetHigherAutonomySubjectType(INITIATOR_COUNTRY.Self).GetName]."
 da_increase_autonomy_of_self_proposal_declined_name: "Increased Autonomy Denied"
 da_increase_autonomy_of_self_proposal_declined_desc: "[TARGET_COUNTRY.GetName] refused our request for increased [concept_autonomy]. Our [concept_liberty_desire] has increased as a result."
 da_increase_autonomy_of_self_proposal_third_party_accepted_name: "[INITIATOR_COUNTRY.GetAdjectiveNoFormatting] Autonomy Granted"
 da_increase_autonomy_of_self_proposal_third_party_accepted_desc: "[INITIATOR_COUNTRY.GetName] was granted a greater degree of [concept_autonomy] by their [concept_overlord] [TARGET_COUNTRY.GetName] and is now considered a [INITIATOR_COUNTRY.GetSubjectType.GetHigherAutonomySubjectType(INITIATOR_COUNTRY.Self).GetName]."
 da_increase_autonomy_of_self_proposal_third_party_declined_name: "[INITIATOR_COUNTRY.GetAdjectiveNoFormatting] Autonomy Denied"
 da_increase_autonomy_of_self_proposal_third_party_declined_desc: "[INITIATOR_COUNTRY.GetName] was denied a greater degree of [concept_autonomy] by their [concept_overlord] [TARGET_COUNTRY.GetName]."

 da_increase_autonomy_of_subject_action_name: "$da_increase_autonomy_action_name$"
 da_increase_autonomy_of_subject: "$da_increase_autonomy$"
 da_increase_autonomy_of_subject_desc: "$da_increase_autonomy_desc$"
 da_increase_autonomy_of_subject_action_notification_name: "[INITIATOR_COUNTRY.GetName] increases autonomy of [TARGET_COUNTRY.GetName]"
 da_increase_autonomy_of_subject_action_notification_desc: "[INITIATOR_COUNTRY.GetName] is increasing the [concept_autonomy] of its subject, [TARGET_COUNTRY.GetName]."
 da_increase_autonomy_of_subject_action_notification_third_party_name: "[INITIATOR_COUNTRY.GetName] increased autonomy in a [concept_subject]"
 da_increase_autonomy_of_subject_action_notification_third_party_desc: "[INITIATOR_COUNTRY.GetName] has increased our [concept_autonomy]."

 #support_independence: "Support Independence"
 support_independence_name: "Support Independence"
 support_independence_action_break_name: "Stop Supporting Independence"
 support_independence_action_name: "Stop Supporting Independence"
 support_independence_action_propose_name: "Offer to Support Independence"
 support_independence_action_notification_name:1 "[INITIATOR_COUNTRY.GetName] supports [TARGET_COUNTRY.GetAdjective] independence"
 support_independence_notification_name:1 "[TARGET_COUNTRY.GetAdjective] bid for independence supported"
 support_independence_action_notification_desc: "[INITIATOR_COUNTRY.GetName] is supporting [TARGET_COUNTRY.GetAdjective] independence, making the chances that [TARGET_COUNTRY.GetName] declares independence higher."
 #support_independence_desc: "Commits to supporting a [concept_subject] in a [concept_diplomatic_demand] for independence from its [concept_overlord]."
 support_independence_pact_desc: "[SCOPE.GetRootScope.GetDiplomaticPact.GetFirstCountry.GetName] has committed itself to supporting the cause of independence in [SCOPE.GetRootScope.GetDiplomaticPact.GetSecondCountry.GetName]."
 support_independence_proposal_notification_name: "[INITIATOR_COUNTRY.GetName] wants to support our independence"
 support_independence_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] wishes to commit itself to our cause, providing backing when we demand independence and making it more likely that our overlord will peacefully agree to our demands."
 support_independence_proposal_notification_effects_desc: "If we accept, [INITIATOR_COUNTRY.GetName] will support our bid for independence."
 support_independence_proposal_accepted_name: "[TARGET_COUNTRY.GetName] accepts our offer"
 support_independence_proposal_accepted_desc: "We now support the [TARGET_COUNTRY.GetAdjective] bid for independence."
 support_independence_proposal_declined_name: "[TARGET_COUNTRY.GetName] declines our offer"
 support_independence_proposal_declined_desc: "[TARGET_COUNTRY.GetAdjective] declined our offer to support their independence."
 support_independence_action_notification_break_name:1 "[INITIATOR_COUNTRY.GetName] withdraws support"
 support_independence_action_notification_break_desc:1 "[INITIATOR_COUNTRY.GetName] no longer supports our bid for independence."
 support_independence_proposal_third_party_accepted_name:1 "[TARGET_COUNTRY.GetAdjective] independence supported"
 support_independence_proposal_third_party_accepted_desc:1 "[INITIATOR_COUNTRY.GetName] supports the independence of [TARGET_COUNTRY.GetName]."
 support_independence_proposal_third_party_declined_name:1 "[TARGET_COUNTRY.GetName] rebuffs offer of support"
 support_independence_proposal_third_party_declined_desc:1 "[INITIATOR_COUNTRY.GetAdjective] offer to support [TARGET_COUNTRY.GetAdjective] independence was rejected."
 support_independence_action_notification_third_party_break_name:1 "[INITIATOR_COUNTRY.GetName] withdraws support"
 support_independence_action_notification_third_party_break_desc:1 "[INITIATOR_COUNTRY.GetName] no longer supports the independence movement of [TARGET_COUNTRY.GetName]."

 request_support_independence: "Request to $support_independence$"
 request_support_independence_action_name: "$request_support_independence$"
 request_support_independence_action_propose_name: "$request_support_independence$"
 request_support_independence_desc: "Request that a [concept_country] come to the aid of a [concept_subject] when they are rebelling against or being annexed by their [concept_overlord]."
 request_support_independence_proposal_notification_name: "$request_support_independence$"
 request_support_independence_proposal_notification_desc: "[INITIATOR_COUNTRY.GetName] requests that we support their independence."
 request_support_independence_proposal_accepted_name: "$request_support_independence$ Accepted"
 request_support_independence_proposal_accepted_desc: "[TARGET_COUNTRY.GetName] is now supporting our independence and will back us when we are rebelling against or being annexed by our [concept_overlord]."
 request_support_independence_proposal_declined_name: "$request_support_independence$ Rejected"
 request_support_independence_proposal_declined_desc: "[TARGET_COUNTRY.GetName] rejected the request to support our independence."
 request_support_independence_proposal_notification_effects_desc: "If we accept, they will be able to call on our aid when they are rebelling against or being annexed by their [concept_overlord]."
 request_support_independence_proposal_third_party_accepted_name: "$request_support_independence$ Granted"
 request_support_independence_proposal_third_party_accepted_desc: "[INITIATOR_COUNTRY.GetName] is now supporting the independence of [TARGET_COUNTRY.GetName]."
 request_support_independence_proposal_third_party_declined_name: "$request_support_independence$ Rejected"
 request_support_independence_proposal_third_party_declined_desc: "[INITIATOR_COUNTRY.GetName] refused to support the independence of [TARGET_COUNTRY.GetName]."

 ADD_LIBERTY_DESIRE_TO_ALL_SUBJECTS: "Increases [concept_liberty_desire] in each other direct [concept_subject] by [SCOPE.ScriptValue('decrease_autonomy_liberty_desire_to_add')|bo0]"

 SELECT_BINDING_PERIOD: "Select [concept_binding_period]"
 BINDING_PERIOD_BUTTON_TEXT_5_YEARS: "#b 5 years#!"
 BINDING_PERIOD_BUTTON_TEXT_10_YEARS: "#b 10 years#!"
 BINDING_PERIOD_BUTTON_TEXT_15_YEARS: "#b 15 years#!"
 BINDING_PERIOD_BUTTON_TEXT_20_YEARS: "#b 20 years#!"
 BINDING_PERIOD_BUTTON_TEXT_25_YEARS: "#b 25 years#!"
 BINDING_PERIOD_BUTTON_TEXT_50_YEARS: "#b 50 years#!"
 BINDING_PERIOD_BUTTON_TEXT_99_YEARS: "#b 99 years#!"

 money_transfer: "Money Transfer"
 money_transfer_desc: ""
 money_transfer_effects_desc: "• Establishes a deal between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ agrees to send a fixed sum of [concept_money] to the other $concept_country$ on a weekly basis."
 money_transfer_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] transfers $concept_money$ to [TARGET_COUNTRY.GetNameNoFormatting] every week"
 TREATY_DRAFT_ARTICLE_FLAG_IS_MONEY_TRANSFER_EFFECT: "• [SOURCE_COUNTRY.GetName] transfers [GetPlayer.GetCustom('currency_symbol')]#v [ArticleDraft.GetQuantity|D]#! to [TARGET_COUNTRY.GetName] every week"
 TREATY_ARTICLE_FLAG_IS_MONEY_TRANSFER_EFFECT: "• [SOURCE_COUNTRY.GetName] transfers [GetPlayer.GetCustom('currency_symbol')]#v [Article.GetQuantity|D]#! to [TARGET_COUNTRY.GetName] every week"

 state_transfer: "State Transfer"
 state_transfer_desc: ""
 state_transfer_effects_desc: "• Establishes an agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ officially cedes a [concept_state] to the other $concept_country$"
 state_transfer_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] transfers a $concept_state$ to [TARGET_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_CAUSES_STATE_TRANSFER_EFFECT: "• [SelectLocalization(ArticleDraft.HasInputValue('state'), ArticleDraft.GetState.GetName, 'NONE')] will be transferred to [TARGET_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_CAUSES_STATE_TRANSFER_EFFECT: "• [Article.GetState.GetName] was transferred to [TARGET_COUNTRY.GetName]"

 goods_transfer: "Goods Transfer"
 goods_transfer_desc: ""
 goods_transfer_effects_desc: "• Establishes a deal between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ agrees to send a fixed sum of [Concept('concept_good', '$concept_goods$')] to the other $concept_country$ on a weekly basis"
 goods_transfer_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] transfers $concept_goods$ to [TARGET_COUNTRY.GetNameNoFormatting] every week"
 TREATY_DRAFT_ARTICLE_FLAG_IS_GOODS_TRANSFER_EFFECT: "• [SOURCE_COUNTRY.GetName] transfers [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetTextIcon)]#v [ArticleDraft.GetQuantity|D]#! [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetName)][AddLocalizationIf(Not(ArticleDraft.GetGoods.IsValid), 'concept_goods')] to [TARGET_COUNTRY.GetName] every week"
 TREATY_ARTICLE_FLAG_IS_GOODS_TRANSFER_EFFECT: "• [SOURCE_COUNTRY.GetName] is transferring [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetTextIcon)]#v [Article.GetQuantity|D]#! [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetName)][AddLocalizationIf(Not(Article.GetGoods.IsValid), 'concept_goods')] to [TARGET_COUNTRY.GetName] every week"

 military_access: "Military Access"
 military_access_desc: ""
 military_access_effects_desc: "• Establishes a military agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ is allowed to march its [Concept('concept_army', '$concept_armies$')] through the territory of the other $concept_country$"
 military_access_article_short_desc: "[TARGET_COUNTRY.GetNameNoFormatting] can march $concept_armies$ through [SOURCE_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_MILITARY_ACCESS_EFFECT: "• [TARGET_COUNTRY.GetName] can march [Concept('concept_army', '$concept_armies$')] through [SOURCE_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_MILITARY_ACCESS_EFFECT: "• [TARGET_COUNTRY.GetName] can march [Concept('concept_army', '$concept_armies$')] through [SOURCE_COUNTRY.GetName]"

 offer_embassy: "Offer Embassy"
 offer_embassy_desc:  ""
 offer_embassy_effects_desc: "• Establishes an agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ formally establishes an embassy in an [concept_unrecognized_power]"
 offer_embassy_article_short_desc: "[TARGET_COUNTRY.GetNameNoFormatting] establishes an embassy in [SOURCE_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_OFFER_EMBASSY_EFFECT: "• [TARGET_COUNTRY.GetName] establishes an embassy in [SOURCE_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_OFFER_EMBASSY_EFFECT: "• [TARGET_COUNTRY.GetName] established an embassy in [SOURCE_COUNTRY.GetName]"

 treaty_port: "Treaty Port"
 treaty_port_desc: ""
 treaty_port_effects_desc: "• An agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ officially cedes a [concept_treaty_port] to the other $concept_country$"
 treaty_port_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] cedes a $concept_treaty_port$ to [TARGET_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_TREATY_PORT_EFFECT: "• [SOURCE_COUNTRY.GetName] cedes [SelectLocalization(ArticleDraft.HasInputValue('state'), ArticleDraft.GetState.GetName, 'NONE')] as a [concept_treaty_port] to [TARGET_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_TREATY_PORT_EFFECT: "• [SOURCE_COUNTRY.GetName] has ceded [Article.GetState.GetName] as a [concept_treaty_port] to [TARGET_COUNTRY.GetName]"

 non_colonization_agreement: "Non-Colonization Agreement"
 non_colonization_agreement_desc: ""
 non_colonization_agreement_effects_desc: "• Establishes an agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ is not allowed to [Concept('concept_colony', '$concept_colonize$')] the agreed upon [concept_strategic_region]"
 non_colonization_agreement_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] agrees to #bold_black not#! $concept_colonize$ a $concept_strategic_region$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_NON_COLONIZATION_AGREEMENT_EFFECT: "• [SOURCE_COUNTRY.GetName] agrees to #b not#! [Concept('concept_colony', '$concept_colonize$')] [SelectLocalization( ArticleDraft.GetStrategicRegion.IsValid , 'TREATY_DRAFT_ARTICLE_STRATEGIC_REGION_NAME', 'TREATY_ARTICLE_GENERAL_STRATEGIC_REGION_NAME' )]"
 TREATY_ARTICLE_FLAG_IS_NON_COLONIZATION_AGREEMENT_EFFECT: "• [SOURCE_COUNTRY.GetName] agrees to #b not#! [Concept('concept_colony', '$concept_colonize$')] [SelectLocalization( Article.GetStrategicRegion.IsValid , 'TREATY_DRAFT_ARTICLE_STRATEGIC_REGION_NAME', 'TREATY_ARTICLE_GENERAL_STRATEGIC_REGION_NAME' )]"
 TREATY_DRAFT_ARTICLE_STRATEGIC_REGION_NAME: "[ArticleDraft.GetStrategicRegion.GetName]"
 TREATY_ARTICLE_STRATEGIC_REGION_NAME: "[Article.GetStrategicRegion.GetName]"
 TREATY_ARTICLE_GENERAL_STRATEGIC_REGION_NAME: "a given [concept_strategic_region]"

 prohibit_trade_with_global_market: "Prohibit Trade with World Market"
 prohibit_trade_with_global_market_desc: ""
 prohibit_trade_with_global_market_effects_desc: "• The [concept_country] may not trade a specific [concept_good] with the [concept_world_market]"
 prohibit_trade_with_global_market_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] will #bold_black not#! trade a $concept_good$ on the $concept_world_market$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_PROHIBIT_GOODS_TRADE_WITH_WORLD_MARKET_EFFECT: "• [SOURCE_COUNTRY.GetName] will #b not#! trade any [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetTextIcon)] [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetName)][AddLocalizationIf(Not(ArticleDraft.GetGoods.IsValid), 'concept_goods')] with the [concept_world_market]"
 TREATY_ARTICLE_FLAG_IS_PROHIBIT_GOODS_TRADE_WITH_WORLD_MARKET_EFFECT: "• [SOURCE_COUNTRY.GetName] will #b not#! trade any [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetTextIcon)] [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetName)][AddLocalizationIf(Not(Article.GetGoods.IsValid), 'concept_goods')] with the [concept_world_market]"

 acquire_monopoly_for_company: "Company Monopoly"
 acquire_monopoly_for_company_desc: ""
 acquire_monopoly_for_company_effects_desc: "• Establishes an agreement between two [Concept('concept_country', '$concept_countries$')] that establishes a [concept_company_monopoly] of a [concept_building] in the other $concept_country$."
 acquire_monopoly_for_company_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] grants a $concept_company_monopoly$ to [TARGET_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_MONOPOLY_FOR_COMPANY_EFFECT: "• [SOURCE_COUNTRY.GetName] grants a [concept_company_monopoly] on [SelectLocalization(ArticleDraft.HasInputValue('building_type'), ArticleDraft.GetBuildingType.GetName, 'concept_building_industry')] in [SOURCE_COUNTRY.GetName] to the [TARGET_COUNTRY.GetAdjective] [concept_company] [SelectLocalization(ArticleDraft.GetCompany.IsValid, ArticleDraft.GetCompany.GetName, 'NONE')]"
 TREATY_ARTICLE_FLAG_IS_MONOPOLY_FOR_COMPANY_EFFECT: "• [SOURCE_COUNTRY.GetName] has granted the [concept_company_monopoly] on [Article.GetBuildingType.GetName] in [SOURCE_COUNTRY.GetName] to the [TARGET_COUNTRY.GetAdjective] [concept_company] [Article.GetCompany.GetName]"

 enforce_embargo: "Enforce Embargo"
 enforce_embargo_desc: ""
 enforce_embargo_effects_desc: "• Establishes an agreement between two [Concept('concept_country', '$concept_countries$')] that forces one $concept_country$ to not trade a specific [concept_good] with another $concept_country$"
 enforce_embargo_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] will #bold_black not#! trade a $concept_good$ with a third $concept_country$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_ENFORCE_EMBARGO_EFFECT: "• [SOURCE_COUNTRY.GetName] will #b not#! trade any [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetTextIcon)] [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetName)][AddLocalizationIf(Not(ArticleDraft.GetGoods.IsValid), 'concept_goods')] with [ArticleDraft.GetCountry.GetName]"
 TREATY_ARTICLE_FLAG_IS_ENFORCE_EMBARGO_EFFECT: "• [SOURCE_COUNTRY.GetName] will #b not#! trade any [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetTextIcon)] [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetName)][AddLocalizationIf(Not(Article.GetGoods.IsValid), 'concept_goods')] with [Article.GetCountry.GetName]"

 law_commitment: "Law Commitment"
 law_commitment_desc: ""
 law_commitment_effects_desc: "• Establishes an agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ commits to passing or retaining a specific [concept_law]."
 law_commitment_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] commits to passing a $concept_law$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_LAW_COMMITMENT_EFFECT: "• [SOURCE_COUNTRY.GetName] commits to passing [SelectLocalization(ArticleDraft.HasInputValue('law_type'), ArticleDraft.GetLawType.GetName, 'NONE')]"
 TREATY_ARTICLE_FLAG_IS_LAW_COMMITMENT_EFFECT: "• [SOURCE_COUNTRY.GetName] has committed to passing [Article.GetLaw.GetName]"

 no_tariffs: "No Tariffs"
 no_tariffs_desc: ""
 no_tariffs_effects_desc: "• Establishes an agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ agrees to not impose [concept_tariffs] on a specific [concept_good]."
 no_tariffs_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] will #bold_black not#! impose $concept_tariffs$ on a $concept_good$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_NO_TARIFFS_EFFECT: "• [SOURCE_COUNTRY.GetName] will #b not#! impose [concept_tariffs] on [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetTextIcon)] [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetName)][AddLocalizationIf(Not(ArticleDraft.GetGoods.IsValid), 'concept_goods')]"
 TREATY_ARTICLE_FLAG_IS_NO_TARIFFS_EFFECT: "• [SOURCE_COUNTRY.GetName] will #b not#! impose [concept_tariffs] on [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetTextIcon)] [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetName)][AddLocalizationIf(Not(Article.GetGoods.IsValid), 'concept_goods')]"

 transit_rights: "Transit Rights"
 transit_rights_desc:  ""
 transit_rights_effects_desc:  "• Establishes an agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ is granted the right to handle its [concept_trade] through the [Concept('concept_world_market_hub', '$concept_world_market_hubs$')] of the other $concept_country$."
 transit_rights_article_short_desc: "[TARGET_COUNTRY.GetNameNoFormatting] can trade through [SOURCE_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_TRANSIT_RIGHTS_EFFECT: "• [TARGET_COUNTRY.GetName] can trade through [SOURCE_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_TRANSIT_RIGHTS_EFFECT: "• [TARGET_COUNTRY.GetName] can trade through [SOURCE_COUNTRY.GetName]"

 no_subventions: "No Subventions"
 no_subventions_desc: ""
 no_subventions_effects_desc: "• Establishes an agreement where one [concept_country] agrees to not grant [concept_subventions] on a specific [concept_good]."
 no_subventions_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] will #bold_black not#! grant $concept_subventions$ on a $concept_good$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_NO_SUBVENTIONS_EFFECT: "• [SOURCE_COUNTRY.GetName] will #b not#! grant [concept_subventions] on [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetTextIcon)] [AddTextIf(ArticleDraft.GetGoods.IsValid, ArticleDraft.GetGoods.GetName)][AddLocalizationIf(Not(ArticleDraft.GetGoods.IsValid), 'concept_goods')]"
 TREATY_ARTICLE_FLAG_IS_NO_SUBVENTIONS_EFFECT: "• [SOURCE_COUNTRY.GetName] will #b not#! grant [concept_subventions] on [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetTextIcon)] [AddTextIf(Article.GetGoods.IsValid, Article.GetGoods.GetName)][AddLocalizationIf(Not(Article.GetGoods.IsValid), 'concept_goods')]"

 trade_privilege: "Trade Privileges"
 trade_privilege_desc: ""
 trade_privilege_effects_desc: "• Establishes [Concept('concept_trade_privilege','$concept_trade_privileges$')] between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ grants favorable conditions to the traders of the other $concept_country$."
 trade_privilege_article_short_desc: "[TARGET_COUNTRY.GetNameNoFormatting] receives $concept_trade_privileges$ from [SOURCE_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_TRADE_PRIVILEGE_EFFECT: "• [TARGET_COUNTRY.GetName] establishes [Concept('concept_trade_privilege','$concept_trade_privileges$')] with [SOURCE_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_TRADE_PRIVILEGE_EFFECT: "• [TARGET_COUNTRY.GetName] has established [Concept('concept_trade_privilege','$concept_trade_privileges$')] with [SOURCE_COUNTRY.GetName]"

 foreign_investment_rights: "Investment Rights"
 foreign_investment_rights_desc: ""
 foreign_investment_rights_effects_desc: "• Establishes unilateral [concept_foreign_investment_rights] in a [concept_country] allowing it to construct [Concept('concept_building', '$concept_buildings$')] in the other $concept_country$."
 foreign_investment_rights_article_short_desc: "Allows [TARGET_COUNTRY.GetNameNoFormatting] to build in [SOURCE_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_INVESTMENT_RIGHTS_EFFECT: "• Allows [TARGET_COUNTRY.GetName] to build in [SOURCE_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_INVESTMENT_RIGHTS_EFFECT: "• Allows [TARGET_COUNTRY.GetName] to build in [SOURCE_COUNTRY.GetName]"

 alliance: "Alliance"
 alliance_desc: ""
 alliance_effects_desc: "• Establishes an [concept_alliance] between two [Concept('concept_country', '$concept_countries$')]\n• Both [Concept('concept_country', '$concept_countries$')] may march their [Concept('concept_army', '$concept_armies$')] through the territory of their [concept_ally]"
 alliance_article_short_desc: "[FIRST_COUNTRY.GetNameNoFormatting] forms an $concept_alliance$ with [SECOND_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_ALLIANCE_EFFECT: "• [FIRST_COUNTRY.GetName] forms an [concept_alliance] with [SECOND_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_ALLIANCE_EFFECT: "• [FIRST_COUNTRY.GetName] has formed an [concept_alliance] with [SECOND_COUNTRY.GetName]"

 defensive_pact: "Defensive Pact"
 defensive_pact_desc: ""
 defensive_pact_effects_desc: "• Establishes a [concept_defensive_pact] between two [Concept('concept_country', '$concept_countries$')]."
 defensive_pact_article_short_desc: "[FIRST_COUNTRY.GetNameNoFormatting] enters into a $concept_defensive_pact$ with [SECOND_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_DEFENSIVE_PACT_EFFECT: "• [FIRST_COUNTRY.GetName] enters into a [concept_defensive_pact] with [SECOND_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_DEFENSIVE_PACT_EFFECT: "• [FIRST_COUNTRY.GetName] enters into a [concept_defensive_pact] with [SECOND_COUNTRY.GetName]"

 guarantee_independence: "Guarantee Independence"
 guarantee_independence_desc: ""
 guarantee_independence_effects_desc: "• An agreement established by one [concept_country] targeting another, where the second $concept_country$ is able to call the first to aid it in any [concept_diplomatic_play] where they are the defender."
 guarantee_independence_article_short_desc: "[TARGET_COUNTRY.GetNameNoFormatting] is guaranteed by [SOURCE_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_GUARANTEE_INDEPENDENCE_EFFECT: "• [SOURCE_COUNTRY.GetName] will guarantee the independence of [TARGET_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_GUARANTEE_INDEPENDENCE_EFFECT: "• [SOURCE_COUNTRY.GetName] is guaranteeing the independence of [TARGET_COUNTRY.GetName]"

 support_independence: "Support Independence"
 support_independence_desc: ""
 support_independence_effects_desc: "• An agreement established by one [concept_country] targeting another, where the first $concept_country$ commits to supporting a [concept_subject] in a [concept_diplomatic_demand] for independence from its [concept_overlord]."
 support_independence_article_short_desc: "[TARGET_COUNTRY.GetNameNoFormatting] is supported by [SOURCE_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_SUPPORT_INDEPENDENCE_EFFECT: "• [SOURCE_COUNTRY.GetName] will support the independence of [TARGET_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_SUPPORT_INDEPENDENCE_EFFECT: "• [SOURCE_COUNTRY.GetName] is supporting the independence of [TARGET_COUNTRY.GetName]"

 join_power_bloc: "Join Power Bloc"
 join_power_bloc_desc: ""
 join_power_bloc_effects_desc: "• An agreement where one [concept_country] officially joins another [Concept('concept_country','$concept_country_possessive$')] [concept_power_bloc]"
 join_power_bloc_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] joins the [TARGET_COUNTRY.GetAdjectiveNoFormatting] $concept_power_bloc$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_JOIN_POWER_BLOC_EFFECT: "• [SOURCE_COUNTRY.GetName] will join the [TARGET_COUNTRY.GetAdjective] [concept_power_bloc] [TARGET_COUNTRY.GetPowerBloc.GetName]"
 TREATY_ARTICLE_FLAG_IS_JOIN_POWER_BLOC_EFFECT: "• [SOURCE_COUNTRY.GetName] has joined the [TARGET_COUNTRY.GetAdjective] [concept_power_bloc] [TARGET_COUNTRY.GetPowerBloc.GetName]"

 host_power_bloc_embassy: "Power Bloc Embassy"
 host_power_bloc_embassy_desc: ""
 host_power_bloc_embassy_effects_desc: "• Formally establishes a $host_power_bloc_embassy$ in a another [concept_country]"
 host_power_bloc_embassy_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] hosts a [TARGET_COUNTRY.GetAdjectiveNoFormatting] $host_power_bloc_embassy$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_HOST_POWER_BLOC_EMBASSY_EFFECT: "• [SOURCE_COUNTRY.GetName] will host a [TARGET_COUNTRY.GetAdjective] $host_power_bloc_embassy$ for [TARGET_COUNTRY.GetPowerBloc.GetName]"
 TREATY_ARTICLE_FLAG_IS_HOST_POWER_BLOC_EMBASSY_EFFECT: "• [SOURCE_COUNTRY.GetName] is hosting a [TARGET_COUNTRY.GetAdjective] $host_power_bloc_embassy$ for [TARGET_COUNTRY.GetPowerBloc.GetName]"

 take_on_debt: "Take on Debt"
 take_on_debt_desc: ""
 take_on_debt_effects_desc: "• Establishes a deal where one [concept_country] takes over the other $concept_country_possessive$ [concept_loans]"
 take_on_debt_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] takes over [TARGET_COUNTRY.GetAdjectiveNoFormatting] $concept_loans$"
 TREATY_DRAFT_ARTICLE_FLAG_IS_TAKE_ON_DEBT_EFFECT: "• [SOURCE_COUNTRY.GetName] will take over [TARGET_COUNTRY.GetAdjective] [concept_loans]"
 TREATY_ARTICLE_FLAG_IS_TAKE_ON_DEBT_EFFECT: "• [SOURCE_COUNTRY.GetName] has taken over [TARGET_COUNTRY.GetAdjective] [concept_loans]"

 military_assistance: "Military Assistance"
 military_assistance_desc: ""
 military_assistance_effects_desc: "• A military agreement between two [Concept('concept_country', '$concept_countries$')] where one $concept_country$ grants [concept_military_assistance] to another [concept_country], aiding them with enhanced training and military expertise"
 military_assistance_article_short_desc: "[SOURCE_COUNTRY.GetNameNoFormatting] grants $military_assistance$ to [TARGET_COUNTRY.GetNameNoFormatting]"
 TREATY_DRAFT_ARTICLE_FLAG_IS_MILITARY_ASSISTANCE_EFFECT: "• [SOURCE_COUNTRY.GetName] will grant $military_assistance$ to [TARGET_COUNTRY.GetName]"
 TREATY_ARTICLE_FLAG_IS_MILITARY_ASSISTANCE_EFFECT: "• [SOURCE_COUNTRY.GetName] is granting $military_assistance$ to [TARGET_COUNTRY.GetName]"

 TREATY_PROPOSAL_ALREADY_ENTERED_INTO_FORCE: "Cannot propose [TREATY.GetName]: already entered in force"
 TREATY_PROPOSAL_COUNTRY_NOT_BOUND_BY_TREATY: "Cannot propose [TREATY.GetName]: [COUNTRY.GetName] would not be [Concept('concept_binding_period', '$concept_binding_period_bound$')] by the proposed [TREATY.GetName] [concept_treaty]"
 TREATY_PROPOSAL_ALREADY_PENDING: "[COUNTRY.GetName] is already evaluating this proposal"
 TREATY_ARTICLE_CANNOT_RATIFY_DIRECTED: "[TREATY_ARTICLE_TYPE.GetName] cannot be ratified from [SOURCE_COUNTRY.GetName] to [TARGET_COUNTRY.GetName]"
 TREATY_ARTICLE_CANNOT_RATIFY_MUTUAL: "[TREATY_ARTICLE_TYPE.GetName] cannot be ratified between [FIRST_COUNTRY.GetName] and [SECOND_COUNTRY.GetName]"

 TREATY_RELATIONS_CHANGE_EFFECT_POS: "• Improves [concept_relations] by #g +1#! every #tooltippable #tooltip:[GetRawTextTooltipTag('$BREAKDOWN$')] #variable $DAYS|v$#!#!#! days$CAPDESC$"
 TREATY_RELATIONS_CHANGE_EFFECT_NEG: "• Reduces [concept_relations] by #n -1#! every #tooltippable #tooltip:[GetRawTextTooltipTag('$BREAKDOWN$')] #variable $DAYS|v$#!#!#! days$CAPDESC$"
 ARTICLE_TYPE_RELATIONS_EFFECT_POS: "• Improves [concept_relations] by #g +1#! every $DAYS|v$ days$CAPDESC$"
 ARTICLE_TYPE_RELATIONS_EFFECT_NEG: "• Reduces [concept_relations] by #n -1#! every $DAYS|v$ days$CAPDESC$"
 TREATY_RELATIONS_EFFECT_BASE_VALUE: "#v $VAL|%2=+$#! base value"
 TREATY_RELATIONS_BREAKDOWN_FORMAT: "#header [concept_relations] progress#!\n#v $DAYS$#! days to [SelectLocalization( LessThan_CFixedPoint( '(CFixedPoint)$PROGRESS_DAILY|5$', '(CFixedPoint)0' ), '#r -', '#g ' )]100%#!\n$TOOLTIP_DELIMITER$\n#v $PROGRESS_DAILY|%2=+$#! daily progress due to:\n$BREAKDOWN$"

 TREATY_AGGREGATE_RELATIONS_CHANGE_NO_PROGRESS: "• Relations between [FIRST_COUNTRY.GetName] and [SECOND_COUNTRY.GetName] #tooltippable #tooltip:$BREAKDOWN_TAG$ will not change#!#!"
 TREATY_AGGREGATE_RELATIONS_CHANGE: "• Relations between [FIRST_COUNTRY.GetName] and [SECOND_COUNTRY.GetName] will change by $CHANGE|+$ every #tooltippable #tooltip:$BREAKDOWN_TAG$ $DAYS|v$#!#! days"
 TREATY_AGGREGATE_RELATIONS_CHANGE_BREAKDOWN_ITEM: "• $CHANGE|+$ every $DAYS|v$ days from [TREATY_ARTICLE.GetName]"
 TREATY_AGGREGATE_MUTUAL_MODIFIERS: "• Both [FIRST_COUNTRY.GetName] and [SECOND_COUNTRY.GetName] get #tooltippable #tooltip:$BREAKDOWN_TAG$ modifiers#!#! from mutual [Concept('concept_article', '$concept_articles$')]"
 TREATY_AGGREGATE_SOURCE_MODIFIERS: "• [SOURCE_COUNTRY.GetName] gets #tooltippable #tooltip:$BREAKDOWN_TAG$ modifiers#!#! from being the source of some directed [Concept('concept_article', '$concept_articles$')]"
 TREATY_AGGREGATE_TARGET_MODIFIERS: "• [TARGET_COUNTRY.GetName] gets #tooltippable #tooltip:$BREAKDOWN_TAG$ modifiers#!#! from being the target of some directed [Concept('concept_article', '$concept_articles$')]"

 TREATY_DRAFT_OWE_OBLIGATION_TOOLTIP: "#header Owe [COUNTRY.GetName] an [concept_obligation]#!\n$TAB$$VAL|+=$ to [concept_treaty] acceptance"
 TREATY_DRAFT_CALL_IN_OBLIGATION_TOOLTIP: "#header Use the [concept_obligation] [COUNTRY.GetName] owes you#!\n$TAB$$VAL|+=$ to [concept_treaty] acceptance"

 TREATY_OPTIONS_VALIDATE_NO_ARTICLES_TO_CREATE: "Add at least one [concept_article]"

 TREATY_ARTICLE_NON_FULFILLMENT_DESC_WEEKLY_TRIGGER: "Checked weekly:\n$TRIGGER_DESC$"
 TREATY_ARTICLE_NON_FULFILLMENT_DESC_MONTHLY_TRIGGER: "Checked monthly:\n$TRIGGER_DESC$"
 TREATY_ARTICLE_NON_FULFILLMENT_DESC_YEARLY_TRIGGER: "Checked yearly:\n$TRIGGER_DESC$"

 TREATY_ARTICLE_NOT_FULFILLED_BY: "[COUNTRY.GetName][ConcatIfNeitherEmpty(' ', AddLocalizationIf(ObjectsEqual(Country.Self, GetPlayer.Self), 'YOU'))] is [Concept('concept_contravention', '$concept_contravening$')] the [Article.GetName] [concept_article] in the [Article.GetTreaty.GetName]\n\n#tooltippable #tooltip:$BREAKDOWN_TAG$ $CURRENT_CONTRAVENTIONS|v$#!#! $concept_contraventions$ currently\n$MAX_CONTRAVENTIONS|v$ $concept_contraventions$ will make the $concept_article$ [Concept('concept_non_fulfillment', '$concept_non_fulfilled$')]"

 TREATY_DRAFT_ARTICLE_MUTUALLY_EXCLUSIVE: "@simple_box! Do #b not#! have [TREATY_ARTICLE_TYPE.GetName] already selected"
 TREATY_DRAFT_ARTICLE_ONCE_PER_TREATY: "@green_checkmark_box! This is already added once in this [concept_treaty]"
 TREATY_DRAFT_ARTICLE_ONCE_PER_SIDE: "@green_checkmark_box! This is already added on the [Country.GetAdjective] side in this [concept_treaty]"

 can_create_treaty_MILITARY_ASSISTANCE: "Can sign a #bold $military_assistance$#! [concept_treaty] with them"

