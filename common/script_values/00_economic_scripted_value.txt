
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#test

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

nb_de_bc = {
	every_in_list = {
		variable = test_1_c_global_stokpile_variable_list_ordered_1
		add  = 1
	}
}
nb_de_faillite = {
	every_in_list = {
		variable = test_2_c_global_stokpile_variable_list_ordered_test_2
		add  = 1
	}
}

nb_de_law_gold_standard = {
	every_country = {
		limit = {
			has_law = law_type:law_gold_standard
			has_modifier = has_central_bank
		}
		add  = 1
	}
}

nb_de_law_country_is_in_unwanted_region = {
	if  = {
		limit = {
			#country_is_in_unwanted_region = yes
			is_invalid_country  = yes
		}
		add  = 1
	}
}

market_owner_is_root_var = {
	if  = {
		limit = {
			#country_is_in_unwanted_region = yes
			market_owner_is_root  = yes
		}
		add  = 1
	}
}

is_subject_custom_trigger_var = {
	if  = {
		limit = {
			#country_is_in_unwanted_region = yes
			is_subject_custom_trigger  = yes
		}
		add  = 1
	}
}

market_owner_is_root_univ_with_buiding_var = {
	if  = {
		limit = {
			#country_is_in_unwanted_region = yes
			market_owner_is_root_univ_with_buiding  = yes
		}
		add  = 1
	}
}

ai_purchase_territory_valid_NGF_var = {
	if  = {
		limit = {
			ai_purchase_territory_valid_NGF  = yes
		}
		add  = 1
	}
}

market_goods_imports_gold_flux = {
	every_country  = {
		limit = {
			market_goods_imports_gold > 0
		}
		add = market_goods_imports_gold
	}
}
market_goods_imports_gold = {
	if  = {
		limit = {
			not = {
				or = {
					is_subject_custom_trigger = yes
					market_owner_is_root_univ_with_buiding = yes
				}
			}
		}
		value = {
			add  = market.mg:gold.market_goods_imports
		}
	}
}

test_law_franc_french_franc_monetary_system_GS_BS_GES_trigger = {
	value = 0
	if  = {
		limit = {
			law_franc_french_franc_monetary_system_GS_BS_GES_trigger = yes

		}
		add = 1
	}
}
test_law_franc_french_franc_monetary_system_SS_trigger = {
	value = 0
	if  = {
		limit = {
			law_franc_french_franc_monetary_system_SS_trigger = yes

		}
		add = 1
	}
}
ttop_10_nc = {
	value = 0
	if  = {
		limit = {
			no_indepeendeent_market = yes
		}
		add = 1
	}
}
market_owner_is_root_3 = {
	value = 0
	if  = {
		limit = {
			#subject_overlord_has_central_bank = yes

			overlord_has_central_bank = yes

			# is_subject_custom_trigger = yes
			# overlord_has_central_bank = yes
		}
		add = 1
	}
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ██████╗ ██╗██╗   ██╗███████╗██████╗
# ██╔══██╗██║██║   ██║██╔════╝██╔══██╗
# ██║  ██║██║██║   ██║█████╗  ██████╔╝
# ██║  ██║██║╚██╗ ██╔╝██╔══╝  ██╔══██╗
# ██████╔╝██║ ╚████╔╝ ███████╗██║  ██║
# ╚═════╝ ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
gdp_var = {
	value = root.gdp
	min = 1
}
capital_gdp_var = {
	value = capital.gdp
	min = 1
}
capital_gdp_ratio = {
	value = capital_gdp_var
	divide = gdp_var
}
gdp_nationnal_currency = {
	value = root.gdp
	multiply = money_value
}

GDP_dif_1_final = {
	value = var:GDP_dif_1
}
GDP_dif_5_final = {
	value = var:GDP_dif_5
}
GDP_dif_10_final = {
	value = var:GDP_dif_10
}

highest_gdp = {
	every_country = {
		limit = {
			has_global_highest_gdp =yes
		}
		add = gdp
	}
}
ratio_with_highest_gdp = {
	value = GDP
	divide = highest_gdp
}

gdp_03 = {
	value = gdp
	multiply = 0.03
}
gdp_04 = {
	value = gdp
	multiply = 0.04
}
gdp_05 = {
	value = gdp
	multiply = 0.05
}

loyalist_fraction_pop = {
	value = loyalist_fraction
}
radical_fraction_pop = {
	value = radical_fraction
}
var_global_country_ranking = {
	value = country_rank
}
national_capacity_reference_currency = {
	value = 1
	every_country = {
		limit = {
			has_modifier = global_monetary_reference
		}
		add = national_capacity
	}
}
# reference_currency_owned_by_the_country_in_gold = {
# 	value = 0
# 	add = reference_currency_owned_by_the_country
# 	multiply = global_monetary_reference
# }
ratio_with_national_capacity_reference_currency = {
	value = national_capacity
	divide = national_capacity_reference_currency
}

army_size_var = {
	value = 0
	add = army_size
}
navy_size_var = {
	value = 0
	add = navy_size
}

currency_quantity_sell = {
	value = 0.5
	if = {
		limit = {
			or  = {
				#has_modifier = extreme_weak_currency voir si on change
				var:currency_crisis = 1
				var:central_bank_bankruptcy = 1
				scope:overrated_currency_country_owner.infamy >= infamy_threshold:pariah
			}
		}
		add = 0.5
	}
}

bg_financial_centre_lvl = {
	value = 0
	every_scope_building = {
		limit = {
			is_building_group = bg_financial_centre
		}
		add = level
	}
}

value_for_has_financial_center = {
	value = bg_financial_centre_lvl
	multiply = private_bank_borrowings_year_var_2
}

num_states_var   = {
	add = root.num_states
}

enemy_capital_is_occuped = {
	value = 0
	every_country = {
		limit = {
			is_at_war = yes
			has_war_with = ROOT
		}
		capital = {
			if = {
				limit = {
					controller = ROOT
					has_modifier = central_bank_place
				}
				add = 1
			}
		}
	}
}
enemy_stats_is_occuped = {
	every_country = {
		limit = {
			is_at_war = yes
			has_war_with = ROOT
		}
		every_scope_state = {
			if = {
				limit = {
					controller = ROOT
				}
				add = 1
			}
		}
	}
}

institution_economic_central_bank_lvl = {
	value = 0
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value >= 1
			}

		}
		add = 0.5
	}
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value >= 2
			}

		}
		add = 0.5
	}
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value >= 3
			}

		}
		add = 0.5
	}
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value >= 4
			}

		}
		add = 0.5
	}
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value >= 5
			}

		}
		add = 0.5
	}
}
institution_economic_central_bank_lvl_brut = {
	value = 0
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value = 1
			}

		}
		add = 1
	}
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value = 2
			}

		}
		add = 2
	}
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value = 3
			}

		}
		add = 3
	}
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value = 4
			}

		}
		add = 4
	}
	if = {
		limit = {
			institution_investment_level = {
				institution = institution_economic_central_bank
				value = 5
			}

		}
		add = 5
	}
}
every_subject = {
	every_country = {
		limit = {
			is_subject_of = root
		}
		add = 1
	}
}
every_subject_gdp = {
	every_country = {
		limit = {
			is_subject_of = root
		}
		add = gdp
	}
}
every_subject_pop = {
	every_country = {
		limit = {
			is_subject_of = root
		}
		add = total_population
	}
}
every_subject_gold = {
	every_country = {
		limit = {
			is_subject_of = root
		}
		add = national_capacity
	}
}

subject_overlord_gdp_ratio = {
	value = gdp
	divide = overlord.gdp
}
subject_overlord_gdp_ratio_revers = {
	value = 1
	subtract = subject_overlord_gdp_ratio
	max = 0.9
	min = 0.1
}


financial_product_by_trade_route = {
	value = 0

	if  = {
		limit = {
			has_technology_researched = postal_savings

		}
		add = 0.25
	}
	if  = {
		limit = {
			has_technology_researched = investment_banks

		}
		add = 0.25
	}
	if  = {
		limit = {
			has_technology_researched = international_exchange_standards

		}
		add = 0.25
	}
	if  = {
		limit = {
			has_technology_researched = modern_financial_instruments

		}
		add = 0.25
	}
}

transfer_gold_to_central_bank_metal_reserves_sc = {
	value = var:transfer_gold_to_central_bank_metal_reserves
	multiply = money_value
}

########################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#  █████╗ ██╗   ██╗███████╗██████╗  █████╗  ██████╗ ███████╗         ██████╗  ██████╗ ██╗     ██████╗         ███████╗██╗  ██╗ ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗        ██████╗  █████╗
# ██╔══██╗██║   ██║██╔════╝██╔══██╗██╔══██╗██╔════╝ ██╔════╝        ██╔════╝ ██╔═══██╗██║     ██╔══██╗        ██╔════╝╚██╗██╔╝██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝        ██╔══██╗██╔══██╗
# ███████║██║   ██║█████╗  ██████╔╝███████║██║  ███╗█████╗          ██║  ███╗██║   ██║██║     ██║  ██║        █████╗   ╚███╔╝ ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗          ██████╔╝███████║
# ██╔══██║╚██╗ ██╔╝██╔══╝  ██╔══██╗██╔══██║██║   ██║██╔══╝          ██║   ██║██║   ██║██║     ██║  ██║        ██╔══╝   ██╔██╗ ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝          ██╔══██╗██╔══██║
# ██║  ██║ ╚████╔╝ ███████╗██║  ██║██║  ██║╚██████╔╝███████╗███████╗╚██████╔╝╚██████╔╝███████╗██████╔╝███████╗███████╗██╔╝ ██╗╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗███████╗██║  ██║██║  ██║
# ╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝ ╚═════╝  ╚═════╝ ╚══════╝╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
#
# ████████╗███████╗         ██████╗██╗   ██╗██████╗ ██████╗ ███████╗███╗   ██╗ ██████╗██╗███████╗███████╗
# ╚══██╔══╝██╔════╝        ██╔════╝██║   ██║██╔══██╗██╔══██╗██╔════╝████╗  ██║██╔════╝██║██╔════╝██╔════╝
#    ██║   █████╗          ██║     ██║   ██║██████╔╝██████╔╝█████╗  ██╔██╗ ██║██║     ██║█████╗  ███████╗
#    ██║   ██╔══╝          ██║     ██║   ██║██╔══██╗██╔══██╗██╔══╝  ██║╚██╗██║██║     ██║██╔══╝  ╚════██║
#    ██║   ███████╗███████╗╚██████╗╚██████╔╝██║  ██║██║  ██║███████╗██║ ╚████║╚██████╗██║███████╗███████║
#    ╚═╝   ╚══════╝╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝ ╚═════╝╚═╝╚══════╝╚══════╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

difference_with_average_gold_exchange_rate_currencies = {
	value = money_value_in_gold #money_value_rapported_inflation
	divide = global_var:money_value_median
}
difference_with_average_gold_exchange_rate_currencies_revers = {
	value = 1
	subtract = difference_with_average_gold_exchange_rate_currencies
	multiply = -1
}
difference_with_average_gold_exchange_rate_currencies_revers_normalized = {
	value = difference_with_average_gold_exchange_rate_currencies_revers
	multiply = -1
}
difference_with_average_gold_exchange_rate_currencies_revers_100 = {
	value = difference_with_average_gold_exchange_rate_currencies_revers_normalized
	multiply = 100
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#  ██████╗ ██████╗ ███╗   ██╗ ██████╗███████╗██████╗ ███╗   ██╗██╗███╗   ██╗ ██████╗     ██████╗ ███████╗███████╗███████╗██████╗ ██╗   ██╗███████╗     ██████╗██╗   ██╗██████╗ ██████╗ ███████╗███╗   ██╗ ██████╗██╗   ██╗
# ██╔════╝██╔═══██╗████╗  ██║██╔════╝██╔════╝██╔══██╗████╗  ██║██║████╗  ██║██╔════╝     ██╔══██╗██╔════╝██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝    ██╔════╝██║   ██║██╔══██╗██╔══██╗██╔════╝████╗  ██║██╔════╝╚██╗ ██╔╝
# ██║     ██║   ██║██╔██╗ ██║██║     █████╗  ██████╔╝██╔██╗ ██║██║██╔██╗ ██║██║  ███╗    ██████╔╝█████╗  ███████╗█████╗  ██████╔╝██║   ██║█████╗      ██║     ██║   ██║██████╔╝██████╔╝█████╗  ██╔██╗ ██║██║      ╚████╔╝
# ██║     ██║   ██║██║╚██╗██║██║     ██╔══╝  ██╔══██╗██║╚██╗██║██║██║╚██╗██║██║   ██║    ██╔══██╗██╔══╝  ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝      ██║     ██║   ██║██╔══██╗██╔══██╗██╔══╝  ██║╚██╗██║██║       ╚██╔╝
# ╚██████╗╚██████╔╝██║ ╚████║╚██████╗███████╗██║  ██║██║ ╚████║██║██║ ╚████║╚██████╔╝    ██║  ██║███████╗███████║███████╗██║  ██║ ╚████╔╝ ███████╗    ╚██████╗╚██████╔╝██║  ██║██║  ██║███████╗██║ ╚████║╚██████╗   ██║
#  ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═══╝ ╚═════╝     ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝     ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝ ╚═════╝   ╚═╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

global_monetary_reference = {
	value = global_var:money_value_reference_currency
}

#money_value
money_value_reference_currency = {
	value = global_var:money_value_reference_currency
}
money_value_reference_currency_flux = {
	every_country = {
		limit = {
			has_modifier = global_monetary_reference
		}
		value = money_value
	}
}

#money_value_rapported_inflation
money_value_rapported_inflation_reference_currency = {
	value = global_var:money_value_rapported_inflation_reference_currency
}
money_value_rapported_inflation_reference_currency_flux = {
	every_country = {
		limit = {
			has_modifier = global_monetary_reference
		}
		value = money_value_rapported_inflation
	}
}

#money_supply
money_supply_reference_currency = {
	value = global_var:money_supply_reference_currency
}
money_supply_reference_currency_flux = {
	every_country = {
		limit = {
			has_modifier = global_monetary_reference
		}
		value = money_supply
	}
}

#money_supply_stockpile_by_other_country_reference_currency
money_supply_stockpile_by_other_country_reference_currency = {
	value = global_var:money_supply_stockpile_by_other_country_reference_currency
}
money_supply_stockpile_by_other_country_reference_currency_flux = {
	every_country = {
		limit = {
			has_modifier = global_monetary_reference
		}
		value = money_supply_stockpile_by_other_country
	}
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#  ██████╗ ██████╗ ███╗   ██╗ ██████╗███████╗██████╗ ███╗   ██╗██╗███╗   ██╗ ██████╗     ██████╗ ██╗      █████╗ ██╗   ██╗███████╗██████╗
# ██╔════╝██╔═══██╗████╗  ██║██╔════╝██╔════╝██╔══██╗████╗  ██║██║████╗  ██║██╔════╝     ██╔══██╗██║     ██╔══██╗╚██╗ ██╔╝██╔════╝██╔══██╗
# ██║     ██║   ██║██╔██╗ ██║██║     █████╗  ██████╔╝██╔██╗ ██║██║██╔██╗ ██║██║  ███╗    ██████╔╝██║     ███████║ ╚████╔╝ █████╗  ██████╔╝
# ██║     ██║   ██║██║╚██╗██║██║     ██╔══╝  ██╔══██╗██║╚██╗██║██║██║╚██╗██║██║   ██║    ██╔═══╝ ██║     ██╔══██║  ╚██╔╝  ██╔══╝  ██╔══██╗
# ╚██████╗╚██████╔╝██║ ╚████║╚██████╗███████╗██║  ██║██║ ╚████║██║██║ ╚████║╚██████╔╝    ██║     ███████╗██║  ██║   ██║   ███████╗██║  ██║
#  ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝╚═╝  ╚═══╝ ╚═════╝     ╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

player_has_central_bank = {
	value = 0
	every_country = {
		limit = {
			is_player = yes
			has_modifier = has_central_bank
		}
		add = 1
	}
}
money_value_of_player = {
	every_country = {
		limit = {
			is_player = yes
		}
		value = money_value
	}
}
money_value_rapported_inflation_of_player = {
	every_country = {
		limit = {
			is_player = yes
		}
		value = money_value_rapported_inflation
	}
}
money_supply_of_player = {
	every_country = {
		limit = {
			is_player = yes
		}
		value = money_supply
	}
}
money_supply_stockpile_by_other_country_of_player = {
	every_country = {
		limit = {
			is_player = yes
		}
		value = money_supply_stockpile_by_other_country
	}
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ██████╗ ███████╗██╗   ██╗ █████╗ ██╗     ██╗   ██╗ █████╗ ████████╗██╗ ██████╗ ███╗   ██╗    ██╗██████╗ ███████╗██╗   ██╗ █████╗ ██╗     ██╗   ██╗ █████╗ ████████╗██╗ ██████╗ ███╗   ██╗
# ██╔══██╗██╔════╝██║   ██║██╔══██╗██║     ██║   ██║██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║   ██╔╝██╔══██╗██╔════╝██║   ██║██╔══██╗██║     ██║   ██║██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║
# ██║  ██║█████╗  ██║   ██║███████║██║     ██║   ██║███████║   ██║   ██║██║   ██║██╔██╗ ██║  ██╔╝ ██████╔╝█████╗  ██║   ██║███████║██║     ██║   ██║███████║   ██║   ██║██║   ██║██╔██╗ ██║
# ██║  ██║██╔══╝  ╚██╗ ██╔╝██╔══██║██║     ██║   ██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║ ██╔╝  ██╔══██╗██╔══╝  ╚██╗ ██╔╝██╔══██║██║     ██║   ██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║
# ██████╔╝███████╗ ╚████╔╝ ██║  ██║███████╗╚██████╔╝██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║██╔╝   ██║  ██║███████╗ ╚████╔╝ ██║  ██║███████╗╚██████╔╝██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║
# ╚═════╝ ╚══════╝  ╚═══╝  ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝    ╚═╝  ╚═╝╚══════╝  ╚═══╝  ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#devaluation
devaluation_rate_normalized = {
	value = var:devaluation_rate
	add = 100
	divide = 100
}
money_value_predicted_devaluation = {
	value = national_capacity
	divide = money_supply_predicted_devaluation
	max = 100
}
money_supply_predicted_revaluation = {
	value = money_supply
	add = money_supply_predicted_add_revaluation_1
}
money_supply_predicted_devaluation = {
	value = money_supply
	multiply = devaluation_rate_normalized
}
money_supply_predicted_add_devaluation_1 = {
	value = money_supply_predicted_devaluation
	subtract = money_supply
}
inflation_value_predicted_devaluation = {
	add = devaluation_rate_normalized
	subtract = 1
	divide = var:devaluation_time #pas besoin de le validé car les bouton sont intouchable
}
devaluation_time_month = {
	value = var:devaluation_time
	multiply = 12
}
devaluation_time_1_month = { #special for exchange control
	value = var:devaluation_time_1
	multiply = 12
}
devaluation_time_week = {
	value = var:devaluation_time
	multiply = 52
}
inflation_value_predicted_devaluation_month = {
	value = var:devaluation_rate
    divide = devaluation_time_month
}
money_supply_to_add_per_month = { #valeur à ajouter par an
	value = 0
	if  = {
		limit  = {
			var:devaluation_on = 1
		}
		add = var:money_supply_predicted_add_devaluation_1_month_valided #valided to save the vare
		divide = devaluation_time_month
	}
}
devaluation_on_time_scripted = {
	value = 0
	if  = {
		limit  = {
			var:devaluation_on = 1
		}
		add = devaluation_time_month
		subtract = var:devaluation_on_time
	}
}

#revaluation
revaluation_rate_normalized = {
	value = 100
	subtract = var:revaluation_rate
	divide = 100
}
money_value_predicted_revaluation = {
	value = national_capacity
	divide = money_supply_predicted_revaluation
	max = 100
}
money_supply_predicted_revaluation = {
	value = money_supply
	add = money_supply_predicted_add_revaluation_1
}
money_supply_state_predicted_revaluation = {
	value = money_supply_state #money_supply
	multiply = revaluation_rate_normalized
}
money_supply_predicted_add_revaluation_1 = { #money_supply_to_subtract_per_month
	value = money_supply_state_predicted_revaluation #money_supply
	subtract = money_supply_state
}
inflation_value_predicted_revaluation = {
	add = revaluation_rate_normalized
	subtract = 1
	multiply = var:revaluation_time
}
revaluation_time_month = {
	value = var:revaluation_time
	multiply = 12
}
revaluation_time_1_month = { #special for exchange control
	value = var:revaluation_time_1
	multiply = 12
}
revaluation_time_week = {
	value = var:revaluation_time
	multiply = 52
}
inflation_value_predicted_revaluation_month = {
	value = var:revaluation_rate
    divide = revaluation_time_month
	multiply = -1
}
money_supply_to_subtract_per_month = {
	value = 0
	if  = {
		limit  = {
			var:revaluation_on = 1
		}
		add = var:money_supply_predicted_add_revaluation_1_month_valided #valided to save the vare
		divide = revaluation_time_month
	}
}
revaluation_on_time_scripted = { #valeur à ajouter par an
	value = 0
	if  = {
		limit  = {
			var:revaluation_on = 1
		}
		add = revaluation_time_month
		subtract = var:revaluation_on_time
	}
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ███╗   ███╗ ██████╗ ███╗   ██╗███████╗██╗   ██╗    ██╗   ██╗ █████╗ ██╗     ██╗   ██╗███████╗
# ████╗ ████║██╔═══██╗████╗  ██║██╔════╝╚██╗ ██╔╝    ██║   ██║██╔══██╗██║     ██║   ██║██╔════╝
# ██╔████╔██║██║   ██║██╔██╗ ██║█████╗   ╚████╔╝     ██║   ██║███████║██║     ██║   ██║█████╗
# ██║╚██╔╝██║██║   ██║██║╚██╗██║██╔══╝    ╚██╔╝      ╚██╗ ██╔╝██╔══██║██║     ██║   ██║██╔══╝
# ██║ ╚═╝ ██║╚██████╔╝██║ ╚████║███████╗   ██║███████╗╚████╔╝ ██║  ██║███████╗╚██████╔╝███████╗
# ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝╚══════╝ ╚═══╝  ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

money_value_in_gold = {
	value = 0
	if = {
		limit = {
			market_owner_is_root_4 = yes
			or = {
				has_law = law_type:law_gold_standard
				has_law = law_type:law_gold_exchange_standard
			}
		}
		add = money_value
	}
	if = {
		limit = {
			market_owner_is_root_4  = yes
			has_law = law_type:law_silver_standard
		}
		add = money_value_silver_standard_in_gold
	}
	if = {
		limit = {
			market_owner_is_root_4  = yes
			has_law = law_type:law_bimetallism_standard
		}
		add = money_value_bimetallism_standard_in_gold
	}
	if = {
		limit = {
			or  = {
			    market_owner_is_root_4 = no
			    is_subject = yes
		    }
		}
		add = money_value
		multiply = rate_by_law_metal_type_2
	}

	min = 0.0001
}

money_value = {

	if = {
		limit = {
			not = {
				has_modifier = has_central_bank
			}
		}
		value = money_value_no_bc
	}

	#has_central_bank subjectt/no market owner
	if = {
		limit = {
			has_modifier = has_central_bank
		}
		value = money_value_0
	}

	#subjectt
	if = {
		limit = {
	        market_owner_is_root_4 = no
        }
		if = {
			limit = {
				market.owner = {
					has_modifier = has_central_bank
				}
			}
			value = market.owner.money_value_0

			#subject
			if = {
				limit = {
					is_subject_custom_trigger = yes
					market.owner = {
						is_player = no
					}
				}
				multiply = subject_overlord_gdp_ratio_revers
				#min = 0.01
			}

			#no market.owner 
			if = {
				limit = {
					is_subject_custom_trigger = no
					market.owner = {
						is_player = no
					}
				}
			    value = market.owner.money_value_0
			}

			#market.owner = player
			if = {
				limit = {
					market.owner = {
						is_player = yes
					}
				}
				divide = market.owner.var:parity_scaled_by_the_overlord
				add = 1
				min = 0.01
			}
		}
	}

	# #no market owner
	# if = {
	# 	limit = {
	# 		market_owner_is_root_4 = no
	# 		is_subject = no
	# 	}
	# 	if = {
	# 		limit = {
	# 			market.owner = {
	# 				has_modifier = has_central_bank
	# 			}
	# 		}
	# 		value = market.owner.money_value_0
	# 	}
	# }

	#max = revaluation_money_value_max
	max = 100
	min = 0.0001
}

money_value_target_2_in_gold = {
	min = 0.0001

	if = {
		limit = {
			or = {
				has_law = law_type:law_gold_standard
				has_law = law_type:law_gold_exchange_standard
			}
		}
		add = var:money_value_target_2
	}
	if = {
		limit = {
			has_law = law_type:law_silver_standard
		}
		value = var:money_value_target_2
		multiply = silver_to_gold_rate
	}
	if = {
		limit = {
			has_law = law_type:law_bimetallism_standard
		}
		value = var:money_value_target_2
		multiply = bimetallic_rate_silver_to_gold
	}
}

money_value_0 = {
	value = 0

	if = {
		limit = {
			has_law = law_type:law_fiat_standard
			#has_law = law_type:law_no_monetary_system
		}
		value = 0.01
	}
	if = {
		limit = {
			or = {
				has_law = law_type:law_silver_standard
				has_law = law_type:law_bimetallism_standard
				has_law = law_type:law_gold_standard
			}
		}
		value = national_capacity
		divide = money_supply
	}
	if = {
		limit = {
			has_law = law_type:law_gold_exchange_standard
		}
		add = money_value_by_reference_currency
	}

	#max = 10
}
money_value_no_bc = {
	value = 0.01
}
money_value_raported_to_overrlord = {
	value = money_value_rapported_inflation
	divide = overlord.money_value
}
money_value_rapported_inflation = {
	value = money_value
	multiply = inflation_value_for_currency
	min = 0.00001
}
gold_value_rapported_inflation = {
	value = 1
	divide = money_value_rapported_inflation
}

money_value_target_change_prediction = {
	value = money_value
}

money_value_target_real = {
	add = var:money_value_target_1
}
money_value_target_real_in_gold = {
	min = 0.0001
	if = {
		limit = {
			or = {
				has_law = law_type:law_gold_standard
				has_law = law_type:law_gold_exchange_standard
			}
		}
		add = money_value_target_real
	}
	if = {
		limit = {
			has_law = law_type:law_silver_standard
		}
		value = money_value_target_real
		multiply = silver_to_gold_rate
	}
	if = {
		limit = {
			has_law = law_type:law_bimetallism_standard
		}
		value = money_value_target_real
		multiply = bimetallic_rate_silver_to_gold #bimetallic_rate
	}
}

money_value_target_real_below_10 = {
	value = money_value_target_real_in_gold
	multiply = 0.90
}
money_value_target_real_above_10 = {
	value = money_value_target_real_in_gold
	multiply = 1.1
}
money_value_target_real_below_25 = {
	value = money_value_target_real_in_gold
	multiply = 0.75
}
money_value_target_real_above_25 = {
	value = money_value_target_real_in_gold
	multiply = 1.25
}
money_value_target_real_gui = {
	add = var:money_value_target_2
}
money_value_target = {
	add = national_capacity
	divide = var:money_value_target_1  #valeur à choisir
}
money_value_target_with_the_reference_currency = {
	add = global_monetary_reference
	multiply = var:money_value_target_with_the_reference_currency_2
}
#money_value_target_real








#quantité de devise achetable
purchasable_currency_amount = {
	value = money_supply
	subtract = money_value_target
}
money_supply_80 = {
	value = money_supply
	multiply = 0.8
}

purchasable_currency_amount_80 = {
	value = money_supply_80
	subtract = money_value_target
}

private_bank_funds_pourcent_projection = {
	value = private_bank_funds
	subtract = purchasable_currency_amount
}
private_bank_funds_pourcent_projection_ratio = {
	value = private_bank_funds_pourcent_projection
	divide = money_supply
}

private_bank_funds_pourcent_at_20 = {
	value = private_bank_funds
	multiply  = {
		value = 0.3
		divide = private_bank_funds_pourcent
	}
}
private_bank_funds_pourcent_at_20_to_substract = {
	value = private_bank_funds
	subtract = private_bank_funds_pourcent_at_20
}

money_value_dif_1_final = {
	value = var:money_value_dif_1
}
money_value_dif_5_final = {
	value = var:money_value_dif_5
}
money_value_dif_10_final = {
	value = var:money_value_dif_10
}

####################################
#GSE
money_value_by_reference_currency = {
	value = money_value_rapported_inflation_reference_currency #money_value_reference_currency
	multiply = amount_reference_currency_to_ensure_parity_ratio
}
amount_reference_currency_to_ensure_parity_ratio = { #à mettre dans l'interface
	value = var:reference_currency_owned_by_the_country_fixe
	divide = amount_reference_currency_to_ensure_parity
}
amount_reference_currency_to_ensure_parity = { #quantité de devviser nécessaire pour assurer la parité avvec la devvise de référence
	value = money_supply
	multiply = var:money_value_target_with_the_reference_currency_2 #au chois  du joueur  ou de l'ia en fonction de ces réserve
}
money_value_by_reference_currency_projection = { #quantité de devviser nécessaire pour assurer la parité avvec la devvise de référence
	value = money_value_reference_currency
	multiply = var:money_value_target_with_the_reference_currency_2 #au chois  du joueur  ou de l'ia en fonction de ces réserve
}
##################

########################################################################################################################################################################################################################################################################################################################
money_value_exchange_rate_with_reference_currency = {
	value = money_value_rapported_inflation
	divide = global_monetary_reference
}
########################################################################################################################################################################################################################################################################################################################

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ███╗   ███╗ ██████╗ ███╗   ██╗███████╗██╗   ██╗     ███████╗██╗   ██╗██████╗ ██████╗ ██╗  ██╗   ██╗
# ████╗ ████║██╔═══██╗████╗  ██║██╔════╝╚██╗ ██╔╝     ██╔════╝██║   ██║██╔══██╗██╔══██╗██║  ╚██╗ ██╔╝
# ██╔████╔██║██║   ██║██╔██╗ ██║█████╗   ╚████╔╝      ███████╗██║   ██║██████╔╝██████╔╝██║   ╚████╔╝
# ██║╚██╔╝██║██║   ██║██║╚██╗██║██╔══╝    ╚██╔╝       ╚════██║██║   ██║██╔═══╝ ██╔═══╝ ██║    ╚██╔╝
# ██║ ╚═╝ ██║╚██████╔╝██║ ╚████║███████╗   ██║███████╗███████║╚██████╔╝██║     ██║     ███████╗██║
# ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝   ╚═╝╚══════╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝     ╚══════╝╚═╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

money_supply = {
	value = 0 #à voir
	add = money_supply_state
	add = money_circulating
	min = 1
}
money_supply_montly = {
	value = 0
	add = money_supply_state_monthly
	add = pop_savings_monthly
}

money_circulating = {
	value = 0
	add = pop_savings
	add = private_bank_funds
	add = building_saving
	add = government_loan_fixe

	min = 1
}

#Special
total_money_supply = {
	value = 0
	add = money_supply
	add = money_supply_stockpile_by_other_country
}
percentage_money_supply_abroad = {
	value = 0
	add = money_supply_stockpile_by_other_country
	divide = total_money_supply
}

##############################""
private_bank_funds_monthly = {
	value = 0
	add = investment_pool_income

	min = 1
}

money_supply_state_25 = {
	value = money_supply_state
	multiply = 0.25
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ███╗   ██╗ █████╗ ████████╗██╗ ██████╗ ███╗   ██╗ █████╗ ██╗              ██████╗ █████╗ ██████╗  █████╗  ██████╗██╗████████╗██╗   ██╗
# ████╗  ██║██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║██╔══██╗██║             ██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║╚══██╔══╝╚██╗ ██╔╝
# ██╔██╗ ██║███████║   ██║   ██║██║   ██║██╔██╗ ██║███████║██║             ██║     ███████║██████╔╝███████║██║     ██║   ██║    ╚████╔╝
# ██║╚██╗██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║██╔══██║██║             ██║     ██╔══██║██╔═══╝ ██╔══██║██║     ██║   ██║     ╚██╔╝
# ██║ ╚████║██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║██║  ██║███████╗███████╗╚██████╗██║  ██║██║     ██║  ██║╚██████╗██║   ██║      ██║
# ╚═╝  ╚═══╝╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝ ╚═════╝╚═╝   ╚═╝      ╚═╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

national_capacity_in_gold = {
	min = 0.0001

	if = {
		limit = {
			has_law = law_type:law_gold_standard
			#no law_gold_exchange_standard
		}
		add = national_capacity
	}
	if = {
		limit = {
			has_law = law_type:law_silver_standard
		}
		add = central_bank_reserves_silver_standard_in_gold
	}
	if = {
		limit = {
			has_law = law_type:law_bimetallism_standard
		}
		add = central_bank_reserves_bimetallism_standard_in_gold
	}
}

national_capacity = {
	value = 1
	if = {
		limit = {
			or = {
				has_law = law_type:law_silver_standard
				has_law = law_type:law_bimetallism_standard
				has_law = law_type:law_gold_standard
			}
		}
		add = central_bank_reserves #en fonction du type de metal
		add = var:gold_loaned_to_central_bank_fix # en or ou en metal sion utilise le money_value_in_gold
		add = var:trade_balance_in_gold_fixe # en or ou en metal sion utilise le money_value_in_gold
	}

	min = 0.01
}


national_capacity_ratio = {
	add = national_capacity
	divide = money_supply
}
central_bank_reserves_ratio = {
	add = central_bank_reserves
	divide = national_capacity
}
gold_loaned_to_central_bank_ratio = {
	add = var:gold_loaned_to_central_bank_fix
	divide = national_capacity
}
trade_balance_in_gold_ratio = {
	add = var:trade_balance_in_gold_fixe
	divide = national_capacity
}


# national_capacity_other = { #no use for the !moment
# 	value = 0

# 	if = {
# 		limit = {
# 			has_law = law_type:law_gold_standard
# 			#no law_gold_exchange_standard
# 		}
# 		add = var:gold_loaned_to_central_bank_fix
# 		add = var:trade_balance_in_gold_fixe
# 	}
# 	if = {
# 		limit = {
# 			has_law = law_type:law_silver_standard
# 		}
# 		add = var:gold_loaned_to_central_bank_fix
# 		add = var:trade_balance_in_gold_fixe
# 		multiply = silver_to_gold_rate #silver_to_gold_rate
# 	}
# 	if = {
# 		limit = {
# 			has_law = law_type:law_bimetallism_standard
# 		}
# 		add = var:gold_loaned_to_central_bank_fix
# 		add = var:trade_balance_in_gold_fixe
# 		multiply = bimetallic_rate_silver_to_gold #silver_to_gold_rate
# 	}
# }

############################################################################################################################################################
#central_bank_reserves
############################################################################################################################################################

central_bank_reserves = {
	value = 0.01
	add = central_bank_metal_reserves_state
}

central_bank_metal_reserves_state = {
	if = {
		limit = {
			or = {
				has_law = law_type:law_gold_standard
				has_law = law_type:law_gold_exchange_standard
			}
		}
		add = gold_state_native_for_stockpile
	}
	if = {
		limit = {
			has_law = law_type:law_silver_standard
		}
		add = silver_state_native_for_stockpile
	}
	if = {
		limit = {
			has_law = law_type:law_bimetallism_standard
		}
		add = bimetallic_state_native_for_stockpile
	}
}

central_bank_metal_reserves_state_per_month = {
	if = {
		limit = {
			or = {
				has_law = law_type:law_gold_standard
				has_law = law_type:law_gold_exchange_standard
			}
		}
		add = stockpiling_central_bank_metal_reserves_gold_standard
	}
	if = {
		limit = {
			has_law = law_type:law_silver_standard
		}
		add = stockpiling_central_bank_metal_reserves_silver_standard
	}
	if = {
		limit = {
			has_law = law_type:law_bimetallism_standard
		}
		add = stockpiling_central_bank_metal_reserves_bimetallism_standard
	}
}

gold_state_native_for_stockpile = {
	value = 0
	add = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = central_bank_historic_place
				}
				add = var:gold_state_1
			}
		}
	}
}
silver_state_native_for_stockpile = {
	value = 0
	add = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = central_bank_historic_place
				}
				add = var:silver_state_1
			}
		}
	}
}
bimetallic_state_native_for_stockpile = {
	value = 0
	add = gold_state_native_for_stockpile
	add = silver_state_native_for_stockpile
}

##############
#monetary_systeme_silver_standard
##############
central_bank_metal_reserves_state_silver_standard = {
	value = silver_state_native_for_stockpile
}
central_bank_reserves_silver_standard = {
	value = central_bank_metal_reserves_state_silver_standard
	add = var:gold_loaned_to_central_bank_fix
	add = var:trade_balance_in_gold_fixe
}
central_bank_reserves_silver_standard_in_gold = {
	value = central_bank_metal_reserves_state_silver_standard
	add = var:gold_loaned_to_central_bank_fix
	add = var:trade_balance_in_gold_fixe
	multiply = silver_to_gold_rate
}
money_value_silver_standard = {
	value = central_bank_reserves_silver_standard
	divide = money_supply
}
money_value_silver_standard_in_gold = {
	value = money_value_silver_standard
	multiply = silver_to_gold_rate
}
stockpiling_central_bank_metal_reserves_silver_standard = {
	value = 0
	#add = var:stockpiling_silver_var_2

	add = silver_market_goods_sell_orders

	#multiply = 1000
	multiply = 100

	multiply = 4 #month


	multiply = gold_to_silver_rate

}
##############
#monetary_systeme_bimetallism_standard
##############
central_bank_metal_reserves_state_bimetallism_standard = {
	value = bimetallic_state_native_for_stockpile
}
central_bank_reserves_bimetallism_standard = {
	value = central_bank_metal_reserves_state_bimetallism_standard
	add = var:gold_loaned_to_central_bank_fix
	add = var:trade_balance_in_gold_fixe
}
central_bank_reserves_bimetallism_standard_in_gold = {
	value = central_bank_reserves_bimetallism_standard
	add = var:gold_loaned_to_central_bank_fix
	add = var:trade_balance_in_gold_fixe
	multiply = bimetallic_rate_silver_to_gold
}
money_value_bimetallism_standard = {
	value = central_bank_reserves_bimetallism_standard
	divide = money_supply
}
money_value_bimetallism_standard_in_gold = {
	value = money_value_bimetallism_standard #pb avec le fiatt stta	andar affiche 0 ddonc je l'ai remis sinnon just money_value
	multiply = bimetallic_rate_silver_to_gold
}
stockpiling_central_bank_metal_reserves_bimetallism_standard = {
	value = 0

	add = {
		add = gold_market_goods_sell_orders
	#	multiply = 1000
		multiply = 100
		multiply = 4 #month
		multiply = bimetallic_rate_gold_to_silver
	}
	add = {
		add = silver_market_goods_sell_orders
		#multiply = 1000
		multiply = 100
		multiply = 4 #month
		multiply = bimetallic_rate_gold_to_silver
	}
}

##############
#monetary_systeme_gold_standard
##############
central_bank_metal_reserves_state_gold_standard = {
	value = gold_state_native_for_stockpile
}
central_bank_reserves_gold_standard = {
	value = central_bank_metal_reserves_state_gold_standard
	add = var:gold_loaned_to_central_bank_fix
	add = var:trade_balance_in_gold_fixe
}
money_value_gold_standard = {
	value = central_bank_reserves_gold_standard
	divide = money_supply
}
stockpiling_central_bank_metal_reserves_gold_standard = {
	value = 0

	add = {
		add = gold_market_goods_sell_orders
		#multiply = 1000
		multiply = 100
		multiply = 4 #month
	}
}

#########################
total_gold_reserves = {
	add = gold_reserves
}
percentage_gold_borrowed = {
	value = gold_loaned_to_central_bank
	divide = central_bank_reserves
}
all_gold_value_inflation = {
	value = 0
	add = central_bank_metal_reserves_state
	add = var:trade_balance_in_gold_fixe

	#add = gold_loaned_to_central_bank
}
all_gold_owned = {
	value = 0
	add = central_bank_metal_reserves_state
	add = var:trade_balance_in_gold_fixe

	#add = gold_loaned_to_central_bank
}
country_credit = {
	value = credit
	multiply = scaled_debt #credit
	#taking_loans	(Check if the country is currently running a weekly deficit and taking loans to compensate)
}
building_saving = {
	value = credit
}
private_bank_funds = {
	value = 0
	add = investment_pool
}
private_bank_funds_pourcent = {
	value = private_bank_funds
	divide = money_supply #money_circulating
}

# central_bank_metal_reserves_state_market_owner_player_side = {
# 	if = {
# 		limit = {
# 			has_law = law_type:law_gold_standard
# 		}
# 		add = player.gold_state_native_for_stockpile
# 	}
# 	if = {
# 		limit = {
# 			has_law = law_type:law_silver_standard
# 		}
# 		add = player.silver_state_native_for_stockpile
# 	}
# 	if = {
# 		limit = {
# 			has_law = law_type:law_bimetallism_standard
# 		}
# 		add = player.gold_state_native_for_stockpile
# 	}
# }
# central_bank_metal_reserves_state_market_owner_side = {
# 	if = {
# 		limit = {
# 			has_law = law_type:law_gold_standard
# 		}
# 		add = gold_state_native_for_stockpile
# 	}
# 	if = {
# 		limit = {
# 			has_law = law_type:law_silver_standard
# 		}
# 		add = silver_state_native_for_stockpile
# 	}
# 	if = {
# 		limit = {
# 			has_law = law_type:law_bimetallism_standard
# 		}
# 		add = gold_state_native_for_stockpile
# 	}
# }





# country_credit_90 = {
# 	value = credit
# 	multiply = 0.9
# }
central_bank_metal_reserves_state_to_ensure_the_conversion = {
	value = money_value_target_real
	multiply = money_supply
}

central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent = {
	value = national_capacity #central_bank_reserves
	divide = central_bank_metal_reserves_state_to_ensure_the_conversion
}

# central_bank_metal_reserves_state_to_ensure_the_conversion_75 = {
# 	value = central_bank_metal_reserves_state_to_ensure_the_conversion
# 	multiply = 0.75
# }
# gold_available_for_purchase = {
# 	value = central_bank_reserves
# 	subtract = central_bank_metal_reserves_state_to_ensure_the_conversion_75
# }
# gold_available_for_purchase_10 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.1
# }
# gold_available_for_purchase_09 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.09
# }
# gold_available_for_purchase_08 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.08
# }
# gold_available_for_purchase_07 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.07
# }
# gold_available_for_purchase_06 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.06
# }
# gold_available_for_purchase_05 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.05
# }
# gold_available_for_purchase_04 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.04
# }
# gold_available_for_purchase_03 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.03
# }
# gold_available_for_purchase_02 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.02
# }
# gold_available_for_purchase_01 = {
# 	value = gold_available_for_purchase
# 	multiply = 0.01
# }

# valid_purchasable_currency_amount_10 = {
# 	value = gold_available_for_purchase_10
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_09 = {
# 	value = gold_available_for_purchase_09
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_08 = {
# 	value = gold_available_for_purchase_08
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_07 = {
# 	value = gold_available_for_purchase_07
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_06 = {
# 	value = gold_available_for_purchase_06
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_05 = {
# 	value = gold_available_for_purchase_05
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_04 = {
# 	value = gold_available_for_purchase_04
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_03 = {
# 	value = gold_available_for_purchase_03
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_02 = {
# 	value = gold_available_for_purchase_02
# 	divide = scope:undervalued_currency_country_owner.money_value
# }
# valid_purchasable_currency_amount_01 = {
# 	value = gold_available_for_purchase_01
# 	divide = scope:undervalued_currency_country_owner.money_value
# }

valid_purchasable_currency_amount = {
	if = {
		limit  = {
			purchasable_currency_amount > valid_purchasable_currency_amount_10
		}
		add = valid_purchasable_currency_amount_10
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_10
			purchasable_currency_amount > valid_purchasable_currency_amount_9
		}
		add = valid_purchasable_currency_amount_9
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_9
			purchasable_currency_amount > valid_purchasable_currency_amount_8
		}
		add = valid_purchasable_currency_amount_8
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_8
			purchasable_currency_amount > valid_purchasable_currency_amount_7
		}
		add = valid_purchasable_currency_amount_7
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_7
			purchasable_currency_amount > valid_purchasable_currency_amount_6
		}
		add = valid_purchasable_currency_amount_6
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_6
			purchasable_currency_amount > valid_purchasable_currency_amount_5
		}
		add = valid_purchasable_currency_amount_5
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_5
			purchasable_currency_amount > valid_purchasable_currency_amount_4
		}
		add = valid_purchasable_currency_amount_4
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_4
			purchasable_currency_amount > valid_purchasable_currency_amount_3
		}
		add = valid_purchasable_currency_amount_3
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_3
			purchasable_currency_amount > valid_purchasable_currency_amount_2
		}
		add = valid_purchasable_currency_amount_2
	}
	if = {
		limit  = {
			purchasable_currency_amount < valid_purchasable_currency_amount_2
			purchasable_currency_amount > valid_purchasable_currency_amount_1
		}
		add = valid_purchasable_currency_amount_1
	}



}

############
gold_reserves_var = {
	value = gold_reserves
}
gold_reserve_rest = {
	value = gold_reserves

	subtract = var:grain_buy_price_by_price_in_gold
	subtract = var:wood_buy_price_by_price_in_gold
	subtract = var:coal_buy_price_by_price_in_gold
	subtract = var:iron_buy_price_by_price_in_gold
	subtract = var:sulfur_buy_price_by_price_in_gold
	subtract = var:lead_buy_price_by_price_in_gold
	subtract = var:oil_buy_price_by_price_in_gold
	subtract = var:dye_buy_price_by_price_in_gold
	subtract = var:silk_buy_price_by_price_in_gold
	subtract = var:rubber_buy_price_by_price_in_gold
	subtract = var:ammunition_buy_price_by_price_in_gold
	subtract = var:small_arms_buy_price_by_price_in_gold
	subtract = var:artillery_buy_price_by_price_in_gold
	subtract = var:tanks_buy_price_by_price_in_gold
	subtract = var:aeroplanes_buy_price_by_price_in_gold
	subtract = var:manowars_buy_price_by_price_in_gold
	subtract = var:ironclads_buy_price_by_price_in_gold

	subtract = var:grain_sell_price_by_price_in_gold
	subtract = var:wood_sell_price_by_price_in_gold
	subtract = var:coal_sell_price_by_price_in_gold
	subtract = var:iron_sell_price_by_price_in_gold
	subtract = var:sulfur_sell_price_by_price_in_gold
	subtract = var:lead_sell_price_by_price_in_gold
	subtract = var:oil_sell_price_by_price_in_gold
	subtract = var:dye_sell_price_by_price_in_gold
	subtract = var:silk_sell_price_by_price_in_gold
	subtract = var:rubber_sell_price_by_price_in_gold
	subtract = var:ammunition_sell_price_by_price_in_gold
	subtract = var:small_arms_sell_price_by_price_in_gold
	subtract = var:artillery_sell_price_by_price_in_gold
	subtract = var:tanks_sell_price_by_price_in_gold
	subtract = var:aeroplanes_sell_price_by_price_in_gold
	subtract = var:manowars_sell_price_by_price_in_gold
	subtract = var:ironclads_sell_price_by_price_in_gold
}
gold_reserves_var_01 = {
	value = gold_reserves_var
	multiply = 0.01
}
gold_reserves_var_02 = {
	value = gold_reserves_var
	multiply = 0.02
}
gold_reserves_var_03 = {
	value = gold_reserves_var
	multiply = 0.03
}
gold_reserves_var_04 = {
	value = gold_reserves_var
	multiply = 0.04
}
gold_reserves_var_05 = {
	value = gold_reserves_var
	multiply = 0.05
}
gold_reserves_var_06 = {
	value = gold_reserves_var
	multiply = 0.06
}
gold_reserves_var_07 = {
	value = gold_reserves_var
	multiply = 0.07
}
gold_reserves_var_08 = {
	value = gold_reserves_var
	multiply = 0.08
}
gold_reserves_var_09 = {
	value = gold_reserves_var
	multiply = 0.09
}
gold_reserves_var_10 = {
	value = gold_reserves_var
	multiply = 0.1
}
gold_reserves_var_11 = {
	value = gold_reserves_var
	multiply = 0.11
}
gold_reserves_var_12 = {
	value = gold_reserves_var
	multiply = 0.12
}
gold_reserves_var_13 = {
	value = gold_reserves_var
	multiply = 0.13
}
gold_reserves_var_25 = {
	value = gold_reserves_var
	multiply = 0.25
}
gold_reserves_var_35 = {
	value = gold_reserves_var
	multiply = 0.35
}

gold_reserves_10 = {
	value = gold_reserves_limit
	multiply = 0.10
}
gold_reserves_15 = {
	value = gold_reserves_limit
	multiply = 0.15
}
gold_reserves_20 = {
	value = gold_reserves_limit
	multiply = 0.20
}
gold_reserves_25 = {
	value = gold_reserves_limit
	multiply = 0.25
}
gold_reserves_30 = {
	value = gold_reserves_limit
	multiply = 0.23
}
gold_reserves_40 = {
	value = gold_reserves_limit
	multiply = 0.40
}
gold_reserves_50 = {
	value = gold_reserves_limit
	multiply = 0.50
}
gold_reserves_60 = {
	value = gold_reserves_limit
	multiply = 0.60
}
gold_reserves_70 = {
	value = gold_reserves_limit
	multiply = 0.70
}
gold_reserves_75 = {
	value = gold_reserves_limit
	multiply = 0.75
}
gold_reserves_80 = {
	value = gold_reserves_limit
	multiply = 0.80
}
gold_reserves_90 = {
	value = gold_reserves_limit
	multiply = 0.90
}
gold_reserves_rest = {
	value = gold_reserves_limit
	subtract = gold_reserves
}
gold_reserves_rest = {
	value = gold_reserves_limit
	subtract = gold_reserves
}
gold_reserve_compared_gold_reserves_limit = {
	value = gold_reserves
	divide = gold_reserves_limit
}

############################################################################################################################################################
#national_debt & central_bank_debt
############################################################################################################################################################

debt_issued_relative_GDP = {
	value = gdp_var
	multiply = var:debt_issued_relative_GDP_percentage
	#multiply = money_value_rapported_inflation
}
debt_issued_relative_GDP_in_currency = {
	value = debt_issued_relative_GDP
	divide = money_value_rapported_inflation
}
bond_creation_by_debt = {
	value = debt_issued_relative_GDP_in_currency
	divide = bond_price
}

credit_at_central_bank_in_gold = {
	value = var:credit_at_central_bank
	multiply = money_value_rapported_inflation
}
government_loan_fixe = {
	value = var:government_loan
}
country_minting_month = {
	add = root.modifier:country_minting_add
	multiply = {
		add = 1
		add = root.modifier:country_minting_mult
	}
	multiply = 4
}
central_bank_debt = {
	value = central_bank_metal_reserves_state_25
}
central_bank_metal_reserves_state_75 = {
	value = central_bank_metal_reserves_state_to_ensure_the_conversion
	multiply = 0.75 #central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent
	subtract = national_capacity
}
central_bank_metal_reserves_state_25 = {
	value = central_bank_metal_reserves_state_to_ensure_the_conversion
	multiply = 0.25 #central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent
	#subtract = national_capacity
}
central_bank_debt_compared_gdp = {
	value = central_bank_debt
	divide = gdp_var
}
national_debt_allowed = {
	value = gdp_var
	multiply = national_debt_allowed_relative_gdp
}
national_debt_unauthorized = {
	value = var:credit_at_central_bank
	subtract = national_debt_allowed
}
national_debt_allowed_in_gold = {
	value = var:credit_at_central_bank
	subtract = national_debt_allowed
	multiply = -1
}
national_debt_allowed_in_currency = {
	value = national_debt_allowed_in_gold
	divide = money_value_rapported_inflation
}
bond_producted = {
	value = national_debt_allowed_in_gold
	divide = bond_price
}

#debt at war
national_debt_allowed_in_gold_war = { #maximum 60% de dette en pib et minimum 16%
	value = gold_reserves_15 #15% en plus
	add = { #difference à 15%
		add = gold_reserves_15
		subtract = gold_reserves_var
	}
}
national_debt_allowed_in_currency_war = {
	value = national_debt_allowed_in_gold_war
	divide = money_value_rapported_inflation
}
bond_producted_war = {
	value = national_debt_allowed_in_gold_war
	divide = bond_price
}

credit_at_central_bank_interest_per_week_by_inflation = {
	value = credit_at_central_bank_interest_per_month_by_inflation
	multiply = 0.25
}
income_150 = {
	value = income
	multiply = 1.5
}
income_175 = {
	value = income
	multiply = 1.75
}
income_200 = {
	value = income
	multiply = 2
}
income_225 = {
	value = income
	multiply = 2.25
}
income_250 = {
	value = income
	multiply = 2.5
}
authorized_debt_interest = {
 	value = 0
	if = {
		limit = {
			expenses < income_150
		}
		add = 0.25
	}
	if = {
		limit = {
			expenses > income_150
			expenses < income_175
		}
		add = 0.20
	}
	if = {
		limit = {
			expenses > income_175
			expenses < income_200
		}
		add = 0.15
	}
	if = {
		limit = {
			expenses > income_200
			expenses < income_225
		}
		add = 0.10
	}
	if = {
		limit = {
			expenses > income_225
			expenses < income_250
		}
		add = 0.05
	}
	if = {
		limit = {
			expenses > income_250
		}
		add = 0
	}
	if = {
		limit = {
			country_credit > 0
		}
		add = -1
	}
	min = 0
}
part_budget_authorized_debt_interest = {
	value = income
	multiply = authorized_debt_interest  #par du budget à l'equilibre que la dette doit attendre pour etre suportable
}
national_debt_refund_more_25 = {
	value = part_budget_authorized_debt_interest
	multiply = 4
	multiply = 12
	divide = country_interest
}
national_debt_refund_more_25_at_refund = {
	value = var:credit_at_central_bank
	subtract = national_debt_refund_more_25
}
national_debt = {
	value = 0
	#add = credit
	add = country_credit
	add = var:credit_at_central_bank
	#add = central_bank_debt
	#add = external_debt
}
national_debt_compared_gdp = {
	value = national_debt
	divide = gdp_var
}

########################
#debt_issued_relative_GDP
########################
credit_at_central_bank_interest_1_years = {
	add = var:credit_at_central_bank
	multiply = interest_value_10Y #plus simple avec le taux moddé
	#multiply = country_interest #interest_value_10Y = on calcule par le taux vanila qui représente le taux de rémunération de la devise ou taux directeur/// au taux du marché
}
credit_at_central_bank_interest_per_years = {
	value = credit_at_central_bank_interest_1_years
}
credit_at_central_bank_interest_per_month = {
	value = credit_at_central_bank_interest_per_years
	divide = 120 # au lieu de 12 ce qui fait que les interet sont concidérer sur 10ans ou lieu de sur 1ans
}
credit_at_central_bank_interest_per_month_by_inflation = { #modifier divise par 4
	value = credit_at_central_bank_interest_per_month
	multiply = {
		value = 1
		add = inflation_value
	}
}

########################
#debt_issued_relative_GDP
########################
credit_at_central_bank_interest_1_years_added = {
	add = debt_issued_relative_GDP
	multiply = interest_value_10Y #interest_value_10Y = on calcule par le taux vanila qui représente le taux de rémunération de la devise ou taux directeur/// au taux du marché
}
credit_at_central_bank_interest_per_years_added = {
	value = credit_at_central_bank_interest_1_years_added
}
credit_at_central_bank_interest_per_month_added = {
	value = credit_at_central_bank_interest_per_years_added
	divide = 120 # au lieu de 12 ce qui fait que les interet sont concidérer sur 10ans ou lieu de sur 1ans
}

refund_credit_at_central_bank_in_metal = {
	value = var:refund_credit_at_central_bank
	multiply = money_value
}

########################
#metal pro
########################
gold_market_goods_sell_orders = {
	if  = {
		limit = {
			not = {
				or = {
					is_subject_custom_trigger = yes
					market_owner_is_root_univ_with_buiding = yes
				}
			}
		}
		value = {
			add = owner.market.mg:gold.market_goods_sell_orders
		}
	}
}
silver_market_goods_sell_orders = {
	if  = {
		limit = {
			not = {
				or = {
					is_subject_custom_trigger = yes
					market_owner_is_root_univ_with_buiding = yes
				}
			}
		}
		value = {
			add = owner.market.mg:silver.market_goods_sell_orders
		}
	}
}
stockpiling_central_bank_metal_reserves_var_0 = {
	value = var:stockpiling_central_bank_metal_reserves_var_1
}

debt_in_gold_sc = {
	value = var:debt_in_gold
}
excess_in_gold_sc = {
	value = var:excess_in_gold
}
delta_in_gold_sc = {
	value = excess_in_gold_sc
	subtract = debt_in_gold_sc
}


global_silver_production_real = {
	add = silver_market_goods_sell_orders
	subtract = market.mg:silver.market_goods_imports
}
global_silver_production_flux = {
	every_country  = {
		limit = {
			#silver_market_goods_sell_orders > 0
			global_silver_production_real > 0
		}
		add = global_silver_production_real
	}
}
global_silver_production = {
	value = 1
	add = global_var:global_silver_production_fix
}

global_gold_production_real = {
	add = gold_market_goods_sell_orders
	subtract = market.mg:gold.market_goods_imports
}
global_gold_production_flux = {
	every_country  = {
		limit = {
			#gold_market_goods_sell_orders > 0
			global_gold_production_real > 0
		}
		add = global_gold_production_real
	}
}
global_gold_production = {
	value = 1
	add = global_var:global_gold_production_fix
}

silver_to_gold_rate = { # = gold_silver_ rate
	value = global_gold_production
	divide = global_silver_production
	max = 0.2
}
gold_to_silver_rate = {
	value = 1
	divide = silver_to_gold_rate
}
gold_to_silver_rate_x_2 = {
	value = gold_to_silver_rate
	multiply = 2
}

weight_gold = {
	value = gold_state_native_for_stockpile
	divide  = {
		value = gold_state_native_for_stockpile
		add = silver_state_native_for_stockpile
	}
}
weight_silver = {
	value = silver_state_native_for_stockpile
	divide  = {
		value = gold_state_native_for_stockpile
		add = silver_state_native_for_stockpile
	}
}

bimetallic_rate_silver_to_gold = {
	value = 0
	add = weight_gold
	add = {
		value = weight_silver
		multiply = silver_to_gold_rate
	}
	min = 0
}
bimetallic_rate_gold_to_silver = {
	value = 1
	divide = bimetallic_rate_silver_to_gold
}

gold_to_silver_law = {
	value = 1
	if = {
		limit = {
			has_law = law_type:law_silver_standard
		}
		add = gold_to_silver_rate
	}
	min = 0
}

bimetallic_rate_gold_to_silver_law = {
	value = 1
	if = {
		limit = {
			has_law = law_type:law_bimetallism_standard
		}
		add = bimetallic_rate_gold_to_silver
	}
}


rate_by_law_metal_type = {
	value = 0
	if = {
		limit = {
			or = {
				has_law = law_type:law_gold_standard
				has_law = law_type:law_gold_exchange_standard
			}
		}
		add = 1
	}
	if = {
		limit = {
			has_law = law_type:law_silver_standard
		}
		add = gold_to_silver_rate
	}
	if = {
		limit = {
			has_law = law_type:law_bimetallism_standard
		}
		add = bimetallic_rate_gold_to_silver
	}
	min = 0.0001
}

rate_by_law_metal_type_2 = {
	value = 0
	if = {
		limit = {
			or = {
				has_law = law_type:law_gold_standard
				has_law = law_type:law_gold_exchange_standard
			}
		}
		add = 1
	}
	if = {
		limit = {
			has_law = law_type:law_silver_standard
		}
		add = silver_to_gold_rate
	}
	if = {
		limit = {
			has_law = law_type:law_bimetallism_standard
		}
		add = bimetallic_rate_silver_to_gold
	}
	min = 0.0001
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ███████╗██╗  ██╗ ██████╗██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███████╗    ██████╗  █████╗ ████████╗███████╗    ███╗   ███╗ █████╗ ██████╗ ██╗  ██╗███████╗████████╗
# ██╔════╝╚██╗██╔╝██╔════╝██║  ██║██╔══██╗████╗  ██║██╔════╝ ██╔════╝    ██╔══██╗██╔══██╗╚══██╔══╝██╔════╝    ████╗ ████║██╔══██╗██╔══██╗██║ ██╔╝██╔════╝╚══██╔══╝
# █████╗   ╚███╔╝ ██║     ███████║███████║██╔██╗ ██║██║  ███╗█████╗      ██████╔╝███████║   ██║   █████╗      ██╔████╔██║███████║██████╔╝█████╔╝ █████╗     ██║
# ██╔══╝   ██╔██╗ ██║     ██╔══██║██╔══██║██║╚██╗██║██║   ██║██╔══╝      ██╔══██╗██╔══██║   ██║   ██╔══╝      ██║╚██╔╝██║██╔══██║██╔══██╗██╔═██╗ ██╔══╝     ██║
# ███████╗██╔╝ ██╗╚██████╗██║  ██║██║  ██║██║ ╚████║╚██████╔╝███████╗    ██║  ██║██║  ██║   ██║   ███████╗    ██║ ╚═╝ ██║██║  ██║██║  ██║██║  ██╗███████╗   ██║
# ╚══════╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝    ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝    ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝   ╚═╝
#
# ██████╗  █████╗ ███╗   ██╗███████╗██╗
# ██╔══██╗██╔══██╗████╗  ██║██╔════╝██║
# ██████╔╝███████║██╔██╗ ██║█████╗  ██║
# ██╔═══╝ ██╔══██║██║╚██╗██║██╔══╝  ██║
# ██║     ██║  ██║██║ ╚████║███████╗███████╗
# ╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝╚══════╝╚══════╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#exchange_rate
exchange_rate_1_XXX = {
	value = player.money_value_in_gold
	divide = money_value_in_gold
}
exchange_rate_XXX_1 = {
	value = money_value_in_gold
	divide = player.money_value_in_gold
}

exchange_rate_for_international_trade_buy_market_panel = {
	value = player.money_value_in_gold
	divide = money_value_in_gold
}
exchange_rate_for_international_trade_buy_for_target_market_panel = {
	value = money_value_in_gold
	divide = player.money_value_in_gold
}

#######
exchange_rate_our_reference = {    #(FRF/GBP = 0.25) = (1FRF = 0.25 GBP)
	value = money_value_in_gold
	divide = global_monetary_reference
}
exchange_rate_reference_our = {  #(GBP/FRF = 15) = (1GBP = 15 FRF)
	value = global_monetary_reference
	divide = money_value_in_gold
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ██╗███╗   ██╗████████╗███████╗██████╗ ███████╗███████╗████████╗    ██╗   ██╗ █████╗ ██╗     ██╗   ██╗███████╗
# ██║████╗  ██║╚══██╔══╝██╔════╝██╔══██╗██╔════╝██╔════╝╚══██╔══╝    ██║   ██║██╔══██╗██║     ██║   ██║██╔════╝
# ██║██╔██╗ ██║   ██║   █████╗  ██████╔╝█████╗  ███████╗   ██║       ██║   ██║███████║██║     ██║   ██║█████╗
# ██║██║╚██╗██║   ██║   ██╔══╝  ██╔══██╗██╔══╝  ╚════██║   ██║       ╚██╗ ██╔╝██╔══██║██║     ██║   ██║██╔══╝
# ██║██║ ╚████║   ██║   ███████╗██║  ██║███████╗███████║   ██║        ╚████╔╝ ██║  ██║███████╗╚██████╔╝███████╗
# ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝   ╚═╝         ╚═══╝  ╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚══════╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

country_interest = {
    add = root.modifier:country_loan_interest_rate_add
    multiply = {
        add = 1
        add = root.modifier:country_loan_interest_rate_mult
    }
}
interest_value_5Y = {
	value = interest_value_10Y
	multiply = 0.5 #var:interest_value_5Y_variation
}
interest_value_10Y = {
	value = var:target_interest_rate
	if = {
		limit  = {
			not = {
				country_credit_rating_national_debt_compared_gdp_malus_100_on_interest_rate = 1
			}
		}
		multiply = country_credit_rating_national_debt_compared_gdp_malus_100_on_interest_rate
	}
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ███████╗ ██████╗ ██████╗ ███████╗██╗  ██╗    ██╗     ██╗███╗   ███╗██╗████████╗ █████╗ ████████╗██╗ ██████╗ ███╗   ██╗
# ██╔════╝██╔═══██╗██╔══██╗██╔════╝╚██╗██╔╝    ██║     ██║████╗ ████║██║╚══██╔══╝██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║
# █████╗  ██║   ██║██████╔╝█████╗   ╚███╔╝     ██║     ██║██╔████╔██║██║   ██║   ███████║   ██║   ██║██║   ██║██╔██╗ ██║
# ██╔══╝  ██║   ██║██╔══██╗██╔══╝   ██╔██╗     ██║     ██║██║╚██╔╝██║██║   ██║   ██╔══██║   ██║   ██║██║   ██║██║╚██╗██║
# ██║     ╚██████╔╝██║  ██║███████╗██╔╝ ██╗    ███████╗██║██║ ╚═╝ ██║██║   ██║   ██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║
# ╚═╝      ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝    ╚══════╝╚═╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

##################
sell_limit_currency_var_0 = {
	value = 0
	if = {
		limit = {
			country_rank = rank_value:great_power
		}
		add = 100000000
	}
	if = {
		limit = {
			country_rank = rank_value:major_power
		}
		add = 80000000
	}
	if = {
		limit = {
			country_rank = rank_value:unrecognized_major_power
		}
		add = 60000000
	}
	if = {
		limit = {
			country_rank = rank_value:unrecognized_regional_power
		}
		add = 4000000
	}
	if = {
		limit = {
			country_rank = rank_value:minor_power
		}
		add = 20000000
	}
	if = {
		limit = {
			country_rank = rank_value:unrecognized_power
		}

	}
}
sell_limit_currency_var_rest = {
	value = sell_limit_currency_var_0
	subtract = var:sell_limit_currency_var_1
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ███████╗████████╗ ██████╗  ██████╗██╗  ██╗██████╗ ██╗██╗     ██╗███╗   ██╗ ██████╗          ██████╗██╗   ██╗██████╗ ██████╗ ███████╗███╗   ██╗ ██████╗██╗   ██╗     ███████╗████████╗ █████╗ ████████╗
# ██╔════╝╚══██╔══╝██╔═══██╗██╔════╝██║ ██╔╝██╔══██╗██║██║     ██║████╗  ██║██╔════╝         ██╔════╝██║   ██║██╔══██╗██╔══██╗██╔════╝████╗  ██║██╔════╝╚██╗ ██╔╝     ██╔════╝╚══██╔══╝██╔══██╗╚══██╔══╝
# ███████╗   ██║   ██║   ██║██║     █████╔╝ ██████╔╝██║██║     ██║██╔██╗ ██║██║  ███╗        ██║     ██║   ██║██████╔╝██████╔╝█████╗  ██╔██╗ ██║██║      ╚████╔╝      ███████╗   ██║   ███████║   ██║
# ╚════██║   ██║   ██║   ██║██║     ██╔═██╗ ██╔═══╝ ██║██║     ██║██║╚██╗██║██║   ██║        ██║     ██║   ██║██╔══██╗██╔══██╗██╔══╝  ██║╚██╗██║██║       ╚██╔╝       ╚════██║   ██║   ██╔══██║   ██║
# ███████║   ██║   ╚██████╔╝╚██████╗██║  ██╗██║     ██║███████╗██║██║ ╚████║╚██████╔╝███████╗╚██████╗╚██████╔╝██║  ██║██║  ██║███████╗██║ ╚████║╚██████╗   ██║███████╗███████║   ██║   ██║  ██║   ██║
# ╚══════╝   ╚═╝    ╚═════╝  ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚══════╝ ╚═════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═══╝ ╚═════╝   ╚═╝╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝
#
# ███████╗        ██╗███╗   ██╗         ██████╗  ██████╗ ██╗     ██████╗
# ██╔════╝        ██║████╗  ██║        ██╔════╝ ██╔═══██╗██║     ██╔══██╗
# █████╗          ██║██╔██╗ ██║        ██║  ███╗██║   ██║██║     ██║  ██║
# ██╔══╝          ██║██║╚██╗██║        ██║   ██║██║   ██║██║     ██║  ██║
# ███████╗███████╗██║██║ ╚████║███████╗╚██████╔╝╚██████╔╝███████╗██████╔╝
# ╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝ ╚═════╝  ╚═════╝ ╚══════╝╚═════╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

all_currency_in_gold_10 = {
	value = all_currency_in_gold
	multiply = 0.1
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

# ██╗███╗   ██╗███████╗██╗      █████╗ ████████╗██╗ ██████╗ ███╗   ██╗
# ██║████╗  ██║██╔════╝██║     ██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║
# ██║██╔██╗ ██║█████╗  ██║     ███████║   ██║   ██║██║   ██║██╔██╗ ██║
# ██║██║╚██╗██║██╔══╝  ██║     ██╔══██║   ██║   ██║██║   ██║██║╚██╗██║
# ██║██║ ╚████║██║     ███████╗██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║
# ╚═╝╚═╝  ╚═══╝╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

inflation_value_for_currency = {
	value = 100
	if = {
		limit = {
			inflation_value_100 > 0
		}
		subtract = inflation_value_100
	}
	if = {
		limit = {
			inflation_value_100 < 0
		}
		subtract = inflation_value_100
	}
	divide = 100
}
inflation_value_100 = {
	value = inflation_value
	multiply = 100
}
inflation_value = {
	value = 0
	add = var:inflation_on_consumer_goods_rolling_inflation_6_months
	add = var:inflation_on_energy_rolling_inflation_6_months
	add = var:inflation_on_raw_material_rolling_inflation_6_months
	add = var:inflation_on_manufactured_goods_rolling_inflation_6_months
	add = var:inflation_on_military_equipment_rolling_inflation_6_months
	add = money_value_dif_01_rolling_inflation_6_months_limited
	add = monetary_policy_inflation
}

money_value_dif_01_rolling_inflation_6_months_limited = {
	add = var:money_value_dif_01_rolling_inflation_6_months

	# if = {
	# 	limit = {
	# 		not = {
	# 			has_modifier = foreign_exchange_controls
	# 		}
	# 	}
	# 	max = 0.1
	# 	min = -0.1
	# }

	max = 0.1
	min = -0.1
}

inflation_value_for_modifier = {
	value = inflation_value
	max = 1
	min = -1
}

#inflation_on_consumer_goods
inflation_on_consumer_goods_market_value = {
	add = market.inflation_on_consumer_goods
}
inflation_on_consumer_goods = {
	add = {
		market = {
			mg:grain = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:fish = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:fabric = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:clothes = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:furniture = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:paper = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:services = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:transportation = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:porcelain = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:meat = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:fruit = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:wine = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:tea = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:tobacco = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:opium = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:automobiles = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:telephones = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:radios = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:luxury_clothes = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:luxury_furniture = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:fine_art = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
		}
	}
	divide = {
		value = 0.1
		add = market.mg:grain.market_goods_buy_orders
		add = market.mg:fish.market_goods_buy_orders
		add = market.mg:fabric.market_goods_buy_orders
		add = market.mg:clothes.market_goods_buy_orders
		add = market.mg:furniture.market_goods_buy_orders
		add = market.mg:paper.market_goods_buy_orders
		add = market.mg:services.market_goods_buy_orders
		add = market.mg:transportation.market_goods_buy_orders
		add = market.mg:porcelain.market_goods_buy_orders
		add = market.mg:meat.market_goods_buy_orders
		add = market.mg:fruit.market_goods_buy_orders
		add = market.mg:wine.market_goods_buy_orders
		add = market.mg:tea.market_goods_buy_orders
		add = market.mg:tobacco.market_goods_buy_orders
		add = market.mg:opium.market_goods_buy_orders
		add = market.mg:automobiles.market_goods_buy_orders
		add = market.mg:telephones.market_goods_buy_orders
		add = market.mg:radios.market_goods_buy_orders
		add = market.mg:luxury_clothes.market_goods_buy_orders
		add = market.mg:luxury_furniture.market_goods_buy_orders
		add = market.mg:fine_art.market_goods_buy_orders
	}
}
inflation_on_consumer_goods_market_value_abs = {
	value = 1
	if = {
		limit = {
			inflation_on_consumer_goods_market_value > 0
		}
		add = inflation_on_consumer_goods_market_value
	}
	if = {
		limit = {
			inflation_on_consumer_goods_market_value < 0
		}
		subtract = inflation_on_consumer_goods_market_value
	}
}

#inflation_on_energy
inflation_on_energy_market_value = {
	add = market.inflation_on_energy
}
inflation_on_energy = {
	add = {
		market = {
			mg:wood = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:electricity = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:coal = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:oil = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
		}
	}
	divide = {
		value = 0.1
		add = market.mg:wood.market_goods_buy_orders
		add = market.mg:electricity.market_goods_buy_orders
		add = market.mg:hardwood.market_goods_buy_orders
		add = market.mg:coal.market_goods_buy_orders
		add = market.mg:oil.market_goods_buy_orders
	}
}
inflation_on_energy_market_value_abs = {
	value = 1
	if = {
		limit = {
			inflation_on_energy_market_value > 0
		}
		add = inflation_on_energy_market_value
	}
	if = {
		limit = {
			inflation_on_energy_market_value < 0
		}
		subtract = inflation_on_energy_market_value
	}
}

#inflation_on_raw_material
inflation_on_raw_material_market_value = {
	add = market.inflation_on_raw_material
}
inflation_on_raw_material = {
	add = {
		market = {
			mg:silk = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:dye = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:sulfur = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:iron = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:lead = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:rubber = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
		}
	}
	divide = {
		value = 0.1
		add = market.mg:silk.market_goods_buy_orders
		add = market.mg:dye.market_goods_buy_orders
		add = market.mg:hardwood.market_goods_buy_orders
		add = market.mg:sulfur.market_goods_buy_orders
		add = market.mg:iron.market_goods_buy_orders
		add = market.mg:lead.market_goods_buy_orders
		add = market.mg:rubber.market_goods_buy_orders
	}
}
inflation_on_raw_material_market_value_abs = {
	value = 1
	if = {
		limit = {
			inflation_on_raw_material_market_value > 0
		}
		add = inflation_on_raw_material_market_value
	}
	if = {
		limit = {
			inflation_on_raw_material_market_value < 0
		}
		subtract = inflation_on_raw_material_market_value
	}
}

#inflation_on_manufactured_goods
inflation_on_manufactured_goods_market_value = {
	add = market.inflation_on_manufactured_goods
}
inflation_on_manufactured_goods = {
	value = 0
	add = {
		market = {
			mg:clippers = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:steamers = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:engines = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:steel = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:glass = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:fertilizer = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:tools = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:explosives = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
		}
	}
	divide = {
		value = 0.1
		add = market.mg:clippers.market_goods_buy_orders
		add = market.mg:steamers.market_goods_buy_orders
		add = market.mg:hardwood.market_goods_buy_orders
		add = market.mg:engines.market_goods_buy_orders
		add = market.mg:steel.market_goods_buy_orders
		add = market.mg:glass.market_goods_buy_orders
		add = market.mg:fertilizer.market_goods_buy_orders
		add = market.mg:tools.market_goods_buy_orders
		add = market.mg:explosives.market_goods_buy_orders
	}
}
inflation_on_manufactured_goods_market_value_abs = {
	value = 1
	if = {
		limit = {
			inflation_on_manufactured_goods_market_value > 0
		}
		add = inflation_on_manufactured_goods_market_value
	}
	if = {
		limit = {
			inflation_on_manufactured_goods_market_value < 0
		}
		subtract = inflation_on_manufactured_goods_market_value
	}
}

#inflation_on_military_equipment
inflation_on_military_equipment_market_value = {
	add = market.inflation_on_military_equipment
}
inflation_on_military_equipment = {
	value = 0
	add  = {
		market = {
			mg:ammunition = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:small_arms = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:artillery = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:tanks = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:aeroplanes = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:manowars = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
			mg:ironclads = {
				add = {
					add = market_goods_pricier
					multiply = market_goods_buy_orders
				}
			}
		}
	}
	divide = {
		value = 0.1
		add = market.mg:ammunition.market_goods_buy_orders
		add = market.mg:small_arms.market_goods_buy_orders
		add = market.mg:artillery.market_goods_buy_orders
		add = market.mg:tanks.market_goods_buy_orders
		add = market.mg:aeroplanes.market_goods_buy_orders
		add = market.mg:manowars.market_goods_buy_orders
		add = market.mg:ironclads.market_goods_buy_orders
	}
}
inflation_on_military_equipment_market_value_abs = {
	value = 1
	if = {
		limit = {
			inflation_on_military_equipment_market_value > 0
		}
		add = inflation_on_military_equipment_market_value
	}
	if = {
		limit = {
			inflation_on_military_equipment_market_value < 0
		}
		subtract = inflation_on_military_equipment_market_value
	}
}

#monetary_policy_inflation
monetary_policy_inflation = {
	add = var:monetary_policy_inflation
	divide = 100
}

cumulative_inflation_since_beginning = {
	value = var:cumulative_inflation_since_beginning
}

# cumulative_inflation_1_year = {
# 	value = var:cumulative_inflation_1_year_1
# 	value = var:cumulative_inflation_1_year_2
# }
cumulative_inflation_5_year = {
	value = 0
	add = var:cumulative_inflation_5_year_1
	add = var:cumulative_inflation_5_year_2
	add = var:cumulative_inflation_5_year_3
	add = var:cumulative_inflation_5_year_4
	add = var:cumulative_inflation_5_year_5
}
cumulative_inflation_10_year = {
	value = 0
	add = var:cumulative_inflation_10_year_1
	add = var:cumulative_inflation_10_year_2
	add = var:cumulative_inflation_10_year_3
	add = var:cumulative_inflation_10_year_4
	add = var:cumulative_inflation_10_year_5
	add = var:cumulative_inflation_10_year_6
	add = var:cumulative_inflation_10_year_7
	add = var:cumulative_inflation_10_year_8
	add = var:cumulative_inflation_10_year_9
	add = var:cumulative_inflation_10_year_10
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

money_value_median_in_silver = {
	value = global_var:money_value_median
	multiply = gold_to_silver_rate
}

money_value_median_1_25 = {
	value = global_var:money_value_median
	multiply = 1.25
}

money_value_median_0_75 = {
	value = global_var:money_value_median
	multiply = 0.75
}

money_value_median_and_money_value_in_gold_ratio = {
	value = money_value_in_gold
	divide = global_var:money_value_median
}

money_value_median_0_5 = {
	value = global_var:money_value_median
	multiply = 0.5
}

money_value_median_2_1 = {
	value = global_var:money_value_median
	multiply = 2.1
}

revaluation_money_value_max = {
	value = global_var:money_value_median
	multiply = 2
	multiply = rate_by_law_metal_type
}

devaluation_money_value_target_trigger_var = {
	value = 0
	if  = {
		limit = {
			devaluation_money_value_target_trigger = yes
		}
		add = 1
	}
}

revaluation_money_value_target_trigger_var = {
	value = 0
	if  = {
		limit = {
			revaluation_money_value_target_trigger = yes
		}
		add = 1
	}
}

devaluation_money_value_target = {
	value = 0
	# if = {
	# 	limit = { #cherche à dévaouue à 10% de la valeuur médianne
	# 		money_value_in_gold > global_var:money_value_median
	# 	}
	# 	value = global_var:money_value_median
	# 	multiply = 0.75
	# 	multiply = rate_by_law_metal_type
	# }
	# if = {
	# 	limit = { #cherrche une valeur d'enttrre 2  entre la médiane et  la valeur actuel
	# 		money_value_in_gold < global_var:money_value_median
	# 		money_value_in_gold > money_value_median_0_5
	# 	}
	# 	value = money_value_in_gold
	# 	multiply = 0.75
	# 	multiply = rate_by_law_metal_type
	# }
	# if = { 
	# 	limit = { #cherche àà attendre 75% de la médiane //  fera cerrtainement augmennté le central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent
	# 		money_value_in_gold < money_value_median_0_5
	# 	}
	# 	value = global_var:money_value_median
	# 	multiply = 0.75
	# 	multiply = rate_by_law_metal_type
	# }


	# 	#unniquemennt si la  valeur est  de  base inféérieur  à  valeur moyennne cherche  à révalué le plus proche de la valauer médiuane enn avançannt de 5%

	# if = { 
	# 	#0.9
	# 	limit = {
	# 		central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent < 0.9
	# 	}

	# 	global_var:money_value_median

	# 	var:money_value_target_1

	# 	multiply = rate_by_law_metal_type

	if = { 
		#1.1
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1
			money_value_median_and_money_value_in_gold_ratio < 1.1
		}
		value = global_var:money_value_median
		multiply = rate_by_law_metal_type
	}
	if = { 
		#1.1
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1.1
		}
		value = global_var:money_value_median
		multiply = 1
		multiply = rate_by_law_metal_type
	}
	if = { 
		#1.2
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1.2
		}
		value = global_var:money_value_median
		multiply = 1.1
		multiply = rate_by_law_metal_type
	}
	if = { 
		#1.3
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1.3
		}
		value = global_var:money_value_median
		multiply = 1.2
		multiply = rate_by_law_metal_type
	}
	if = { 
		#1.4
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1.4
		}
		value = global_var:money_value_median
		multiply = 1.3
		multiply = rate_by_law_metal_type
	}
	if = { 
		#1.5
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1.5
		}
		value = global_var:money_value_median
		multiply = 1.4
		multiply = rate_by_law_metal_type
	}
	if = { 
		#1.6
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1.6
		}
		value = global_var:money_value_median
		multiply = 1.5
		multiply = rate_by_law_metal_type
	}
	if = { 
		#1.7
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1.7
		}
		value = global_var:money_value_median
		multiply = 1.6
		multiply = rate_by_law_metal_type
	}
	if = { 
		#1.8
		limit = {
			money_value_median_and_money_value_in_gold_ratio > 1.8
		}
		value = global_var:money_value_median
		multiply = 1.7
		multiply = rate_by_law_metal_type
	}

	if = { 
		#
		limit = {
			var:money_value_target_1 > revaluation_money_value_max  
		}
		value = revaluation_money_value_max  
	}
}
revaluation_money_value_target = {
	value = 0

	if = { 
		limit = {
			money_value_median_and_money_value_in_gold_ratio <  1 
			money_value_median_and_money_value_in_gold_ratio > 0.9
		}
		value = global_var:money_value_median
		multiply = rate_by_law_metal_type
	}

	if = { 
		#0.8
		limit = {
			money_value_median_and_money_value_in_gold_ratio < 0.9
		}
		value = global_var:money_value_median
		multiply = 1
		multiply = rate_by_law_metal_type
	}
	if = { 
		#0.8
		limit = {
			money_value_median_and_money_value_in_gold_ratio < 0.8
		}
		value = global_var:money_value_median
		multiply = 0.9
		multiply = rate_by_law_metal_type
	}
	if = { 
		#0.7
		limit = {
			money_value_median_and_money_value_in_gold_ratio < 0.7
		}
		value = global_var:money_value_median
		multiply = 0.8
		multiply = rate_by_law_metal_type
	}
	if = { 
		#0.6
		limit = {
			money_value_median_and_money_value_in_gold_ratio < 0.6
		}
		value = global_var:money_value_median
		multiply = 0.7
		multiply = rate_by_law_metal_type
	}
	if = { 
		#0.5
		limit = {
			money_value_median_and_money_value_in_gold_ratio < 0.5
		}
		value = global_var:money_value_median
		multiply = 0.6
		multiply = rate_by_law_metal_type
	}
	if = { 
		#0.4
		limit = {
			money_value_median_and_money_value_in_gold_ratio < 0.4
		}
		value = global_var:money_value_median
		multiply = 0.5
		multiply = rate_by_law_metal_type
	}
	if = { 
		#0.3
		limit = {
			money_value_median_and_money_value_in_gold_ratio < 0.3
		}
		value = global_var:money_value_median
		multiply = 0.4
		multiply = rate_by_law_metal_type
	}
	if = { 
		#0.2
		limit = {
			money_value_median_and_money_value_in_gold_ratio < 0.2
		}
		value = global_var:money_value_median
		multiply = 0.3
		multiply = rate_by_law_metal_type
	}

	max = revaluation_money_value_max
}
overlord_money_value_target = {
	value = overlord.var:money_value_target_1
}

#score old
#brace
	# revaluation_score= {
	# 	value = 0
	# 	add = revaluation_score_credit_rating
	# 	add = revaluation_score_sol
	# 	add = revaluation_score_arable_land_country
	# 	add = revaluation_sea_acces
	# 	add = revaluation_debt

	# 	# if = {
	# 	# 	limit = {
	# 	# 		central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent < 0.75
	# 	# 	}
	# 	# 	multiply = 0
	# 	# }
	# }
	# revaluation_score_2 = {
	# 	value = revaluation_score
	# 	multiply = 2
	# }
	# revaluation_score_credit_rating = {
	# 	value = 0
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_AAA
	# 		}
	# 		add = 1
	# 	}
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_AA
	# 		}
	# 		add = 2
	# 	}
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_A
	# 		}
	# 		add = 3
	# 	}
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_BBB
	# 		}
	# 		add = 4
	# 	}
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_BB
	# 		}
	# 		add = 5
	# 	}
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_B
	# 		}
	# 		add = 6
	# 	}
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_CCC
	# 		}
	# 		add = 7
	# 	}
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_CC
	# 		}
	# 		add = 8
	# 	}
	# 	if = {
	# 		limit = {
	# 			has_modifier = country_credit_rating_C
	# 		}
	# 		add = 9
	# 	}
	# }
	# revaluation_score_sol = {
	# 	value = 0
	# 	if = {
	# 		limit  = {
	# 			root.average_sol > 6
	# 			root.average_sol < 7
	# 		}
	# 		add = 1
	# 	}
	# 	#sol
	# 	if = {
	# 		limit  = {
	# 			root.average_sol > 7
	# 			root.average_sol < 8
	# 		}
	# 		add = 2
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.average_sol > 8
	# 			root.average_sol < 9
	# 		}
	# 		add = 3
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.average_sol > 9
	# 			root.average_sol < 10
	# 		}
	# 		add = 4
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.average_sol > 11
	# 			root.average_sol < 12
	# 		}
	# 		add = 5
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.average_sol > 12
	# 			root.average_sol < 13
	# 		}
	# 		add = 6
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.average_sol > 13
	# 			root.average_sol < 14
	# 		}
	# 		add = 7
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.average_sol > 14
	# 		}
	# 		add = 8
	# 	}


	# }
	# revaluation_score_arable_land_country = {
	# 	value = 0

	# 	if = {
	# 		limit  = {
	# 			root.num_states < 5
	# 		}
	# 		add = 6
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 5
	# 			root.num_states < 10
	# 		}
	# 		add = 5
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 10
	# 			root.num_states < 15
	# 		}
	# 		add = 4
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 15
	# 			root.num_states < 20
	# 		}
	# 		add = 3
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 25
	# 			root.num_states < 30
	# 		}
	# 		add = 2
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 35
	# 			root.num_states < 40
	# 		}
	# 		add = 2
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 45
	# 		}
	# 		add = 1
	# 	}

	# }
	# revaluation_sea_acces = {
	# 	value = 0
	# 	if = {
	# 		limit  = {
	# 			num_convoys_available = 0
	# 		}
	# 		add = 10
	# 	}
	# }
	# revaluation_debt = {
	# 	value = 0
	# 	if = {
	# 		limit  = {
	# 			national_debt_compared_gdp > 0.75
	# 		}
	# 		add = 4
	# 	}
	# 	if = {
	# 		limit  = {
	# 			national_debt_compared_gdp < 0.75
	# 			national_debt_compared_gdp > 0.5
	# 		}
	# 		add = 3
	# 	}
	# 	if = {
	# 		limit  = {
	# 			national_debt_compared_gdp < 0.5
	# 			national_debt_compared_gdp > 0.25

	# 		}
	# 		add = 2
	# 	}
	# 	if = {
	# 		limit  = {
	# 			national_debt_compared_gdp < 0.25
	# 		}
	# 		add = 1
	# 	}
	# }

	# devaluation_score= {
	# 	value = 0
	# 	add = devaluation_score_balance
	# 	add = devaluation_score_strategy
	# 	add = devaluation_score_arable_land_country
	# 	add = devaluation_score_rate_currencies


	# 	# if = {
	# 	# 	limit = {
	# 	# 		central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent > 0.75
	# 	# 	}
	# 	# 	multiply = 0.6
	# 	# }
	# 	# if = {
	# 	# 	limit = {
	# 	# 		central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent > 1
	# 	# 	}
	# 	# 	multiply = 0.8
	# 	# }
	# 	if = {
	# 		limit = {
	# 			central_bank_metal_reserves_state_to_ensure_the_conversion_pourcent > 1.25
	# 		}
	# 		multiply = 0
	# 	}
	# }
	# devaluation_score_2 = {
	# 	value = devaluation_score
	# 	multiply = 2
	# }
	# devaluation_score_balance= {
	# 	value = 0
	# 	if = {
	# 		limit = {
	# 			trade_balance_in_gold < 0
	# 		}
	# 		add = 10
	# 	}
	# }
	# devaluation_score_strategy = {
	# 	value = 0
	# 	if = {
	# 		limit = {
	# 			has_strategy = ai_strategy_resource_expansion
	# 		}
	# 		add = 2
	# 	}

	# 	if = {
	# 		limit = {
	# 			has_strategy = ai_strategy_agricultural_expansion
	# 		}
	# 		add = 4
	# 	}

	# 	if = {
	# 		limit = {
	# 			has_strategy = ai_strategy_industrial_expansion
	# 		}
	# 		add = 6
	# 	}
	# }
	# devaluation_score_arable_land_country = {
	# 	value = 0

	# 	if = {
	# 		limit  = {
	# 			root.num_states < 5
	# 		}
	# 		add = 1
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 5
	# 			root.num_states < 10
	# 		}
	# 		add = 2
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 10
	# 			root.num_states < 15
	# 		}
	# 		add = 3
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 15
	# 			root.num_states < 20
	# 		}
	# 		add = 4
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 25
	# 			root.num_states < 30
	# 		}
	# 		add = 5
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 35
	# 			root.num_states < 40
	# 		}
	# 		add = 6
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 40
	# 			root.num_states < 45
	# 		}
	# 		add = 7
	# 	}
	# 	if = {
	# 		limit  = {
	# 			root.num_states > 45
	# 		}
	# 		add = 8
	# 	}

	# }
	# devaluation_score_rate_currencies = {
	# 	value = 0
	# 	if = {
	# 		limit  = {
	# 			not  = {
	# 				has_modifier = global_monetary_reference
	# 			}
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers > 1
	# 				difference_with_average_gold_exchange_rate_currencies_revers < 2
	# 			}
	# 			add = 1
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers > 2
	# 				difference_with_average_gold_exchange_rate_currencies_revers < 3
	# 			}
	# 			add = 2
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers > 3
	# 				difference_with_average_gold_exchange_rate_currencies_revers < 4
	# 			}
	# 			add = 3
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers > 4
	# 				difference_with_average_gold_exchange_rate_currencies_revers < 5
	# 			}
	# 			add = 4
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers > 5
	# 				difference_with_average_gold_exchange_rate_currencies_revers < 6
	# 			}
	# 			add = 5
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers> 6
	# 				difference_with_average_gold_exchange_rate_currencies_revers < 7
	# 			}
	# 			add = 6
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers > 7
	# 				difference_with_average_gold_exchange_rate_currencies_revers < 8
	# 			}
	# 			add = 7
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers > 8
	# 				difference_with_average_gold_exchange_rate_currencies_revers < 9
	# 			}
	# 			add = 8
	# 		}
	# 		if = {
	# 			limit  = {
	# 				difference_with_average_gold_exchange_rate_currencies_revers > 9
	# 			}
	# 			add = 9
	# 		}
	# 	}
	# }
#brace

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#base_rate

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

pool_growth_rate_thanks_to_borrowing = {
	value = 0
	if = {
		limit = {
			has_modifier = country_credit_rating_AAA
		}
		add = 0.10
		multiply = private_bank_borrowings_year_var_2
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_AA
		}
		add = 0.09
		multiply = private_bank_borrowings_year_var_2
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_A
		}
		add = 0.08
		multiply = private_bank_borrowings_year_var_2
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_BBB
		}
		add = 0.07
		multiply = private_bank_borrowings_year_var_2
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_BB
		}
		add = 0.06
		multiply = private_bank_borrowings_year_var_2
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_B
		}
		add = 0.05
		multiply = private_bank_borrowings_year_var_2
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_CCC
		}
		add = 0.04
		multiply = private_bank_borrowings_year_var_2
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_CC
		}
		add = 0.03
		multiply = private_bank_borrowings_year_var_2
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_C
		}
		add = 0.02
		multiply = private_bank_borrowings_year_var_2
	}
}

#gui
pool_growth_rate_thanks_credit_score = {
	value = 0
	if = {
		limit = {
			has_modifier = country_credit_rating_AAA
		}
		add = 0.10
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_AA
		}
		add = 0.09
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_A
		}
		add = 0.08
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_BBB
		}
		add = 0.07
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_BB
		}
		add = 0.06
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_B
		}
		add = 0.05
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_CCC
		}
		add = 0.04
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_CC
		}
		add = 0.03
	}
	if = {
		limit = {
			has_modifier = country_credit_rating_C
		}
		add = 0.02
	}
}
private_bank_borrowings_year = {
	value = private_bank_funds
	multiply = pool_growth_rate_thanks_to_borrowing

	if = {
		limit = {
			private_bank_funds_pourcent < 0.05
		}
		add = var:direct_transfer
	}
}

#gui
private_bank_borrowings_year_var_1 = {
	if  = {
		limit  = {
			var:base_rate_percentage > 0.01
		}
		value = var:base_rate_percentage
		multiply = 10
	}
	if  = {
		limit  = {
			var:base_rate_percentage < 0.01
		}
		value = var:base_rate_percentage #0.95
		multiply = 2
	}
}
base_rate_percentage_revers = {
	value = 1
	subtract = {
		value = var:base_rate_percentage
		multiply = 10

	}
}
private_bank_borrowings_year_var_2 = {
	if  = {
		limit  = {
			var:base_rate_percentage > 0.01
		}
		value = base_rate_percentage_revers
	}

	if  = {
		limit  = {
			var:base_rate_percentage = 0.01
		}
		value = 1
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0095
		}
		value = 2
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0090
		}
		value = 3
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0085
		}
		value = 4
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0080
		}
		value = 5
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0075
		}
		value = 6
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0070
		}
		value = 7
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0065
		}
		value = 8
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0060
		}
		value = 9
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0055
		}
		value = 10
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0050
		}
		value = 11
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0045
		}
		value = 12
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0040
		}
		value = 13
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0035
		}
		value = 14
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0030
		}
		value = 15
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0025
		}
		value = 16
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0020
		}
		value = 17
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0015
		}
		value = 18
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0010
		}
		value = 19
	}
	if  = {
		limit  = {
			var:base_rate_percentage = 0.0005
		}
		value = 20
	}
}

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################

#buy_sell currency in_gold_market_panel_enabled

############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################
############################################################################################################################################################


#dinar
valid_dinar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_algerian_dinar
valid_dinar_algerian_dinar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_algerian_dinar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_algerian_dinar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_iraqi_dinar
valid_dinar_iraqi_dinar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_iraqi_dinar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_iraqi_dinar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_libyan_dinar
valid_dinar_libyan_dinar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_libyan_dinar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_libyan_dinar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_moroccan_dirham
valid_dinar_moroccan_dirham_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_moroccan_dirham_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_moroccan_dirham_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_omanian_rial
valid_dinar_omanian_rial_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_omanian_rial_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_omanian_rial_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_qiran
valid_dinar_qiran_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_qiran_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_qiran_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_saudi_riyal
valid_dinar_saudi_riyal_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_saudi_riyal_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_saudi_riyal_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_serbian_dinar
valid_dinar_serbian_dinar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_serbian_dinar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_serbian_dinar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_tunisian_dinar
valid_dinar_tunisian_dinar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_tunisian_dinar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_tunisian_dinar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dinar_yugoslav_dinar
valid_dinar_yugoslav_dinar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dinar_yugoslav_dinar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dinar_yugoslav_dinar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dollar_australian_dollar
valid_dollar_australian_dollar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dollar_australian_dollar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dollar_australian_dollar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dollar_canadian_dollar
valid_dollar_canadian_dollar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dollar_canadian_dollar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dollar_canadian_dollar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dollar_caribbean_dollar
valid_dollar_caribbean_dollar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dollar_caribbean_dollar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dollar_caribbean_dollar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dollar_confederate_states_dollar
valid_dollar_confederate_states_dollar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dollar_confederate_states_dollar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dollar_confederate_states_dollar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dollar_liberian_dollar
valid_dollar_liberian_dollar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dollar_liberian_dollar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dollar_liberian_dollar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dollar_new_zealand_dollar
valid_dollar_new_zealand_dollar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dollar_new_zealand_dollar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dollar_new_zealand_dollar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dollar_sierra_leonean_dollar
valid_dollar_sierra_leonean_dollar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dollar_sierra_leonean_dollar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dollar_sierra_leonean_dollar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#dollar_united_states_dollar
valid_dollar_united_states_dollar_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_dollar_united_states_dollar_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_dollar_united_states_dollar_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_ariary
valid_eco_ariary_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_ariary_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_ariary_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_central_african_eco
valid_eco_central_african_eco_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_central_african_eco_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_central_african_eco_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_east_african_eco
valid_eco_east_african_eco_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_east_african_eco_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_east_african_eco_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_ethiopian_birr
valid_eco_ethiopian_birr_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_ethiopian_birr_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_ethiopian_birr_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_ghanaian_pound
valid_eco_ghanaian_pound_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_ghanaian_pound_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_ghanaian_pound_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_nigerian_naira
valid_eco_nigerian_naira_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_nigerian_naira_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_nigerian_naira_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_south_african_rand
valid_eco_south_african_rand_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_south_african_rand_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_south_african_rand_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_tuareg_ouguiya
valid_eco_tuareg_ouguiya_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_tuareg_ouguiya_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_tuareg_ouguiya_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#eco_west_african_eco
valid_eco_west_african_eco_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_eco_west_african_eco_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_eco_west_african_eco_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#franc_belgian_franc
valid_franc_belgian_franc_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_franc_belgian_franc_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_franc_belgian_franc_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#franc_french_franc
valid_franc_french_franc_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_franc_french_franc_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_franc_french_franc_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#franc_luxembourgish_franc
valid_franc_luxembourgish_franc_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_franc_luxembourgish_franc_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_franc_luxembourgish_franc_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#franc_swiss_franc
valid_franc_swiss_franc_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_franc_swiss_franc_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_franc_swiss_franc_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#gulden
valid_gulden_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_gulden_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_gulden_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#gulden_bavarian_gulden
valid_gulden_bavarian_gulden_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_gulden_bavarian_gulden_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_gulden_bavarian_gulden_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#gulden_florin
valid_gulden_florin_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_gulden_florin_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_gulden_florin_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#gulden_hungarian_forint
valid_gulden_hungarian_forint_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_gulden_hungarian_forint_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_gulden_hungarian_forint_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#gulden_indies_guilder
valid_gulden_indies_guilder_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_gulden_indies_guilder_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_gulden_indies_guilder_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#gulden_south_german_gulden
valid_gulden_south_german_gulden_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_gulden_south_german_gulden_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_gulden_south_german_gulden_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#krone_czech_koruna
valid_krone_czech_koruna_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_krone_czech_koruna_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_krone_czech_koruna_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#krone_danish_krone
valid_krone_danish_krone_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_krone_danish_krone_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_krone_danish_krone_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#krone_estonian_kroon
valid_krone_estonian_kroon_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_krone_estonian_kroon_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_krone_estonian_kroon_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#krone_icelandic_krona
valid_krone_icelandic_krona_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_krone_icelandic_krona_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_krone_icelandic_krona_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#krone_norwegian_krone
valid_krone_norwegian_krone_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_krone_norwegian_krone_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_krone_norwegian_krone_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#krone_slovak_koruna
valid_krone_slovak_koruna_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_krone_slovak_koruna_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_krone_slovak_koruna_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#krone_swedish_krona
valid_krone_swedish_krona_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_krone_swedish_krona_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_krone_swedish_krona_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#leon_leu
valid_leon_leu_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_leon_leu_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_leon_leu_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#leon_lev
valid_leon_lev_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_leon_lev_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_leon_lev_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#lira
valid_lira_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_lira_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_lira_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#lira_ducato
valid_lira_ducato_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_lira_ducato_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_lira_ducato_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#lira_ottoman_lira
valid_lira_ottoman_lira_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_lira_ottoman_lira_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_lira_ottoman_lira_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#lira_scudo_pontificio
valid_lira_scudo_pontificio_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_lira_scudo_pontificio_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_lira_scudo_pontificio_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#lira_scudo_sardo
valid_lira_scudo_sardo_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_lira_scudo_sardo_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_lira_scudo_sardo_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#lira_toscane_lira
valid_lira_toscane_lira_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_lira_toscane_lira_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_lira_toscane_lira_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#mark
valid_mark_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_mark_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_mark_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#mark_finnish_markka
valid_mark_finnish_markka_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_mark_finnish_markka_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_mark_finnish_markka_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso
valid_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_argentine_peso
valid_peso_argentine_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_argentine_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_argentine_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_bolivien_peso
valid_peso_bolivien_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_bolivien_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_bolivien_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_chilean_peso
valid_peso_chilean_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_chilean_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_chilean_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_colombian_peso
valid_peso_colombian_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_colombian_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_colombian_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_costa_rican_colon
valid_peso_costa_rican_colon_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_costa_rican_colon_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_costa_rican_colon_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_cuban_peso
valid_peso_cuban_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_cuban_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_cuban_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_ecuadorian_peso
valid_peso_ecuadorian_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_ecuadorian_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_ecuadorian_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_el_salvador_colon
valid_peso_el_salvador_colon_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_el_salvador_colon_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_el_salvador_colon_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_guatemalan_quetzal
valid_peso_guatemalan_quetzal_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_guatemalan_quetzal_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_guatemalan_quetzal_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_honduran_lempira
valid_peso_honduran_lempira_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_honduran_lempira_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_honduran_lempira_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_mexican_peso
valid_peso_mexican_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_mexican_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_mexican_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_nicaraguan_cordoba
valid_peso_nicaraguan_cordoba_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_nicaraguan_cordoba_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_nicaraguan_cordoba_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_paraguayan_peso
valid_peso_paraguayan_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_paraguayan_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_paraguayan_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_philippine_peso
valid_peso_philippine_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_philippine_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_philippine_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_sol_de_oro
valid_peso_sol_de_oro_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_sol_de_oro_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_sol_de_oro_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_uruguayan_peso
valid_peso_uruguayan_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_uruguayan_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_uruguayan_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#peso_venezuelan_peso
valid_peso_venezuelan_peso_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_peso_venezuelan_peso_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_peso_venezuelan_peso_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#pound_egyptian_pound
valid_pound_egyptian_pound_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_pound_egyptian_pound_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_pound_egyptian_pound_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#pound_irish_pound
valid_pound_irish_pound_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_pound_irish_pound_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_pound_irish_pound_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#pound_sterling
valid_pound_sterling_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_pound_sterling_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_pound_sterling_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#real
valid_real_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_real_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_real_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#real_brazilian_real
valid_real_brazilian_real_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_real_brazilian_real_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_real_brazilian_real_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#rupee_indian_rupee
valid_rupee_indian_rupee_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_rupee_indian_rupee_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_rupee_indian_rupee_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#rupee_indonesian_rupiah
valid_rupee_indonesian_rupiah_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_rupee_indonesian_rupiah_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_rupee_indonesian_rupiah_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_baht
valid_spe_baht_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_baht_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_baht_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_dong
valid_spe_dong_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_dong_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_dong_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_drachma
valid_spe_drachma_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_drachma_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_drachma_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_korean_won
valid_spe_korean_won_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_korean_won_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_korean_won_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_latvian_lats
valid_spe_latvian_lats_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_latvian_lats_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_latvian_lats_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_lithuanian_litas
valid_spe_lithuanian_litas_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_lithuanian_litas_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_lithuanian_litas_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_peseta
valid_spe_peseta_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_peseta_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_peseta_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_ruble
valid_spe_ruble_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_ruble_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_ruble_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_uni
valid_spe_uni_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_uni_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_uni_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_yen
valid_spe_yen_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_yen_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_yen_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_yuan
valid_spe_yuan_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_yuan_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_yuan_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#spe_zloti
valid_spe_zloti_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_spe_zloti_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_spe_zloti_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#thaler_hannoveraner_thaler
valid_thaler_hannoveraner_thaler_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_thaler_hannoveraner_thaler_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_thaler_hannoveraner_thaler_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#thaler_prussian_thaler
valid_thaler_prussian_thaler_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_thaler_prussian_thaler_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_thaler_prussian_thaler_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
#thaler_saxon_thaler
valid_thaler_saxon_thaler_metal_reserve_type = {
	value = 0
	if  = {
		limit  = {
			law_thaler_saxon_thaler_monetary_system_GS_BS_GES_trigger = yes
		}
		add = gold_state_native_for_stockpile
	}
	if  = {
		limit  = {
			law_thaler_saxon_thaler_monetary_system_SS_trigger = yes
		}
		add = silver_state_native_for_stockpile
	}
}
