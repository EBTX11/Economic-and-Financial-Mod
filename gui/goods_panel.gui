# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types goods_panel_types
{
	type goods_panel = default_block_window_two_lines {
		name = "goods_panel"
		datacontext = "[GoodsPanel.GetGoods]"

		blockoverride "window_header_name"
		{
			text = "[LabelingHelper.CapitalizeOnlyFirst(GoodsPanel.GetGoods.GetNameNoFormatting)]"

			tooltipwidget = {
				FancyTooltip_Goods = {}
			}
		}

		blockoverride "window_header_name_line_two"
		{
			text = "GOODS_PANEL_LINE_TWO"
		}
		blockoverride "goto_button" {
			button_icon_goto = {
				datacontext = "[GoodsPanel.GetGoods.GetMarket]"
				onclick = "[InformationPanelBar.OpenMarketPanel(Market.Self)]"
				tooltip = "GO_TO_BUTTON_MARKET"
				size = { 30 30 }
				input_action = "go_to_details"
			}
		}

		blockoverride "map_modes_button" {
			map_modes_single_button_minimized = {
				datacontext = "[GoodsPanel.GetMapModeList]"
				using = map_modes_button_position
			}
		}

		blockoverride "pin_visibility" {
			visible = "[And(GoodsPanel.GetGoods.HasMarketContext, GoodsPanel.GetGoods.GetMarket.GetOwner.IsLocalPlayer)]"
		}

		blockoverride "pin_properties" {
			datacontext = "[GoodsPanel.GetGoods]"
			onclick = "[GoodsPanel.GetGoods.TogglePinInOutliner]"
			tooltip = "GOODS_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			visible = "[GoodsPanel.GetGoods.IsPinnedInOutliner]"
		}

		blockoverride "unpin_properties" {
			datacontext = "[GoodsPanel.GetGoods]"
			visible = "[Not(GoodsPanel.GetGoods.IsPinnedInOutliner)]"
			onclick = "[GoodsPanel.GetGoods.TogglePinInOutliner]"
			tooltip = "GOODS_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
		}
		
		blockoverride "fixed_top"{

			tab_buttons = {
				
				# OBS! these 5 tabs are copied to goods_panel.gui / goods_usage_panel.gui / goods_state_panel.gui / goods_local_prices_panel.gui
				# consider merging these panels into the same panel

				# world market
				blockoverride "first_button" {
					text = "concept_world_market"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "[concept_world_market]"
				} 
				blockoverride "first_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsWorldMarketPanel( GoodsPanel.GetGoods.Self )]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not(GoodsPanel.GetGoods.IsLocal)]"
				}

				# market (SELECTED)
				blockoverride "second_button_selected" {
					text = "[GoodsPanel.GetGoods.GetMarket.GetNameNoFormatting]"
				}
				blockoverride "second_button_visibility" {
					visible = yes
				}
				
				# selected state
				blockoverride "third_button" {
					text = "[GoodsPanel.GetGoods.GetState.GetNameNoFormatting]"
				}
				blockoverride "third_button_tooltip" {
					tooltip = "[GoodsPanel.GetGoods.GetState.GetNameNoFormatting]"
				} 
				blockoverride "third_button_visibility_checked" {
					visible = "[GoodsPanel.GetGoods.HasStateContext]"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsStatePanel(GoodsPanel.GetGoods.GetState, GoodsPanel.GetGoods.Self)]"
				}

				# states in market
				blockoverride "fourth_button" {
					text = "LOCAL_PRICES"
				}
				blockoverride "fourth_button_tooltip" {
					tooltip = "LOCAL_PRICES"
				} 					
				blockoverride "fourth_button_visibility_checked" {
					visible = "[GoodsPanel.GetGoods.HasMarketContext]"
				}			
				blockoverride "fourth_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsLocalPricesPanel(GoodsPanel.GetGoods.Self)]"
				}	
				
				# usage / application
				blockoverride "fifth_button" {
					text = USAGE
				}
				blockoverride "fifth_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsUsagePanel(GoodsPanel.GetGoods.Self)]"
				}
				blockoverride "fifth_button_visibility_checked" {
					visible = yes
				}
			}
		}
		
		blockoverride "bottom_spacing" {}

		blockoverride "scrollarea_content"
		{
			container = {
				parentanchor = hcenter									
				
				flowcontainer = {
					margin_top = 10
					minimumsize = { @panel_width -1 }
					using = default_list_position
					direction = vertical
					datacontext = "[GoodsPanel.GetGoods]"

					container = {
						parentanchor = hcenter
						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						
						good_icon_and_prize = {
							blockoverride "price_card" {
								market_price_card = {
									blockoverride "icons_visible" {
										visible = yes
									}
									
									blockoverride "icon_balance" {
										texture = "gfx/interface/icons/trade_icons/balance.dds"
									}

									blockoverride = "icon_input" {
										texture = "gfx/interface/icons/trade_icons/sell_orders.dds"	
									}

									blockoverride "icon_output" {
										texture = "gfx/interface/icons/trade_icons/buy_orders.dds"
									}

									blockoverride "price_card_name_maximumsize" {
										maximumsize = { 250 -1 }
										minimumsize = { 250 -1 }
									}
								}
							}
						}
					}
					
					widget = { size = { 5 5 }}

					widget = {
						size = { @panel_width 110 }
						parentanchor = hcenter
						#visible = no

						hbox = {
							layoutpolicy_horizontal = expanding

							background = {
								using = entry_bg_simple
							}

							#CONSUMPTION TAXES
							vbox = {
								spacing = 8
								margin_left = 60

								textbox = {
									text = "BUDGET_CONSUMPTION_TAXES"
									layoutpolicy_horizontal = expanding
									align = center|nobaseline
									#parentanchor = left|vcenter
								}	

								widget = { size = { 5 5 }}
								
								consumption_tax_button_toggle = {
									visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.GetCapital.GetMarket, Goods.GetMarket))]"
									
									blockoverride "size" { 
										size = { 50 50 }
									}

									blockoverride "tooltip" {
										tooltip = "NOT_PLAYER_MARKET_CONSUMPTION_TAXES"
									}

									blockoverride "enabled" {
										enabled = no
									}
								}

								consumption_tax_button_toggle = {
									visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.GetCapital.GetMarket, Goods.GetMarket)]"

									blockoverride "size" { 
										size = { 50 50 }
									}
								}	

								widget = { size = { 5 5 }}
							}

							widget = { size = { 20 5 }}

							vertical_divider_full = {
								blockoverride "size" {
									size = { 0 95 }
								}
							}

							#TARIFFS AND SUBVENTION
							vbox = {
								visible = "[Goods.IsTradeable]"
								name = "tutorial_highlight_market_goods_policy"
								spacing = 5

								widget = {
									textbox = {
										text = "BUDGET_TARIFFS"
										autoresize = yes
										align = nobaseline
										parentanchor = left|vcenter
									}
								}

								hbox = {
									margin_top = 9
									spacing = 5

									icon = {
										texture = "gfx/interface/icons/trade_icons/imports.dds"
										size = { 28 28 }
									}

									set_level_bar_import_tariffs = {}
								}

								hbox = {
									spacing = 5
									#margin_top = 5

									icon = {
										texture = "gfx/interface/icons/trade_icons/exports.dds"
										size = { 28 28 }
									}

									set_level_bar_export_tariffs = {}
								}
							}

						}
					}

					### GRAPH LINE
					v3_plotline = {
						using = default_list_position
						margin_bottom = 5

						blockoverride "size" {
							size = { 450 100 }
						}
						blockoverride "header" {
							text = "PRICE"
						}
						blockoverride "line_color" {
							color = { .9 .9 .9 1.0 }
						}
						blockoverride "line_plotpoints" {
							visible = "[Not(IsEmpty(Goods.GetPriceTrend))]"
							plotpoints = "[GetTrendPlotPointsNormalized( Goods.GetPriceTrend, Goods.GetMinPrice, Goods.GetMaxPrice )]"
						}
						blockoverride "maxvalue" {
							raw_text = "[GetPlayer.GetCustom('currency_symbol')][Goods.GetMaxPrice]"
						}
						blockoverride "minvalue" {
							raw_text = "[GetPlayer.GetCustom('currency_symbol')][Goods.GetMinPrice]"
						}
						blockoverride "startdate" {
							text = "[GetOldestDate(Goods.GetPriceTrend)]"
						}
						blockoverride "enddate" {
							text = "[GetLatestDate(Goods.GetPriceTrend)]"
						}
						blockoverride "multiitem" {}
						
						blockoverride "extra_plotlines" {
							### Base Price line
							plotline = {
								plotpoints = "[Goods.GetBasePricePlotPoints]"
								size = { 100% 100% }
								using = plot_line
								width = 1
								color = { 0.2 0.2 0.9 1.0 }
							}
						}
						blockoverride "empty_state_visibility" {
							visible = "[IsEmpty(Goods.GetPriceTrend)]"
						}

						blockoverride "everything_that_is_not_empty_state_visibility" {
							visible = "[Not(IsEmpty(Goods.GetPriceTrend))]"
						}

						blockoverride "empty_state_text" {
							text = "GRAPH_NOT_INITIALIZED"
						}
					}

					flowcontainer = {
						visible = "[Not(IsDataModelEmpty(Goods.GetMarketPrestigeGoods))]"
						parentanchor = hcenter
						direction = vertical
						margin_bottom = 5
						margin_top = 5

						default_header = {
							parentanchor = hcenter

							blockoverride "text"
							{
								text = "concept_prestige_goods"
							}
						}

						goods_prestige_goods_breakdown_list_item = {						
							parentanchor = hcenter

							blockoverride "prestige_goods_item_minimumsize" {
								minimumsize = { 540 -1 }
							}

							blockoverride "prestige_goods_item_name_size" {
								minimumsize = { 300 -1 }
								maximumsize = { 300 -1 }
							}

							blockoverride "prestige_goods_item_text_1" {
								raw_text = "BASE_GOODS_MARKET_SELL_ORDERS"
							}

							blockoverride "prestige_goods_item_text_2" {
								raw_text = "BASE_GOODS_MARKET_BUY_ORDERS"
							}
						}

						flowcontainer = {
							direction = vertical
							parentanchor = hcenter
							datamodel = "[Goods.GetMarketPrestigeGoods]"

							item = {
								goods_prestige_goods_breakdown_list_item = {
									blockoverride "prestige_goods_item_minimumsize" {
										minimumsize = { 540 -1 }
									}

									blockoverride "prestige_goods_item_name_size" {
										minimumsize = { 300 -1 }
										maximumsize = { 300 -1 }
									}
								}
							}
						}
					}

					### BOUGHT BY / SOLD BY
					flowcontainer = {
						margin_top = 5
						using = default_list_position
						
						### SOLD BY LIST
						market_orders_list = {}
						
						vertical_divider_full = {}
						
						### BOUGHT BY LIST
						market_orders_list = {
							blockoverride "header_text" {
								text = "BOUGHT_BY"
							}
							blockoverride "alpha_summary_orders" {
								alpha = "[TransparentIfZero(GoodsPanel.GetOutputValuesTotal)]"
							}
							blockoverride "label_summary_orders" {
								text = "BUY_ORDERS"
							}
							blockoverride "label_tooltip_orders" {
								tooltip = "GOODS_MARKET_BUY_ORDERS_BREAKDOWN"
							}							
							blockoverride "value_summary_orders" {
								text = "[GoodsPanel.GetOutputValuesTotal|D]"
							}
							blockoverride "datamodel_orders" {
								datamodel = "[GoodsPanel.GetOutputValues]"
							}

							blockoverride "trade_center_provider" {
								datamodel = "[Goods.GetImportersFromMarket]"
							}
						}
					}
				}
				
				not_yet_initialized = {
					visible = "[EqualTo_CFixedPoint(GoodsPanel.GetGoods.GetMarketPrice, '(CFixedPoint)0')]"
				}
			}
		}
	}
}

types "production_method_items" {
	
	### ICON + PRICE
	type good_icon_and_prize = container {
		minimumsize = { 480 180 }
		maximumsize = { 480 -1 }

		button = {
			texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
			size = { 140 140 }
			color = "[Goods.GetCategoryColor]"
			onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
			parentanchor = vcenter
			position = { 5 0 }
			
			tooltipwidget = {
				FancyTooltip_Goods = {}
			}

			icon = {
				texture = "[Goods.GetTexture]"
				size = { 110 110 }
				parentanchor = center
				
			}

			icon = {
				texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
				visible = "[Goods.HasGoodsShortage]"
				tooltip = "GOODS_SHORTAGE_TOOLTIP"
				size = { 40 40 }
				parentanchor = bottom
				position = { -3 3 }
			}

			cannot_be_trade_icon = {
				size = { 40 40 }
				position = { 3 3 }
			}
		}		
		
		flowcontainer = {
			position = { 170 0 }
			direction = vertical
			spacing = 10
			parentanchor = vcenter

			block "price_card" {}

			textbox = {
				visible = "[Not(Goods.IsLocal)]"
				text = GOODS_LEADERBOARD_STATUS
				autoresize = yes
				multiline = yes
				maximumsize = { 320 -1 }
				minimumsize = { 320 -1 }
				align = nobaseline
			}

			flowcontainer = {
				direction = vertical
				visible = "[Goods.HasStateContext]"
				
				textbox = {
					visible = "[NotZero_CFixedPoint(Goods.GetStateImports)]"
					text = "STATE_GOODS_IMPORT_ADVANTAGE"
					tooltip = "[Goods.GetStateRelativeImportAdvantageDesc]"
					autoresize = yes
					multiline = yes
					maximumsize = { 320 -1 }
					align = nobaseline
					using = tooltip_below
				}

				textbox = {
					visible = "[NotZero_CFixedPoint(Goods.GetStateExports)]"
					text = "STATE_GOODS_EXPORT_ADVANTAGE"
					tooltip = "[Goods.GetStateRelativeExportAdvantageDesc]"
					autoresize = yes
					multiline = yes
					maximumsize = { 320 -1 }
					align = nobaseline
					using = tooltip_below
				}
			}
		}
	}
	
	### map modes minimized
	type map_modes_minimized = map_modes {
		onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('hide_map_mode_list','show_map_mode_list')]"
		onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('show_map_mode_list','hide_map_mode_list')]"
		
		blockoverride "flowcontainer_size" {}
		
		blockoverride "map_mode_button_size" {
			size = { 45 45 }
			
			state = {
				name = show_map_mode_list
				duration = 0.2
				using = Animation_Curve_Default
				
				block "expanded_size" {
					size = { 350 45 }
				}
			}
			state = {
				name = hide_map_mode_list
				size = { 45 45 }
				duration = 0.2
				using = Animation_Curve_Default
			}
		}
		
		blockoverride "show_map_mode_list_details" {
			alpha = 0
			
			state = {
				name = show_map_mode_list
				using = default_show_properties
			}
			state = {
				name = hide_map_mode_list
				using = default_hide_properties
			}
		}
	}
	
	### map modes
	type map_modes = flowcontainer {
		direction = vertical
		block "flowcontainer_size" {
			minimumsize = { @panel_width -1 }
		}
		
		# first button
		button = {
			using = default_button_action
			block "first_button_click" {}
			block "map_mode_button_size" {
				size = { 100% 45 }
			}

			widget = {
				background = {
					using = paper_bg
				}

				block "first_button_selected" {}

				size = { 100% 100% }
			}

			textbox = {
				block "first_button_text" {}
				size = { 100% 45 }
				elide = right
				fontsize_min = 12
				margin = { 45 0 }
				align = nobaseline
				block "show_map_mode_list_details" {}
			}



			icon = {
				name = "selected_bg"
				size = { 100% 100% }
				using = highlighted_square_selection
				block "first_button_selected" {}
				
				using = shimmer_fade_in
				blockoverride "trigger" {
					name = selected
				}
			}


			button_radio = {
				frame = 1
				size = { 25 25 }
				parentanchor = vcenter
				position = { 10 0 }
				alwaystransparent = yes
				block "show_map_mode_list_details" {}
			}

			map_modes_fake_static_filled_radiobutton = {
				block "first_button_selected" {}
			}

			block "right_icon" {
				widget = {
					size = { 35 35 }
					parentanchor = right|vcenter
					position = { -5 0 }
					
					icon = {
						size = { 100 100 }
						parentanchor = center
						using = rotate_glow_animation_02
						block "first_button_selected" {}
						
						state = {
							name = _show
							alpha = 1
							size = { 100 100 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = _hide
							alpha = 0.7
							size = { 30 30 }
							duration = 0.2
							using = Animation_Curve_Default
						}
					}
							
					icon = {
						size = { 35 35 }
						parentanchor = center
						block "first_button_icon" {}
						block "first_button_selected" {}

						state = {
							name = _show
							alpha = 1
							size = { 35 35 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = _hide
							alpha = 0.7
							size = { 30 30 }
							duration = 0.2
							using = Animation_Curve_Default
						}
					}

					icon = {
						size = { 30 30 }
						alpha = 0.7
						parentanchor = center
						block "first_button_icon" {}
						block "first_button_not_selected" {}

						state = {
							name = _show
							alpha = 0.7
							size = { 30 30 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = _hide
							alpha = 1
							size = { 35 35 }
							duration = 0.2
							using = Animation_Curve_Default
						}
					}
				}
			}
		}

		# second button
		button = {
			using = default_button_action
			block "second_button_click" {}
			block "map_mode_button_size" {
				size = { 100% 45 }
			}

			widget = {
				background = {
					using = paper_bg
				}

				block "second_button_selected" {}

				size = { 100% 100% }
			}

			textbox = {
				block "second_button_text" {}
				size = { 100% 45 }
				elide = right
				fontsize_min = 12
				margin = { 45 0 }
				align = nobaseline
				block "show_map_mode_list_details" {}
			}

			icon = {
				name = "selected_bg"
				size = { 100% 100% }
				using = highlighted_square_selection
				block "second_button_selected" {}
				
				using = shimmer_fade_in
				blockoverride "trigger" {
					name = selected
				}
			}

			button_radio = {
				frame = 1
				size = { 25 25 }
				parentanchor = vcenter
				position = { 10 0 }
				alwaystransparent = yes
				block "show_map_mode_list_details" {}
			}

			map_modes_fake_static_filled_radiobutton = {
				block "second_button_selected" {}
			}

			block "right_icon" {
				widget = {
					size = { 35 35 }
					parentanchor = right|vcenter
					position = { -5 0 }
					
					icon = {
						size = { 100 100 }
						parentanchor = center
						using = rotate_glow_animation_02
						block "second_button_selected" {}
						
						state = {
							name = _show
							alpha = 1
							size = { 100 100 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = _hide
							alpha = 0.7
							size = { 30 30 }
							duration = 0.2
							using = Animation_Curve_Default
						}
					}
					
					icon = {
						size = { 35 35 }
						parentanchor = center
						block "second_button_icon" {}
						block "second_button_selected" {}

						state = {
							name = _show
							alpha = 1
							size = { 35 35 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = _hide
							alpha = 0.7
							size = { 30 30 }
							duration = 0.2
							using = Animation_Curve_Default
						}
					}

					icon = {
						size = { 30 30 }
						alpha = 0.7
						parentanchor = center
						block "second_button_icon" {}
						block "second_button_not_selected" {}

						state = {
							name = _show
							alpha = 0.7
							size = { 30 30 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = _hide
							alpha = 1
							size = { 35 35 }
							duration = 0.2
							using = Animation_Curve_Default
						}
					}
				}
			}
		}

		# third button
		block "third_button" {
			button = {
				using = default_button_action
				block "third_button_click" {}
				block "map_mode_button_size" {
					size = { 100% 45 }
				}

				widget = {
					background = {
						using = paper_bg
					}

					block "third_button_selected" {}

					size = { 100% 100% }
				}

				textbox = {
					block "third_button_text" {}
					size = { 100% 45 }
					elide = right
					fontsize_min = 12
					margin = { 45 0 }
					align = nobaseline
					block "show_map_mode_list_details" {}
				}

				icon = {
					name = "selected_bg"
					size = { 100% 100% }
					using = highlighted_square_selection
					block "third_button_selected" {}
					
					using = shimmer_fade_in
					blockoverride "trigger" {
						name = selected
					}
				}

				button_radio = {
					frame = 1
					size = { 25 25 }
					parentanchor = vcenter
					position = { 10 0 }
					alwaystransparent = yes
					block "show_map_mode_list_details" {}
				}

				map_modes_fake_static_filled_radiobutton = {
					block "third_button_selected" {}
				}

				block "right_icon" {
					widget = {
						size = { 35 35 }
						parentanchor = right|vcenter
						position = { -5 0 }
						
						icon = {
							size = { 100 100 }
							parentanchor = center
							using = rotate_glow_animation_02
							block "third_button_selected" {}
							
							state = {
								name = _show
								alpha = 1
								size = { 100 100 }
								duration = 0.2
								using = Animation_Curve_Default
							}

							state = {
								name = _hide
								alpha = 0.7
								size = { 30 30 }
								duration = 0.2
								using = Animation_Curve_Default
							}
						}
						
						icon = {
							size = { 35 35 }
									parentanchor = center
							block "third_button_icon" {}
							block "third_button_selected" {}

							state = {
								name = _show
								alpha = 1
								size = { 35 35 }
								duration = 0.2
								using = Animation_Curve_Default
							}

							state = {
								name = _hide
								alpha = 0.7
								size = { 30 30 }
								duration = 0.2
								using = Animation_Curve_Default
							}
						}

						icon = {
							size = { 30 30 }
							alpha = 0.7
									parentanchor = center
							block "third_button_icon" {}
							block "third_button_not_selected" {}

							state = {
								name = _show
								alpha = 0.7
								size = { 30 30 }
								duration = 0.2
								using = Animation_Curve_Default
							}

							state = {
								name = _hide
								alpha = 1
								size = { 35 35 }
								duration = 0.2
								using = Animation_Curve_Default
							}
						}
					}
				}
			}
		}

		# fourth button
		block "fourth_button" {
			button = {
				using = default_button_action
				block "fourth_button_click" {}
				block "map_mode_button_size" {
					size = { 100% 45 }
				}

				widget = {
					background = {
						using = paper_bg
					}

					block "fourth_button_selected" {}

					size = { 100% 100% }
				}

				textbox = {
					block "fourth_button_text" {}
					size = { 100% 45 }
					elide = right
					fontsize_min = 12
					margin = { 45 0 }
					align = nobaseline
					block "show_map_mode_list_details" {}
				}

				icon = {
					name = "selected_bg"
					size = { 100% 100% }
					using = highlighted_square_selection
					block "fourth_button_selected" {}
					
					using = shimmer_fade_in
					blockoverride "trigger" {
						name = selected
					}
				}

				button_radio = {
					frame = 1
					size = { 25 25 }
					parentanchor = vcenter
					position = { 10 0 }
					alwaystransparent = yes
					block "show_map_mode_list_details" {}
				}

				map_modes_fake_static_filled_radiobutton = {
					block "fourth_button_selected" {}
				}

				block "right_icon" {
					widget = {
						size = { 35 35 }
						parentanchor = right|vcenter
						position = { -5 0 }
						
						icon = {
							size = { 100 100 }
							parentanchor = center
							using = rotate_glow_animation_02
							block "fourth_button_selected" {}
							
							state = {
								name = _show
								alpha = 1
								size = { 100 100 }
								duration = 0.2
								using = Animation_Curve_Default
							}

							state = {
								name = _hide
								alpha = 0.7
								size = { 30 30 }
								duration = 0.2
								using = Animation_Curve_Default
							}
						}
						
						icon = {
							size = { 35 35 }
									parentanchor = center
							block "fourth_button_icon" {}
							block "fourth_button_selected" {}

							state = {
								name = _show
								alpha = 1
								size = { 35 35 }
								duration = 0.2
								using = Animation_Curve_Default
							}

							state = {
								name = _hide
								alpha = 0.7
								size = { 30 30 }
								duration = 0.2
								using = Animation_Curve_Default
							}
						}

						icon = {
							size = { 30 30 }
							alpha = 0.7
									parentanchor = center
							block "fourth_button_icon" {}
							block "fourth_button_not_selected" {}

							state = {
								name = _show
								alpha = 0.7
								size = { 30 30 }
								duration = 0.2
								using = Animation_Curve_Default
							}

							state = {
								name = _hide
								alpha = 1
								size = { 35 35 }
								duration = 0.2
								using = Animation_Curve_Default
							}
						}
					}
				}
			}
		}
	}

	### map modes - single button with right-click menu minimized
	type map_modes_single_button_minimized = flowcontainer {
		direction = vertical
		onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('hide_map_mode_list','show_map_mode_list')]"
		onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('show_map_mode_list','hide_map_mode_list')]"
		tooltip = "CURRENT_MAP_MODE"
		using = tooltip_ne
		
		# button
		button = {
			using = default_button

			block "button_click" {
				onclick = "[RightClickMenuManager.ToggleMapModes(MapModeList.AccessSelf, PdxGuiWidget.AccessSelf)]"
			}

			block "map_mode_button_size" {
				size = { 45 45 }
			
				state = {
					name = show_map_mode_list
					duration = 0.2
					using = Animation_Curve_Default
					
					block "expanded_size" {
						size = { 190 45 }
					}
				}

				state = {
					name = hide_map_mode_list
					size = { 45 45 }
					duration = 0.2
					using = Animation_Curve_Default
				}
			}

			flowcontainer = {
				parentanchor = vcenter
				margin = { 15 0 }
				spacing = 5

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					elide = right
					fontsize_min = 12
					align = nobaseline

					block "text_max_width" {
						max_width = 130
					}

					block "button_text" {
						text = "[MapModeList.GetSelectedMapMode.GetName]"
					}

					block "show_map_mode_list_details" {
						alpha = 0
				
						state = {
							name = show_map_mode_list
							using = default_show_properties_slow
						}
						
						state = {
							name = hide_map_mode_list
							using = default_hide_properties_fast
						}
					}
				}
			}

			block "right_icon" {
				widget = {
					parentanchor = right|vcenter
					position = { -7 0 }
					
					block "right_icon_size_selected" {
						size = { 30 30 }
					}

					icon = {
						size = { 200% 200% }
						parentanchor = center
						using = rotate_glow_animation_02
					}
							
					button = {
						size = { 100% 100% }
						parentanchor = center
						alwaystransparent = yes

						block "button_icon" {
							texture = "[MapModeList.GetSelectedMapMode.GetIcon]"
						}

						state = {
							name = large
							alpha = 1
							duration = 0.1
							using = Animation_Curve_Default
							on_finish = "[GetVariableSystem.Clear(Concatenate('map_mode_name_', MapModeList.GetSelectedMapMode.GetName))]"

							block "right_icon_size_selected" {
								size = { 30 30 }
							}
						}

						state = {
							name = small
							next = large
							trigger_when = "[GetVariableSystem.Exists(Concatenate('map_mode_name_', MapModeList.GetSelectedMapMode.GetName))]"
							alpha = 0.2
							duration = 0.1
							using = Animation_Curve_Default

							block "right_icon_size" {
								size = { 25 25 }
							}
						}
					}
				}
			}
		}
	}

	type map_modes_fake_static_filled_radiobutton = icon {
		block "show_map_mode_list_details" {}

		size = { 25 25 }
		parentanchor = vcenter
		texture = "gfx/interface/buttons/radio_button.dds"
		frame = 2
		framesize = { 80 80 }
		alwaystransparent = yes

		block "position" {
			position = { 10 0 }
		}
	}

	type map_modes_large_button = button {
		using = default_button

		block "button_click" {
			onclick = "[RightClickMenuManager.ToggleMapModes(MapModeList.AccessSelf, PdxGuiWidget.AccessSelf)]"
		}

		block "map_mode_button_size" {
			size = { 402 45 }
		}

		flowcontainer = {
			parentanchor = vcenter
			margin = { 15 0 }
			spacing = 5

			textbox = {
				parentanchor = vcenter
				autoresize = yes
				elide = right
				fontsize_min = 12
				align = nobaseline

				block "text_max_width" {
					max_width = 340
				}

				block "button_text" {
					text = "[MapModeList.GetSelectedMapMode.GetName]"
				}
			}
		}

		block "right_icon" {
			widget = {
				parentanchor = right|vcenter
				position = { -7 0 }
				
				block "right_icon_size_selected" {
					size = { 30 30 }
				}

				icon = {
					size = { 200% 200% }
					parentanchor = center
					using = rotate_glow_animation_02
				}
						
				button = {
					size = { 100% 100% }
					parentanchor = center
					alwaystransparent = yes

					block "button_icon" {
						texture = "[MapModeList.GetSelectedMapMode.GetIcon]"
					}

					state = {
						name = large
						alpha = 1
						duration = 0.1
						using = Animation_Curve_Default
						on_finish = "[GetVariableSystem.Clear(Concatenate('map_mode_name_', MapModeList.GetSelectedMapMode.GetName))]"

						block "right_icon_size_selected" {
							size = { 30 30 }
						}
					}

					state = {
						name = small
						next = large
						trigger_when = "[GetVariableSystem.Exists(Concatenate('map_mode_name_', MapModeList.GetSelectedMapMode.GetName))]"
						alpha = 0.2
						duration = 0.1
						using = Animation_Curve_Default

						block "right_icon_size" {
							size = { 25 25 }
						}
					}
				}
			}
		}
	}

	
	### production method item
	type production_method_item = flowcontainer {
		minimumsize = { @panel_width -1 }
		background = {
			using = entry_bg_simple	
		}
		margin = { 5 5 }
		icon = {
			size = { 40 40 }
			texture = "[ProductionMethod.GetTexture]"
			parentanchor = left|vcenter
		}
		textbox = {
			text = "[ProductionMethod.GetNumOfBuildingsUsingThis(GetPlayer.Self)|v]"
			visible = "[GreaterThan_int32( ProductionMethod.GetNumOfBuildingsUsingThis( GetPlayer.Self ), '(int32)0' )]"
			tooltip = "NUM_BUILDINGS_WITH_PROD_METHOD_ACTIVE"
			margin_left = 10
			margin_right = 6
			autoresize = yes
			align = nobaseline
			parentanchor = vcenter
		}

		textbox = {
			text = "PRODUCTION_METHOD_ITEM"
			autoresize = yes
			align = left|nobaseline
			parentanchor = left|vcenter
		}
	}

	### building button
	type producing_building_button = container {
		enabled = "[BuildingType.IsBuildableInAnyState(GetPlayer.Self)]"
		alpha = "[TransparentIfFalse(BuildingType.IsBuildableInAnyState(GetPlayer.Self))]"
		minimumsize = { 108 110 }

		############################################################################################################################################################
		############################################################################################################################################################
		############################################################################################################################################################
		############################################################################################################################################################

		# ███╗   ███╗ ██████╗ ██████╗
		# ████╗ ████║██╔═══██╗██╔══██╗
		# ██╔████╔██║██║   ██║██║  ██║
		# ██║╚██╔╝██║██║   ██║██║  ██║
		# ██║ ╚═╝ ██║╚██████╔╝██████╔╝
		# ╚═╝     ╚═╝ ╚═════╝ ╚═════╝

		#E&F mod
		############################################################################################################################################################
		############################################################################################################################################################
		############################################################################################################################################################
		############################################################################################################################################################

		visible = "[Not(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(EqualTo_string(BuildingType.GetKey,'building_financial_centre'),EqualTo_string(BuildingType.GetKey,'building_financial_centre_arg')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_aus')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_bav')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_bel')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_bic')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_brz')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_chi')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_chl')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_den')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_dei')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_egy')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_fra')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_frm')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_gbr')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_gbr_2')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_gre')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_hkh')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_han')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_ita')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_jap')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_mex')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_net')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_nsw')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_ont')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_peu')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_por')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_pru')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_que')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_rus')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_saf')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_sar')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_sic')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_spa')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_swe')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_swi')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_tus')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_tur')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_uru')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_usa')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_usa_2')),EqualTo_string(BuildingType.GetKey,'building_financial_centre_sax')))]"
        
		############################################################################################################################################################
		############################################################################################################################################################
		############################################################################################################################################################
		############################################################################################################################################################

		# ███╗   ███╗ ██████╗ ██████╗
		# ████╗ ████║██╔═══██╗██╔══██╗
		# ██╔████╔██║██║   ██║██║  ██║
		# ██║╚██╔╝██║██║   ██║██║  ██║
		# ██║ ╚═╝ ██║╚██████╔╝██████╔╝
		# ╚═╝     ╚═╝ ╚═════╝ ╚═════╝

		#E&F mod
		############################################################################################################################################################
		############################################################################################################################################################
		############################################################################################################################################################
		############################################################################################################################################################

		tooltipwidget = {
			FancyTooltip_BuildingType = {}
		}
		
		button = {
			visible = "[BuildingType.IsBuildable]"
			using = default_button
			parentanchor = center
			size = { 100 105 }
			onclick = "[BuildingType.ActivateExpansionLens]"
		}
		
		icon = {
			visible = "[Not(BuildingType.IsBuildable)]"
			using = entry_bg_simple
			parentanchor = center
			size = { 100 105 }
		}
		
		icon = {
			texture = "[BuildingType.GetIcon]"
			position = { 0 8 }
			size = { 60 60 }
			parentanchor = hcenter
		}

		textbox = {
			raw_text = "#BOLD [BuildingType.GetNameNoFormatting]#!"
			align = hcenter|vcenter
			position = { 0 -6 }
			size = { 100% 40 }
			parentanchor = hcenter|bottom
			using = fontsize_small
			elide = right
			multiline = yes
			margin_left = 10
			margin_right = 10
		}

		textbox = {
			text = "[BuildingType.GetNumLevelsInCountryFormatted(GetPlayer.Self)]"
			visible = "[GreaterThan_int32(BuildingType.GetNumLevelsInCountryRaw(GetPlayer.Self), '(int32)0')]"
			datacontext = "[BuildingType]"
			size = { 50 25 }
			align = left|nobaseline
			using = fontsize_large
			position = { 10 2 }
			background = {
				using = blurry_dark_background
				margin = { 5 5 }
			}
		}

		textbox = {
			datacontext = "[BuildingType]"
			visible = "[And(And(BuildingType.IsBuildable, BuildingType.HasRequiredTechnologiesInCountry(GetPlayer.Self)), BuildingType.HasRequiredPrinciplesInCountry(GetPlayer.Self))]"
			raw_text = "#BOLD [BuildingType.GetNumAvailableStatesForBuilding|+]#!"
			tooltip = "BUILDING_ACTION_NUMBER"
			align = right|nobaseline
			parentanchor = right
			using = fontsize_large
			autoresize = yes
			position = { -10 2 }
			
			background = {
				using = blurry_dark_background
				margin = { 5 5 }
			}
		}
	}
	
	type market_orders_list = flowcontainer {
		direction = vertical
		minimumsize = { @panel_width_half 1 }
		
		#header
		default_header = {
			blockoverride "size"
			{
				size = { @panel_width_plus_14_half 38 }
			}
			blockoverride "text"
			{
				block "header_text" {
					text = "SOLD_BY"
				}
			}
		}
		
		#summary orders
		widget = {
			parentanchor = hcenter			
			datacontext = "[GoodsPanel.GetGoods]"
			size = { @panel_width_plus_14_half 45 }

			block "alpha_summary_orders" {
				alpha = "[TransparentIfZero(GoodsPanel.GetInputValuesTotal)]"
			}
			
			block "label_tooltip_orders" {
				tooltip = "GOODS_MARKET_SELL_ORDERS_BREAKDOWN"
			}
			
			hbox = {
				margin = { 10 0 }
				margin_bottom = 5
			
				textbox = {
					layoutstretchfactor_horizontal = 2
					layoutpolicy_horizontal = expanding
					size = { 0 35 }
					block "label_summary_orders" {
						text = "SELL_ORDERS"
					}
					align = left|nobaseline
					default_format = "#title"
					using = fontsize_large
					elide = right
				}

				textbox = {
					layoutstretchfactor_horizontal = 1
					layoutpolicy_horizontal = preferred
					size = { 0 35 }
					block "value_summary_orders" {
						text = "[GoodsPanel.GetInputValuesTotal|D]"
					}
					align = right|nobaseline
					using = fontsize_large
					default_format = "#variable"
				}
			}

			divider_clean = {
				parentanchor = bottom|hcenter
			}
		}

		#orders
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			minimumsize = { @panel_width_half 1 }

			block "datamodel_orders" {
				datamodel = "[GoodsPanel.GetInputValues]"
			}
			
			item = {
				flowcontainer = {
					direction = vertical

					using = market_goods_orders_with_table
					using = tooltip_above

					background = {
						visible = "[IsEven_int32(PdxGuiWidget.GetIndexInDataModel)]"
						using = dark_area
						alpha = 0.15
					}

					widget = {
						size = { @panel_width_plus_14_half 44 }


						hbox = {
							spacing = 5
							margin_left = 10

							icon = {
								visible = "[Not(GoodsPanelValue.HasBuildingTypeInfo)]"
								texture = "gfx/interface/icons/generic_icons/population.dds"
								size = { 30 30 }
							}

							icon = {
								visible = "[GoodsPanelValue.HasBuildingTypeInfo]"
								texture = "[GoodsPanelValue.GetBuildingType.GetIcon]"
								size = { 30 30 }
							}

							textbox = {
								raw_text = "[GoodsPanelValue.GetName]"
								autoresize = yes
								layoutpolicy_horizontal = preferred
								align = nobaseline
								elide = right
							}


							widget = {
								layoutpolicy_horizontal = expanding
							}

							container = {
								visible = "[GoodsPanelValue.HasBuildingTypeInfo]"

								container = {
									datacontext = "[GoodsPanelValue.GetBuildingType]"
									visible = "[And(Or( BuildingType.IsBuildable, BuildingType.IsExpandable ), Not(BuildingType.IsMilitaryBuilding))]"
									tooltip = "BUILDING_ACTION_NUMBER"

									button_icon_plus_action = {
										onclick = "[BuildingType.ActivateExpansionLens]"
										enabled = "[GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' )]"
										using = select_button_sound
										size = { 23 23 }
									}

									small_building_type_targets_indicator = {
										blockoverride "datacontext" {
											datacontext = "[GoodsPanelValue.GetBuildingType]"
										}

										blockoverride "tooltip" {}
									}
								}
							}


							textbox = {
								text = "[GoodsPanelValue.GetValue|Dv]"
								#autoresize = yes
								align = right|nobaseline
								size = { 45 23 }
								elide = right
								margin_right = 10
								fontsize_min = 12
							}
						}
					}

					flowcontainer = {
						visible = "[GoodsPanelValue.HasBuildingTypeInfo]"
						margin_bottom = 10
						margin_left = 12

						overlappingitembox = {
							visible = "[ObjectsEqual(GoodsPanelValue.GetBuildingType.Self, GetBuildingType('building_trade_center').Self)]"

							block "trade_center_provider" {
								datamodel = "[Goods.GetExportersToMarket]"
							}

							size = { 252 18 }
							righttoleft = yes
							spacing = 5

							item = {
								small_market_flag = {}
							}
						}
					}

					divider_clean = {
					}
				}
			}
		}						
	}

	type small_building_type_targets_indicator = textbox {
		block "datacontext" {}

		raw_text = "#BOLD [BuildingType.GetNumAvailableStatesForBuilding|+]#!"
		visible = "[And(And(BuildingType.IsBuildable, BuildingType.HasRequiredTechnologiesInCountry(GetPlayer.Self)), BuildingType.HasRequiredPrinciplesInCountry(GetPlayer.Self))]"
		
		block "tooltip" {
			tooltip = "BUILDING_ACTION_NUMBER"
		}

		align = right|nobaseline
		parentanchor = left
		autoresize = yes
		using = fontsize_small

		block "position" {
			position = { 15 -5 }
		}
		
		background = {
			using = blurry_dark_background
			margin = { 5 5 }
		}
	}
	
	type consumption_tax_button_toggle = button_icon_round_toggle_action {
		block "size" { 
			size = { 44 44 }
		}

		block "tooltip" {
			tooltip = "[Goods.GetTaxDesc(GetMetaPlayer.GetPlayedOrObservedCountry)]"
		}

		block "enabled" {
			enabled = "[IsValid( Goods.ToggleTaxation(GetMetaPlayer.GetPlayedOrObservedCountry) )]"
		}

		blockoverride "on_click" {
			onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
		}

		blockoverride "view_1" {
			visible = "[Not(GreaterThan_CFixedPoint(Goods.CalcConsumptionTaxAmount(GetPlayer), '(CFixedPoint)0'))]"
		}
		blockoverride "view_2" {
			visible = "[GreaterThan_CFixedPoint(Goods.CalcConsumptionTaxAmount(GetPlayer), '(CFixedPoint)0')]"
		}
		blockoverride "icon_1" {
			texture = "gfx/interface/icons/trade_icons/consumption_tax_not.dds"
		}

		blockoverride "icon_2" {
			texture = "gfx/interface/icons/trade_icons/consumption_tax.dds"
		}	
	}

	type goods_tooltip_price_info = container {
		flowcontainer = {
			direction = vertical
			margin = { 10 6 }
			spacing = 4

			background = {
				using = entry_bg_simple
			}

			flowcontainer = {
				spacing = 5
				textbox = {
					block "location" {
						text = "[concept_world_market]"
					}

					align = nobaseline
					autoresize = yes
					block "price_card_name_maximumsize" {
						maximumsize = { 130 -1 }
						minimumsize = { 130 -1 }
					}

					elide = right
				}
			}

			flowcontainer = {
				spacing = 10

				textbox = {
					block "price" {
						raw_text = "[GetPlayer.GetCustom('currency_symbol')][Goods.GetWorldMarketBasePrice|1v] [Goods.GetCompareIconAgainstBasePriceNoFormatting(Goods.GetWorldMarketBasePrice)] (#v [Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetWorldMarketBasePrice)|%0=-]#!)"
					}

					align = nobaseline
					autoresize = yes
					using = fontsize_xl
					parentanchor = vcenter

					block "price_margin_left" {
						margin_left = -4
					}

					margin_bottom = 10
					margin_right = 10
				}

				textbox = {
					block "compared_to_base_neutral" {
						raw_text = "(#v [Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetWorldMarketBasePrice)|%0=-]#!)"
					}

					align = nobaseline
					autoresize = yes
					parentanchor = vcenter
					margin_bottom = 10
				}

				textbox = {
					block "compared_to_base_negative" {
						raw_text = "(#v [Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetWorldMarketBasePrice)|%0=-]#!)"
					}

					align = nobaseline
					autoresize = yes
					parentanchor = vcenter
					margin_bottom = 10
				}

				textbox = {
					block "compared_to_base_positive" {
						raw_text = "(#v [Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetWorldMarketBasePrice)|%0=-]#!)"
					}

					align = nobaseline
					autoresize = yes
					parentanchor = vcenter
					margin_bottom = 10
				}
			}

			flowcontainer = {

				background = {
					using = dark_area
					margin = { 9 5 }
				}
				spacing = 2

				icon = {
					block "icon_balance" {
						visible = no
					}

					parentanchor = vcenter
					size = { 23 23 }
				}

				widget = {
					size = { 10 10 }

					block "icons_visible" {
						visible = no
					}
				}

				textbox = {
					block "balance_tooltip" {}

					block "balance_neutral" {
						raw_text = "#variable [Goods.GetWorldMarketExportsAndImportsBalance|=D+]#!"
					}

					align = nobaseline
					autoresize = yes
					margin_right = 10
					minimumsize = { 50 -1 }
				}

				textbox = {
					block "balance_tooltip" {}

					block "balance_negative" {
						raw_text = "#variable [Goods.GetWorldMarketExportsAndImportsBalance|=D+]#!"
					}

					align = nobaseline
					autoresize = yes
					margin_right = 10
					minimumsize = { 50 -1 }
				}

				textbox = {
					block "balance_tooltip" {}

					block "balance_positive" {
						raw_text = "#variable [Goods.GetWorldMarketExportsAndImportsBalance|=D+]#!"
					}

					align = nobaseline
					autoresize = yes
					margin_right = 10
					minimumsize = { 50 -1 }
				}

				vertical_divider = {}

				widget = {
					size = { 10 10 }

					block "icons_visible" {
						visible = no
					}
				}

				icon = {
					block "icon_input" {
						visible = no
					}

					parentanchor = vcenter
					size = { 23 23 }
				}

				textbox = {
					block "input" {
						text = "[Goods.GetWorldMarketExportsWithTooltip]"
					}

					align = left|nobaseline
					autoresize = yes
					margin = { 5 0 }
					minimumsize = { 50 -1 }
				}
				vertical_divider = {}

				widget = {
					size = { 10 10 }

					block "icons_visible" {
						visible = no
					}
				}

				icon = {
					block "icon_output" {
						visible = no
					}

					parentanchor = vcenter
					size = { 23 23 }
				}

				textbox = {
					block "output" {
						text = "[Goods.GetWorldMarketImportsWithTooltip]"
					}

					align = left|nobaseline
					autoresize = yes
					margin = { 5 0 }
					minimumsize = { 50 -1 }
				}
			}
		}

		button_icon_goto = {
			parentanchor = top|right
			size = { 23 23 }
			position = { -5 5 }
			
			block "price_card_goto_button" {
				datacontext = "[Goods.AccessState]"
				onclick = "[InformationPanelBar.OpenStatePanel( State.AccessSelf )]"
				tooltip = "GO_TO_BUTTON_STATE"
				visible = "[Goods.HasStateContext]"
			}

			input_action = "go_to_details"
		}
	}

	type state_price_card = flowcontainer {
		# Actual information
		goods_tooltip_price_info = {
			visible = "[And(Goods.GetState.IsValid, Not(Goods.IsGoodsMarketTabOpen))]"

			blockoverride "price" {
				raw_text = "[GetPlayer.GetCustom('currency_symbol')][Goods.GetStatePrice|v1] [Goods.GetCompareIconAgainstBasePriceNoFormatting(Goods.GetStatePrice)]"
			}

			blockoverride "compared_to_base_neutral" {
				visible = "[And( Not(LessThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetStatePrice), '(CFixedPoint)-0.01')), Not(GreaterThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetStatePrice), '(CFixedPoint)0.01')))]"
				text = "GOODS_LOCAL_PRICE"
			}
			
			blockoverride "compared_to_base_negative" {
				visible = "[LessThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetStatePrice), '(CFixedPoint)-0.01')]"
				text = "GOODS_LOCAL_PRICE_BLUE"
			}
			
			blockoverride "compared_to_base_positive" {
				visible = "[GreaterThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetStatePrice), '(CFixedPoint)0.01')]"
				text = "GOODS_LOCAL_PRICE_GOLD"
			}
			
			blockoverride "location" {
				datacontext = "[Goods.GetState]"
				text = "STATE_WITH_FLAG_UNLESS_OWNED_BY_PLAYER"
			}
			
			blockoverride "balance_tooltip" {
				tooltip = "STATE_GOODS_BALANCE_TOOLTIP"
			}

			blockoverride "balance_neutral" {
				visible = "[EqualTo_int32(FixedPointToInt(Goods.GetStateProductionConsumptionDiff), '(int32)0')]"
				text = "GOODS_LOCAL_PRICE_PANEL_BALANCE"
			}
			
			blockoverride "balance_negative" {
				visible = "[LessThan_int32(FixedPointToInt(Goods.GetStateProductionConsumptionDiff), '(int32)0')]"
				text = "GOODS_LOCAL_PRICE_PANEL_BALANCE_BLUE"
			}
			
			blockoverride "balance_positive" {
				visible = "[GreaterThan_int32(FixedPointToInt(Goods.GetStateProductionConsumptionDiff), '(int32)0')]"
				text = "GOODS_LOCAL_PRICE_PANEL_BALANCE_GOLD"
			}

			blockoverride "input" {
				raw_text = "[Goods.GetStateProductionWithTooltip]"
			}

			blockoverride "output" {
				raw_text = "[Goods.GetStateConsumptionWithTooltip]"
			}
		}

		# Empty state
		goods_tooltip_price_info = {
			visible = "[Or(Not(Goods.GetState.IsValid), Goods.IsGoodsMarketTabOpen)]"
			alpha = "[TransparentIfTrue('(bool)yes')]"

			blockoverride "price" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}

			blockoverride "price_margin_left" {}

			blockoverride "compared_to_base_neutral" {
				visible = no
			}
			
			blockoverride "compared_to_base_negative" {
				visible = no
			}
			
			blockoverride "compared_to_base_positive" {
				visible = no
			}
			
			blockoverride "location" {
				text = "[concept_local_price]"
			}
			
			blockoverride "balance_tooltip" {}

			blockoverride "balance_neutral" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}
			
			blockoverride "balance_negative" {
				visible = no
			}
			
			blockoverride "balance_positive" {
				visible = no
			}

			blockoverride "input" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}

			blockoverride "output" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}
		}
	}

	type market_price_card = flowcontainer {
		blockoverride "price_card_goto_button" {
			visible = "[Goods.HasMarketContext]"
			datacontext = "[Goods.GetMarket]"
			onclick = "[InformationPanelBar.OpenMarketPanel( Market.Self )]"
			tooltip = "GO_TO_BUTTON_MARKET"
		}

		# Actual information
		goods_tooltip_price_info = {
			visible = "[And(Not(Goods.IsLocal), Goods.GetMarket.IsValid)]"

			blockoverride "price" {
				raw_text = "[GetPlayer.GetCustom('currency_symbol')][Goods.GetMarketPrice|v1] [Goods.GetCompareIconAgainstBasePriceNoFormatting(Goods.GetMarketPrice)]"
			}

			blockoverride "compared_to_base_neutral" {
				visible = "[And( Not(LessThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice), '(CFixedPoint)-0.01')), Not(GreaterThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice), '(CFixedPoint)0.01')))]"
				text = "MARKET_PANEL_GOODS_PRICE"
			}
			
			blockoverride "compared_to_base_negative" {
				visible = "[LessThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice), '(CFixedPoint)-0.01')]"
				text = "MARKET_PANEL_GOODS_PRICE_BLUE"
			}
			
			blockoverride "compared_to_base_positive" {
				visible = "[GreaterThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetMarketPrice), '(CFixedPoint)0.01')]"
				text = "MARKET_PANEL_GOODS_PRICE_GOLD"
			}
			
			blockoverride "location" {
				datacontext = "[Goods.GetMarket]"
				raw_text = "MARKET_WITH_FLAG_UNLESS_OWNED_BY_PLAYER"
			}

			blockoverride "balance_tooltip" {
				tooltip = "MARKET_GOODS_BALANCE_TOOLTIP"
			}

			blockoverride "balance_neutral" {
				visible = "[EqualTo_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
				text = "MARKET_PANEL_BALANCE"
			}
			
			blockoverride "balance_negative" {
				visible = "[LessThan_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
				text = "MARKET_PANEL_BALANCE_BLUE"
			}
			
			blockoverride "balance_positive" {
				visible = "[GreaterThan_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
				text = "MARKET_PANEL_BALANCE_GOLD"
			}

			blockoverride "input" {
				raw_text = "[Goods.GetMarketSellOrdersWithTooltip]"
			}

			blockoverride "output" {
				raw_text = "[Goods.GetMarketBuyOrdersWithTooltip] "
			}
		}

		# Empty state
		goods_tooltip_price_info = {
			visible = "[Or(Goods.IsLocal, Not(Goods.GetMarket.IsValid))]"
			alpha = "[TransparentIfTrue('(bool)yes')]"

			blockoverride "price" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}

			blockoverride "price_margin_left" {}

			blockoverride "compared_to_base_neutral" {
				visible = no
			}
			
			blockoverride "compared_to_base_negative" {
				visible = no
			}
			
			blockoverride "compared_to_base_positive" {
				visible = no
			}
			
			blockoverride "location" {
				text = "[concept_market_price]"
			}
			
			blockoverride "balance_tooltip" {}

			blockoverride "balance_neutral" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}
			
			blockoverride "balance_negative" {
				visible = no
			}
			
			blockoverride "balance_positive" {
				visible = no
			}

			blockoverride "input" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}

			blockoverride "output" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}
		}
	}

	type world_market_price_card = flowcontainer {
		blockoverride "price_card_goto_button" {
			onclick = "[InformationPanelBar.OpenPanel('world_market')]"
			tooltip = "GO_TO_BUTTON_WORLD_MARKET"
		}

		# Actual information
		goods_tooltip_price_info = {
			visible = "[Not(Goods.IsLocal)]"
			blockoverride "price" {
				raw_text = "[GetPlayer.GetCustom('currency_symbol')][Goods.GetWorldMarketBasePrice|1v] [Goods.GetCompareIconAgainstBasePriceNoFormatting(Goods.GetWorldMarketBasePrice)]"
			}

			blockoverride "compared_to_base_neutral" {
				visible = "[And( Not(LessThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetWorldMarketBasePrice), '(CFixedPoint)-0.01')), Not(GreaterThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetWorldMarketBasePrice), '(CFixedPoint)0.01')))]"
				text = "WORLD_MARKET_PANEL_GOODS_PRICE"
			}
			
			blockoverride "compared_to_base_negative" {
				visible = "[LessThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetWorldMarketBasePrice), '(CFixedPoint)-0.01')]"
				text = "WORLD_MARKET_PANEL_GOODS_PRICE_BLUE"
			}
			
			blockoverride "compared_to_base_positive" {
				visible = "[GreaterThanOrEqualTo_CFixedPoint(Goods.GetPercentageDeltaAgainstBasePrice(Goods.GetWorldMarketBasePrice), '(CFixedPoint)0.01')]"
				text = "WORLD_MARKET_PANEL_GOODS_PRICE_GOLD"
			}
			
			blockoverride "location" {
				raw_text = "[concept_world_market]"
			}

			blockoverride "balance_tooltip" {
				tooltip = "WORLD_MARKET_GOODS_BALANCE_TOOLTIP"
			}

			blockoverride "balance_neutral" {
				visible = "[EqualTo_int32(FixedPointToInt(Goods.GetWorldMarketExportsAndImportsBalance), '(int32)0')]"
				text = "WORLD_MARKET_PANEL_BALANCE"
			}
			
			blockoverride "balance_negative" {
				visible = "[LessThan_int32(FixedPointToInt(Goods.GetWorldMarketExportsAndImportsBalance), '(int32)0')]"
				text = "WORLD_MARKET_PANEL_BALANCE_BLUE"
			}
			
			blockoverride "balance_positive" {
				visible = "[GreaterThan_int32(FixedPointToInt(Goods.GetWorldMarketExportsAndImportsBalance), '(int32)0')]"
				text = "WORLD_MARKET_PANEL_BALANCE_GOLD"
			}

			blockoverride "input" {
				raw_text = "[Goods.GetWorldMarketImportsWithTooltip] "
			}

			blockoverride "output" {
				raw_text = "[Goods.GetWorldMarketExportsWithTooltip]"
			}
		}

		# Empty state
		goods_tooltip_price_info = {
			visible = "[Goods.IsLocal]"
			alpha = "[TransparentIfTrue('(bool)yes')]"

			blockoverride "price" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}

			blockoverride "price_margin_left" {}

			blockoverride "compared_to_base_neutral" {
				visible = no
			}
			
			blockoverride "compared_to_base_negative" {
				visible = no
			}
			
			blockoverride "compared_to_base_positive" {
				visible = no
			}
			
			blockoverride "location" {
				text = "[concept_world_market_price]"
			}
			
			blockoverride "balance_tooltip" {}

			blockoverride "balance_neutral" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}
			
			blockoverride "balance_negative" {
				visible = no
			}
			
			blockoverride "balance_positive" {
				visible = no
			}

			blockoverride "input" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}

			blockoverride "output" {
				raw_text = "NOT_AVAILABLE"
				default_format = "#v"
			}
		}
	}
}
