@tooltip_max_width = 550 #copied from tooltip.gui

@tooltip_fixed_width = 500 #for 2 column layouts etc, since max_width is quite wide
@tooltip_fixed_column_width = 245 #tooltip_fixed_width/2 - 10/2
@tooltip_fixed_column_width_minus_40 = 205
@tooltip_fixed_column_width_minus_16 = 229

types TooltipTypes
{
	type custom_tooltip_textbox = DefaultTooltipTextBox {
		max_width = @tooltip_max_width
		fonttintcolor = "[TooltipInfo.GetTintColor]"
		multiline = yes
	}

	type custom_tooltip_textbox_column_width = custom_tooltip_textbox {
		maximumsize = { @tooltip_fixed_column_width -1 } 
	}

	type custom_tooltip_textbox_with_empty_line = custom_tooltip_textbox {
		margin_bottom = 15
	}

	type custom_tooltip_newline = widget {
		size = { 21 21 }
	}

	type tooltip_divider = widget {
		parentanchor = hcenter
		size = { 100% 20 }

		divider_clean = {
			parentanchor = center
		}
	}

	type custom_tooltip_2_columns = flowcontainer {
		direction = horizontal
		using = tooltip_segment_margin

		spacing = 10

		block "bg" 
		{
			using = tooltip_segment_background
		}


		flowcontainer = {
			direction = vertical
			max_width = @tooltip_fixed_column_width
			min_width = @tooltip_fixed_column_width
			block "left_column"
			{

			}
		}

		flowcontainer = {
			direction = vertical
			max_width = @tooltip_fixed_column_width
			min_width = @tooltip_fixed_column_width

			block "right_column"
			{

			}
		}
	}
	
	type FancyTooltip_DecreeType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "[DecreeType.GetTooltip(GetPlayer)]"
		}

		blockoverride "icon_texture" {
			texture = "[DecreeType.GetTexture]"
		}

		blockoverride "name" {
			text = "[DecreeType.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_DECREE_TYPE"
		}
	}
	
	type FancyTooltip_Law = FancyTooltipWidgetType {
		blockoverride "icon_texture" {
			texture = "[Law.GetTexture]"
		}
	
		blockoverride "name" {
			raw_text = "[Law.GetNameNoFormatting] ([Law.GetGroup.GetName])"
		}
	
		blockoverride "type" {
			text = "TOOLTIP_TYPE_CONSTITUTION_LAW"
		}
		
		blockoverride "text" {
			text = "DATA_LAW_NAME_TOOLTIP"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
		}

		blockoverride "tooltip_content_before" {
			custom_tooltip_textbox = {
				visible = "[Not(Or(Law.IsActive, Law.IsBeingEnacted))]"
				text = "ENACT_LAW_CHANCES_HEADER"
			}

			### ENACTMENT CHANCES
			widget = {
				visible = "[Not(Or(Law.IsActive, Law.IsBeingEnacted))]"
				size = { @tooltip_max_width 60 }

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					margin = { 15 5 }
					
					background = {
						using = entry_bg_simple
					}
					
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 5
						
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							spacing = 5
							
							custom_tooltip_textbox = {
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointSuccessChance, '(CFixedPoint)0'))]"
								layoutpolicy_horizontal = expanding
								size = { 0 14 }
								align = left|nobaseline
								elide = right
								fontsize_min = 14
								text = "OUTCOME_SUCCESS"
							}

							custom_tooltip_textbox = {
								layoutpolicy_horizontal = expanding
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointAdvanceChance, '(CFixedPoint)0'))]"
								size = { 0 14 }
								align = left|nobaseline
								elide = right
								fontsize_min = 14
								text = "OUTCOME_ADVANCE"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							spacing = 5
							
							custom_tooltip_textbox = {
								layoutpolicy_horizontal = expanding
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointDebateChance, '(CFixedPoint)0'))]"
								size = { 0 14 }
								align = left|nobaseline
								elide = right
								fontsize_min = 14
								text = "OUTCOME_DEBATE"
							}

							custom_tooltip_textbox = {
								layoutpolicy_horizontal = expanding
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointStallChance, '(CFixedPoint)0'))]"
								size = { 0 14 }
								align = left|nobaseline
								elide = right
								fontsize_min = 14
								text = "OUTCOME_STALL"
							}
						}
					}
				}
			}
		}
	}

	type FancyTooltip_LawType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_LAW_TYPE_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[LawType.GetTexture]"
		}

		blockoverride "name" {
			raw_text = "[LawType.GetNameNoFormatting] ([LawType.GetGroup.GetName])"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_LAW_TYPE"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			datacontext = "[LawType.GetGroup.GetCurrentlyActive]"
			onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
		}
	}

	type RegularTooltip_LawEnactment = RegularTooltip {
		blockoverride "tooltip_content_after" {

			custom_tooltip_textbox = {
				text = "TOOLTIP_ENACT_LAW_NAME"
			}

			custom_tooltip_textbox = {
				text = "TOOLTIP_ENACT_LAW_CURRENT_LAW_NAME"
			}

			custom_tooltip_textbox = {
				visible = "[Not(StringIsEmpty(Law.CannotEnactDesc))]"
				text = "[Law.CannotEnactDesc]"
			}

			tooltip_divider = {}

			custom_tooltip_textbox = {
				text = "ENACT_LAW_CHANCES_HEADER"
			}

			### ENACTMENT CHANCES
			widget = {
				size = { @tooltip_max_width 60 }

				vbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = preferred
					margin = { 15 5 }
					
					background = {
						using = entry_bg_simple
					}
					
					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = preferred
						spacing = 5
						
						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							spacing = 5
							
							custom_tooltip_textbox = {
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointSuccessChance, '(CFixedPoint)0'))]"
								layoutpolicy_horizontal = expanding
								size = { 0 14 }
								align = left|nobaseline
								elide = right
								fontsize_min = 14
								text = "OUTCOME_SUCCESS"
							}

							custom_tooltip_textbox = {
								layoutpolicy_horizontal = expanding
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointAdvanceChance, '(CFixedPoint)0'))]"
								size = { 0 14 }
								align = left|nobaseline
								elide = right
								fontsize_min = 14
								text = "OUTCOME_ADVANCE"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = preferred
							spacing = 5
							
							custom_tooltip_textbox = {
								layoutpolicy_horizontal = expanding
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointDebateChance, '(CFixedPoint)0'))]"
								size = { 0 14 }
								align = left|nobaseline
								elide = right
								fontsize_min = 14
								text = "OUTCOME_DEBATE"
							}

							custom_tooltip_textbox = {
								layoutpolicy_horizontal = expanding
								alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(Law.GetCheckpointStallChance, '(CFixedPoint)0'))]"
								size = { 0 14 }
								align = left|nobaseline
								elide = right
								fontsize_min = 14
								text = "OUTCOME_STALL"
							}
						}
					}
				}
			}

			custom_tooltip_newline = {}

			custom_tooltip_textbox = {
				text = "TOOLTIP_ENACT_COMMON"
			}
		}
	}

	type FancyTooltip_Market = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_MARKET_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[Market.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_MARKET"
		}

		blockoverride "color" {
			color = "[Market.GetOwner.GetMapColor]"
		}

		blockoverride "replace_icon" {
			small_flag = {
				parentanchor = center
				datacontext = "[Market.GetOwner]"
			}
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenMarketPanel(Market.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" 
		{
			datacontext = "[Market.GetFoodSecurity]"

			custom_tooltip_newline = {}

			custom_tooltip_textbox = {
				text = "DATA_MARKET_STARVATION_HEADER"
			}

			flowcontainer = {
				direction = vertical
				datamodel = "[GetStarvationTypes]"

				item = {
					flowcontainer = {
						spacing = 5
						margin_left = 10

						icon = {
							parentanchor = vcenter
							size = { 25 25 }
							texture = "[StarvationType.GetIcon]"
						}

						custom_tooltip_textbox = {
							parentanchor = vcenter
							text = "DATA_MARKET_STARVATION_ENTRY"
						}
					}
				}
			}

			custom_tooltip_newline = {
				visible = "[FoodSecurity.HasFamine]"
			}

			custom_tooltip_textbox = {
				visible = "[FoodSecurity.HasFamine]"
				text = "HAS_ONGOING_FAMINES"
			}
		}
	}
	
	type FancyTooltip_Institution = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_INSTITUTION_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Institution.GetIcon]"
		}
		
		blockoverride "name" {
			text = "DATA_INSTITUTION_TITLE_TOOLTIP"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_INSTITUTION"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPanelTab('politics', 'institutions')]"
		}
	}
	
	type FancyTooltip_InstitutionType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_INSTITUTION_TYPE_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[InstitutionType.GetIcon]"
		}
		
		blockoverride "name" {
			text = "[InstitutionType.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_INSTITUTION_TYPE"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPanelTab('politics', 'institutions')]"
		}
	}
	
	# This type pretends to be a Game Concept so we can reference it directly from GUI in cases where an IG is Invalid / Politically Unaligned
	type FancyTooltip_PoliticallyUnaligned = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "[concept_politically_unaligned_aligned_desc]"
		}

		blockoverride "name" {
			text = "concept_politically_unaligned"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_GAME_CONCEPT_TYPE"
		}

		blockoverride "icon_texture" {
			texture = "gfx/interface/icons/ig_icons/politically_unaligned.dds"
		}
	}
	
	type FancyTooltip_IG = FancyTooltipWidgetType {
		blockoverride "text" { }

		blockoverride "replace_icon" {
			ig_icon = {
				parentanchor = center
				size = { 52 52 }
				blockoverride "tooltip" {}
				blockoverride "in_government_icon" {}
			}
		}

		blockoverride "name" {
			text = "INTEREST_GROUP_TOOLTIP_NAME"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_INTEREST_GROUP"
		}

		blockoverride "color" {
			color = "[InterestGroup.GetColor]"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" 
		{
			custom_tooltip_2_columns = {
				blockoverride "bg" {}

				blockoverride "left_column" {
					custom_tooltip_textbox_column_width = {
						text = "IG_TT_IN_GOVERNMENT"		
					}
				}
			}

			custom_tooltip_2_columns = {
				blockoverride "left_column" {
					custom_tooltip_textbox_column_width = {
						text = "IG_TT_CLOUT"		
					}
				}

				blockoverride "right_column" {
					custom_tooltip_textbox_column_width = {
						text = "IG_TT_APPROVAL"		
					}
				}
			}

			custom_tooltip_2_columns = {
				blockoverride "bg" {}

				blockoverride "left_column" {
					DefaultTooltipTextBox = {
						autoresize = yes
						text = "IG_TT_IDEOLOGY_HEADER"
					}
					
					flowcontainer = {
						name = "ideologies_box"
						datamodel = "[InterestGroup.AccessAllIdeologies]"
						direction = vertical

						item = {
							flowcontainer = {
								spacing = 5
								
								icon = {						
									texture = "[Ideology.GetTexture]"
									size = { 20 20 }

									tooltipwidget = {
										FancyTooltip_Ideology = {}
									}

									using = tooltip_above
								}

								DefaultTooltipTextBox = {
									text = "[Ideology.GetName]"
									autoresize = yes
									parentanchor = vcenter
									align = nobaseline
								}
							}
						}
					}
				}

				blockoverride "right_column" {
					flowcontainer = {
						direction = vertical
					
						DefaultTooltipTextBox = {
							autoresize = yes
							text = "IG_TT_TRAITS_HEADER"
						}

						flowcontainer = {
							name = "traits_box"
							datamodel = "[InterestGroup.AccessTraits]"
							direction = vertical
							
							item = {
								flowcontainer = {
									alpha = "[TransparentIfFalse(InterestGroupTrait.IsEnabled(InterestGroup.Self))]"

									spacing = 5
									
									icon = {						
										texture = "[InterestGroupTrait.GetTexture]"
										enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
										size = { 15 20 }
										parentanchor = vcenter

										tooltipwidget = {
											FancyTooltip_InterestGroupTrait = {}
										}

										using = tooltip_above
									}

									DefaultTooltipTextBox = {
										text = "IG_TT_TRAIT_ENTRY"
										autoresize = yes
										parentanchor = vcenter
										align = nobaseline

										fontsize_min = 14
										elide = right
										max_width = @tooltip_fixed_column_width_minus_40
									}
								}
							}
						}
					}
				}
			}

			custom_tooltip_2_columns = {
				blockoverride "left_column" {
					custom_tooltip_textbox_column_width = {
						text = "IG_TT_POPULATION_LOYAL_RADICAL"		
					}
				}

				blockoverride "right_column" {
					custom_tooltip_textbox_column_width = {
						text = "[InterestGroup.GetSupportingPopTypesDesc]"		
					}
				}
			}

			flowcontainer = {
				using = tooltip_segment_margin
				direction = vertical

				custom_tooltip_textbox = {
					text = "IG_TT_LEADER"		
				}

				custom_tooltip_textbox = {
					text = "IG_TT_PARTY"
				}	

				flowcontainer = {
					direction = vertical

					visible = "[Not(IsDataModelEmpty(InterestGroup.GetPoliticalLobbies))]" 

					#custom_tooltip_newline = {}

					custom_tooltip_textbox = {
						text = "IG_TT_LOBBY_HEADER" 
					}

					datamodel = "[InterestGroup.GetPoliticalLobbies]"

					item = {
						custom_tooltip_textbox = {
							text = "IG_TT_LOBBY_ENTRY"
						}
					}
				}
			}

			custom_tooltip_textbox = {
				using = tooltip_segment_background
				using = tooltip_segment_margin

				text = "[InterestGroup.GetDesc]"
				min_width = @tooltip_fixed_width
				max_width = @tooltip_fixed_width
				default_format = "#lore"
			}
		}
	}

	type FancyTooltip_Party = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_PARTY_NAME_TOOLTIP"
		}

		blockoverride "replace_icon" {
			party_icon = {
				parentanchor = center
				size = { 52 52 }
				blockoverride "tooltip" {}
			}
		}

		blockoverride "name" {
			text = "[Party.GetName]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PARTY"
		}

		blockoverride "color" {
			color = "[Party.GetColor]"
		}

		blockoverride "go_to_button_visibility" {
			visible = no
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPartyPanel(Party.AccessSelf)]"
		}

		blockoverride "table_visibility" {
			visible = yes
		}

		blockoverride "row_background" {
			using = dark_area
		}

		blockoverride "table_datamodel" {
			datamodel = "[Party.GetMembers]"
		}

		blockoverride "table_header_1" {
			text = "[concept_interest_group]"
		}

		blockoverride "table_header_2" {
			text = "[concept_clout]"
		}

		blockoverride "table_header_3" {
			text = "[concept_approval]"
		}

		blockoverride "table_header_4" {
			text = "AFFILIATION"
		}

		blockoverride "table_value_1" {
			text = "[InterestGroup.GetName]"
		}

		blockoverride "table_value_2" {
			using = clout_tooltip_with_graph
			raw_text = "#BOLD [InterestGroup.GetClout|1%] #!"
		}

		blockoverride "table_value_3" {
			raw_text = "[InterestGroup.GetApprovalRating] (#variable [InterestGroup.GetApprovalValue|+=]#!)"
			tooltip = "IG_APPROVAL_BREAKDOWN"						
		}

		blockoverride "table_value_4" {
			minimumsize = { 100 -1 }
			raw_text = "#tooltippable [InterestGroup.GetAffiliationRaw|+=0]#!"
			tooltip = "[InterestGroup.GetPartyAffiliationTooltip]"
			margin_right = 5
		}
	}

	type FancyTooltip_Ideology = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_IDEOLOGY_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Ideology.GetTexture]"
		}

		blockoverride "name" {
			text = "[Ideology.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_IDEOLOGY"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}
	}
	
	type FancyTooltip_GameConceptType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_GAME_CONCEPT_TYPE_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[GameConceptType.GetTitle]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_GAME_CONCEPT_TYPE"
		}

		blockoverride "icon_texture" {
			texture = "[GameConceptType.GetTexture]"
		}
			
		blockoverride "buttons" {
			flowcontainer = {
				margin_top = 10
				parentanchor = hcenter
				
				button = {
					using = default_button
					size = { 460 60 }
					text = "GUIDE_ME"
					tooltip = "[GameConceptType.CanStartTutorialLessonDesc]"
					visible = "[GameConceptType.HasTutorialLesson]"
					enabled = "[GameConceptType.CanStartTutorialLesson]"
					onclick = "[GameConceptType.StartTutorialLesson]"
				}
			}
		}
	}

	type FancyTooltip_LawGroup = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_LAW_GROUP_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[LawGroup.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_LAW_GROUP"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			datacontext = "[LawGroup.GetCurrentlyActive]"
			onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
		}
	}

	type FancyTooltip_Goods = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_GOODS_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Goods.GetTexture]"
		}

		blockoverride "name" {
			text = "[Goods.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_GOODS"
		}

		blockoverride "color" {
			color = "[Goods.GetCategoryColor]"
		}

		blockoverride "go_to_button" {
			button_icon_goto = {
				visible = "[Or(Goods.HasStateContext, Goods.IsLocal)]"
				size = { 30 30 }
				input_action = "go_to_details"
				using = tooltip_above
				tooltip = "GO_TO_DETAILS"
				onclick = "[InformationPanelBar.OpenGoodsStatePanel(Goods.GetState, Goods.Self)]"
			}

			button_icon_goto = {
				visible = "[And(Goods.HasMarketContext, Not(Or(Goods.HasStateContext, Goods.IsLocal)))]"
				size = { 30 30 }
				input_action = "go_to_details"
				using = tooltip_above
				tooltip = "GO_TO_DETAILS"
				onclick = "[InformationPanelBar.OpenGoodsPanel(Goods.GetMarket, Goods.Self)]"
			}

			button_icon_goto = {
				visible = "[Not(Or(Goods.HasMarketContext, Goods.HasStateContext))]"
				size = { 30 30 }
				input_action = "go_to_details"
				using = tooltip_above
				tooltip = "GO_TO_DETAILS"
				onclick = "[InformationPanelBar.OpenGoodsPanel(GetPlayer.GetMarket.Self, Goods.Self)]"
			}
		}

		blockoverride "tooltip_content_after" {
			widget = {
				visible = "[Goods.HasMarketContext]"
				size = { 15 15 }
			}

			widget = {
				visible = "[Goods.HasMarketContext]"
				size = { 500 60 }
				parentanchor = hcenter
				
				background = {
					using = entry_bg_simple
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					spacing = 10
					margin = { 10 0 }
					
					textbox = {
						autoresize = yes
						align = nobaseline
						text = "BUDGET_TARIFFS"
					}
					
					container = {
						name = "tutorial_highlight_market_goods_policy"
						set_level_bar_market_tariffs = {}
					}
					
					textbox = {
						layoutpolicy_horizontal = expanding
						align = right|nobaseline
						text = "BUDGET_CONSUMPTION_TAXES"
					}
					
					consumption_tax_button_toggle = {
						visible = "[Not(ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.GetCapital.GetMarket, Goods.GetMarket))]"
						
						blockoverride "tooltip" {
							tooltip = "NOT_PLAYER_MARKET_CONSUMPTION_TAXES"
						}

						blockoverride "enabled" {
							enabled = no
						}
					}

					consumption_tax_button_toggle = {
						visible = "[ObjectsEqual(GetMetaPlayer.GetPlayedOrObservedCountry.GetCapital.GetMarket, Goods.GetMarket)]"
					}
				}
			}

			v3_plotline = {
				visible = "[And(Goods.HasPriceTrend,Not(Goods.IsLocal))]"
				using = default_list_position

				blockoverride "size" {
					size = { 260 100 }
				}
				blockoverride "header" {
					text = "PRICE"
				}
				blockoverride "line_color" {
					color = { .9 .9 .9 1.0 }
				}
				blockoverride "line_plotpoints" {
					visible = "[Not(IsEmpty(Goods.GetPriceTrend))]"
					plotpoints = "[GetTrendPlotPointsNormalized( Goods.GetPriceTrend, Goods.GetMinPrice, Goods.GetMaxPrice )]"
				}
				blockoverride "maxvalue" {
					raw_text = "@money![Goods.GetMaxPrice]"
				}
				blockoverride "minvalue" {
					raw_text = "@money![Goods.GetMinPrice]"
				}
				blockoverride "startdate" {
					text = "[GetOldestDate(Goods.GetPriceTrend)]"
				}
				blockoverride "enddate" {
					text = "[GetLatestDate(Goods.GetPriceTrend)]"
				}
				blockoverride "multiitem" {}
				
				blockoverride "extra_plotlines" {
					### Base Price line
					plotline = {
						size = { 100% 100% }
						using = plot_line
						width = 1
						color = { 0 0 0 0.5 }
						plotpoints = "[Goods.GetBasePricePlotPoints]"
					}
				}
				blockoverride "empty_state_visibility" {
					visible = "[IsEmpty(Goods.GetPriceTrend)]"
				}

				blockoverride "everything_that_is_not_empty_state_visibility" {
					visible = "[Not(IsEmpty(Goods.GetPriceTrend))]"
				}


				blockoverride "empty_state_text" {
					text = "GRAPH_NOT_INITIALIZED"
				}
			}
		}
	}

	type FancyTooltip_Goods_Pop_Consumption = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_GOODS_POP_CONSUMPTION_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopConsumptionGoods.GetGoods.GetTexture]"
		}

		blockoverride "name" {
			text = "POP_GOODS_CONSUMPTION_TOOLTIP_HEADER"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_GOODS"
		}

		blockoverride "color" {
			color = "[PopConsumptionGoods.GetGoods.GetCategoryColor]"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenGoodsUsagePanel(PopConsumptionGoods.GetGoods.Self)]"
		}

		blockoverride "tooltip_content_after" {}
	}

	type FancyTooltip_HarvestConditionType = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "name" {
			text = "[HarvestConditionType.GetNameNoIcon]"
		}

		blockoverride "type" {
			text = "[concept_harvest_condition]"
		}

		blockoverride "icon_texture" {
			texture = "[HarvestConditionType.GetIcon]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox = {
				visible = "[Not(StringIsEmpty(HarvestConditionType.GetEffectDesc))]"
				text = "HARVEST_CONDITION_TYPE_EFFECTS_DESC"
			}

			tooltip_divider = {}

			custom_tooltip_textbox = {
				default_format = "#lore"
				text = "HARVEST_CONDITION_TYPE_DESC"
			}
		}
	}

	type FancyTooltip_HarvestConditionArea = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "name" {
			text = "HARVEST_CONDITION_AREA_NAME_HEADER"
		}

		blockoverride "type" {
			text = "[concept_harvest_condition]"
		}

		blockoverride "icon_texture" {
			texture = "[HarvestConditionArea.GetType.GetIcon]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox = {
				text = "HARVEST_CONDITION_AREA_DURATION_LABEL"
			}

			custom_tooltip_textbox_with_empty_line = {
				text = "HARVEST_CONDITION_AREA_INTENSITY"
			}

			custom_tooltip_textbox_with_empty_line = {
				text = "[HarvestConditionArea.GetEffectDesc]"
			}

			### The 5 first affected player States
			custom_tooltip_textbox = {
				visible = "[Not(IsDataModelEmpty(HarvestConditionArea.GetHarvestConditionsAffecting(GetPlayer.Self)))]"
				text = "HARVEST_CONDITION_AREA_PLAYER_STATES_LIST_HEADER_FORMAT"
			}

			dynamicgridbox = {
				visible = "[Not(IsDataModelEmpty(HarvestConditionArea.GetHarvestConditionsAffecting(GetPlayer.Self)))]"
				datamodel = "[DataModelFirst(HarvestConditionArea.GetHarvestConditionsAffecting(GetPlayer.Self),'(int32)5')]"

				item = {
					harvest_condition_tooltip_item = {}
				}
			}

			### If more than 5 affected player States, here are the additional
			custom_tooltip_textbox = {
				visible = "[GreaterThan_int32(GetDataModelSize(HarvestConditionArea.GetHarvestConditionsAffecting(GetPlayer.Self)), '(int32)5')]"
				default_format = "#tooltippable"
				text = "HARVEST_CONDITION_AREA_PLAYER_STATES_ADDITIONAL"

				tooltipwidget = {
					RegularTooltip = {
						blockoverride "tooltip_content" {
							flowcontainer = {
								parentanchor = hcenter
								spacing = 2
								direction = vertical

								flowcontainer = {
									parentanchor = hcenter
									direction = vertical
									datamodel = "[DataModelSubSpan(HarvestConditionArea.GetHarvestConditionsAffecting(GetPlayer.Self), '(int32)5', '(int32)20')]"

									item = {
										harvest_condition_tooltip_item = {}
									}
								}

								### If more than 15 affected player States, here are the additional
								custom_tooltip_textbox = {
									visible = "[GreaterThan_int32(GetDataModelSize(HarvestConditionArea.GetHarvestConditionsAffecting(GetPlayer.Self)), '(int32)20')]"
									text = "HARVEST_CONDITION_AREA_PLAYER_STATES_ADDITIONAL_END"
								}
							}
						}
					}
				}
			}

			custom_tooltip_newline = {
				visible = "[And(Not(IsDataModelEmpty(HarvestConditionArea.GetHarvestConditionsNotAffecting(GetPlayer.Self))),Not(IsDataModelEmpty(HarvestConditionArea.GetHarvestConditionsAffecting(GetPlayer.Self))))]"
			}

			### The 5 first affected non-player States
			custom_tooltip_textbox = {
				visible = "[Not(IsDataModelEmpty(HarvestConditionArea.GetHarvestConditionsNotAffecting(GetPlayer.Self)))]"
				text = "HARVEST_CONDITION_AREA_OTHER_STATES_LIST_HEADER_FORMAT"
			}

			dynamicgridbox = {
				visible = "[Not(IsDataModelEmpty(HarvestConditionArea.GetHarvestConditionsNotAffecting(GetPlayer.Self)))]"
				datamodel = "[DataModelFirst(HarvestConditionArea.GetHarvestConditionsNotAffecting(GetPlayer.Self),'(int32)5')]"

				item = {
					harvest_condition_tooltip_item = {}
				}
			}

			### If more than 5 affected non-player States, here are the additional
			custom_tooltip_textbox = {
				visible = "[GreaterThan_int32(GetDataModelSize(HarvestConditionArea.GetHarvestConditionsNotAffecting(GetPlayer.Self)), '(int32)5')]"
				default_format = "#tooltippable"
				text = "HARVEST_CONDITION_AREA_OTHER_STATES_ADDITIONAL"

				tooltipwidget = {
					RegularTooltip = {
						blockoverride "tooltip_content" {
							flowcontainer = {
								parentanchor = hcenter
								spacing = 2
								direction = vertical

								flowcontainer = {
									parentanchor = hcenter
									direction = vertical
									datamodel = "[DataModelSubSpan(HarvestConditionArea.GetHarvestConditionsNotAffecting(GetPlayer.Self), '(int32)5', '(int32)20')]"

									item = {
										harvest_condition_tooltip_item = {}
									}
								}

								### If more than 15 affected player States, here are the additional
								custom_tooltip_textbox = {
									visible = "[GreaterThan_int32(GetDataModelSize(HarvestConditionArea.GetHarvestConditionsNotAffecting(GetPlayer.Self)), '(int32)20')]"
									text = "HARVEST_CONDITION_AREA_OTHER_STATES_ADDITIONAL_END"
								}
							}
						}
					}
				}
			}

			tooltip_divider = {}

			custom_tooltip_textbox = {
				default_format = "#lore"
				text = "HARVEST_CONDITION_AREA_DESC"
			}
		}
	}

	type FancyTooltip_HarvestCondition = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "name" {
			text = "HARVEST_CONDITION_NAME_HEADER"
		}

		blockoverride "type" {
			text = "[concept_harvest_condition]"
		}

		blockoverride "icon_texture" {
			texture = "[HarvestCondition.GetType.GetIcon]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox = {
				text = "HARVEST_CONDITION_DURATION_LABEL"
			}

			custom_tooltip_textbox_with_empty_line = {
				text = "HARVEST_CONDITION_INTENSITY"
			}

			custom_tooltip_textbox = {
				text = "[HarvestCondition.GetEffectDesc]"
			}

			tooltip_divider = {}

			custom_tooltip_textbox = {
				default_format = "#lore"
				text = "HARVEST_CONDITION_DESC"
			}
		}
	}

	type harvest_condition_tooltip_item = widget {
		size = { 540 40 }

		tooltipwidget = {
			FancyTooltip_HarvestCondition = {}
		}

		background = {
			using = entry_bg_simple
		}

		textbox = {
			parentanchor = vcenter
			size = { 40 30 }
			position = { 10 0 }
			align = nobaseline
			elide = right
			fontsize_min = 12
			text = "HARVEST_CONDITION_AREA_STATE_ENTRY_INTENSITY"
		}

		flowcontainer = {
			parentanchor = vcenter
			position = { 60 0 }
			spacing = 5

			tiny_flag_no_interact = {
				parentanchor = vcenter
				datacontext = "[HarvestCondition.GetState.GetCountry]"
			}

			textbox = {
				parentanchor = vcenter
				max_width = 170
				align = nobaseline
				autoresize = yes
				elide = right
				fontsize_min = 12
				text = "HARVEST_CONDITION_AREA_STATE_ENTRY_NAME"
			}
		}

		flowcontainer = {
			datacontext = "[HarvestCondition.GetState.GetFoodSecurity]"

			parentanchor = right|vcenter
			position = { -10 0 }
			spacing = 5

			flowcontainer = {
				visible = "[FoodSecurity.HasFamine]"
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/famine_icon.dds"
				}

				textbox = {
					parentanchor = vcenter
					size = { 60 30 }
					align = nobaseline
					elide = right
					fontsize_min = 12

					block "starvation_famine_text" {
						raw_text = "[concept_famine]"
					}
				}
			}

			vertical_divider = {
				visible = "[FoodSecurity.HasFamine]"
			}

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/mild_starvation.dds"
				}

				textbox = {
					parentanchor = vcenter
					size = { 40 30 }
					align = nobaseline
					elide = right
					fontsize_min = 12

					block "starvation_mild_text" {
						raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsMild|0%]#!"
					}
				}
			}

			vertical_divider = {}

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/severe_starvation.dds"
				}

				textbox = {
					parentanchor = vcenter
					size = { 40 30 }
					align = nobaseline
					elide = right
					fontsize_min = 12

					block "starvation_severe_text" {
						raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsSevere|0%]#!"
					}
				}
			}
		}
	}

	type FancyTooltip_PopNeed =  FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "name" {
			text = "POP_NEEDS_NAME_HEADER"
		}

		blockoverride "type" {
			text = "[concept_pop_needs]"
		}

		blockoverride "icon_texture" {
			texture = "gfx/interface/icons/generic_icons/generic_concept_icon.dds"
		}

		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox_with_empty_line = {
				text = "[PopNeed.GetConsumptionDesc]"
			}

			custom_tooltip_textbox = {
				text = "POP_NEEDS_HEADER"
			}
			
			flowcontainer = {
				direction = vertical
				datamodel = "[PopNeed.GetGoods]"
			
				item = {
					flowcontainer = {
						spacing = 5
			
						icon = {
							parentanchor = vcenter
							size = { 25 25 }
							texture = "[Goods.GetTexture]"
						}
			
						custom_tooltip_textbox = {
							parentanchor = vcenter
							max_width = 500
							text = "[PopNeed.GetGoodsEquivalenceDesc(Goods.Self)]"
						}
					}
				}
			}
		}
	}

	type FancyTooltip_PopType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_POP_TYPE_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "[PopType.GetNameNoIcon]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type FancyTooltip_PopTypeBuilding = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_POP_TYPE_NAME_IN_BUILDING_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "POP_TYPE_IN_BUILDING_HEADER"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}
	}

	type FancyTooltip_PopTypeState = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_POP_TYPE_NAME_IN_STATE_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "POP_TYPE_IN_STATE_HEADER"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type FancyTooltip_PopTypeCulture = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_POP_TYPE_NAME_IN_CULTURE_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "POP_TYPE_IN_CULTURE_HEADER"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type FancyTooltip_PopTypeReligion = FancyTooltipWidgetType {
		
		blockoverride "text" {
			text = "DATA_POP_TYPE_NAME_IN_RELIGION_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "POP_TYPE_IN_RELIGION_HEADER"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type FancyTooltip_PopTypeInterestGroup = FancyTooltipWidgetType {
		
		blockoverride "text" {
			text = "DATA_POP_TYPE_NAME_IN_IG_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PopType.GetTexture]"
		}

		blockoverride "name" {
			text = "POP_TYPE_IN_IG_HEADER"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PROFESSION"
		}

		blockoverride "color" {
			color = "[PopType.GetColor]"
		}
	}

	type FancyTooltip_Pop = FancyTooltipWidgetType {
		blockoverride "text_debug" {
			text = "[Pop.GetDebugInfo]"
		}

		blockoverride "text" {
			text = "DATA_POP_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Pop.GetPopType.GetTexture]"
		}

		blockoverride "name" {
			text = "[Pop.GetNameNoIcon]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_POP"
		}

		blockoverride "color" {
			color = "[Pop.GetPopType.GetColor]"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPopDetailsPanel(Pop.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" {
			flowcontainer = {
				direction = vertical

				flowcontainer = {
					datacontext = "[Pop.AccessBuilding]"
					visible = "[And(Not(IsDataModelEmpty(Building.GetBuildingAssets)), Pop.IsEmployed)]"

					margin_top = 5
					margin_bottom = 15
					margin_left = -2 # Alignment because the texture of the bar has built in margins

					property_portfolio_stacked_bar_chart_short = {
						blockoverride "barchart_size" {
							size = { 380 40 }
						}
					}
				}

				flowcontainer = {
					datacontext = "[Pop.AccessBuilding]"
					direction = vertical
					margin_bottom = 10
					spacing = 5

					textbox = {
						raw_text = "[concept_pop_needs]:"
						autoresize = yes
						align = nobaseline
					}

					v3_stacked_barchart = {
						parentanchor = hcenter
						size = { 380 40 }

						blockoverride "barchart_datamodel" {
							datamodel = "[Pop.GetTopGoodsConsumption]"
						}

						blockoverride "barchart_item_stretchfactor" {
							# This is what is actually setting the size of the item
							layoutstretchfactor_horizontal = "[FixedPointToInt(Multiply_CFixedPoint(PopConsumptionGoods.GetConsumptionRatio, '(CFixedPoint)100'))]"
						}

						blockoverride "barchart_item_datacontext" {
							datacontext = "[PopConsumptionGoods.GetGoods]"
						}

						blockoverride "barchart_item_tooltip" {
							tooltipwidget = {
								FancyTooltip_Goods_Pop_Consumption = {}
							}
						}

						blockoverride "barchart_item_color" {
							color = "[Goods.GetCategoryColor]"
						}

						blockoverride "barchart_item_margins" {}

						blockoverride "barchart_item_icon" {
							widget = {
								size = { 34 40 }
								icon = {
									texture = "[Goods.GetTexture]"
									tooltip = "[Goods.GetStatePriceDesc]"
									size = { 30 30 }
									parentanchor = center
									position = { -2 0 }

									textbox = {
										using = fontsize_small
										text = "[Goods.GetCompareIconAgainstBasePriceNoTooltip( Goods.GetStatePrice )]"
										parentanchor = bottom|right
										autoresize = yes
										align = nobaseline
										position = { 5 0 }
									}
								}
							}
						}

						blockoverride "barchart_plus_others_info" {
							text = "AND_X_MORE_NEEDS"
							tooltip = "NEEDS_BREAKDOWN"
							size = { 32 -1 }
						}
					}
				}
			}

			flowcontainer = {
				scale = 0.8
				parentanchor = hcenter
				margin_top = 20
				spacing = -20
				margin_bottom = -50
				pop_portrait_medium_male = {}
				pop_portrait_medium_female = { }
			}
		}
	}

	type FancyTooltip_PopSupporters = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_POP_SUPPORTERS_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Pop.GetPopType.GetTexture]"
		}

		blockoverride "name" {
			text = "[Pop.GetName]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_POP"
		}

		blockoverride "color" {
			color = "[Pop.GetPopType.GetColor]"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPopDetailsPanel(Pop.AccessSelf)]"
		}
	}

	type FancyTooltip_Country = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_COUNTRY_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "DATA_COUNTRY_NAME"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_COUNTRY"
		}

		blockoverride "color" {
			color = "[Country.GetMapColor]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "replace_icon" {
			small_flag = {
				visible = "[And(IsInGame, Country.IsValid)]"
				parentanchor = center

				blockoverride "flag_tooltip" {}
			}
			small_flag = {
				# Disable clicking invalid flags
				visible = "[And(IsInGame, Not(Country.IsValid))]"
				parentanchor = center

				blockoverride "flag_tooltip" {}
				blockoverride "flag_click" {}
			}
			small_flag = {
				visible = "[Not( IsInGame )]"
				parentanchor = center

				blockoverride "flag_tooltip" {}
				blockoverride "flag_click" {}
			}
		}

		blockoverride "go_to_button_visibility" {
			visible = "[Country.IsValid]"
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"
		}

		blockoverride "tooltip_content_after" {
			flowcontainer = {
				direction = vertical
				visible = "[Not(Country.IsPlayer)]"

				widget = {
					visible = "[StringIsEmpty(Country.GetAttitudeTowards(GetPlayer.Self).GetStrategicDesireDesc)]"
					size = { 14 14 }
				}

				flowcontainer = {
					datamodel = "[Country.AccessStrategies]"
					spacing = 3
					direction = vertical
					margin_top = 5
					margin_bottom = 5
					
					item = {
						flowcontainer = {
							tooltip = "[AIStrategy.GetTooltip(Country.Self)]"
							spacing = 10

							icon = {
								size = { 25 25 }
								texture = "[AIStrategy.GetTexture]"
								parentanchor = vcenter
							}

							textbox = {
								parentanchor = vcenter
								autoresize = yes
								text = "[AIStrategy.GetName|v]"
								align = left|nobaseline
								using = tooltip_font
							}
						}
					}
				}
			}
		}
	}

	type FancyTooltip_Culture = FancyTooltipWidgetType {
		blockoverride "text" { }

		blockoverride "name" {
			text = "CULTURE_TT_HEADING"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_CULTURE"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenCultureInfoPanel(Culture.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" 
		{	
			custom_tooltip_2_columns = {
				blockoverride "bg" {}
				
				blockoverride "left_column"
				{
					custom_tooltip_textbox = {
						text = "CULTURE_TT_TURMOIL_WORLDWIDE"
					}
				}

				blockoverride "right_column"
				{
					custom_tooltip_textbox = {
						text = "CULTURE_TT_MIGRATION_TARGETS"		
					}
				}
			}

			custom_tooltip_2_columns = {
				blockoverride "left_column"
				{
					custom_tooltip_textbox = {
						text = "CULTURE_TT_OBSESSIONS"		
					}
				}

				blockoverride "right_column"
				{
					custom_tooltip_textbox = {
						text = "CULTURE_TT_TABOOS"		
					}
				}
			}

			custom_tooltip_2_columns = {

				blockoverride "bg" {}

				blockoverride "left_column"
				{
					custom_tooltip_textbox = {
						text = "CULTURE_TT_TRAITS"		
					}
				}

				blockoverride "right_column"
				{
					custom_tooltip_textbox = {
						text = "CULTURE_TT_RELIGION"		
					}
				}
			}
			

			flowcontainer = {
				visible = "[GetPlayer.IsValid]"
				direction = vertical

				using = tooltip_segment_background
				using = tooltip_segment_margin

				min_width = @tooltip_fixed_width
				max_width = @tooltip_fixed_width

				custom_tooltip_textbox = {
					text = "CULTURE_RELIGION_TT_IN_PLAYER_COUNTRY"
				}
				
				flowcontainer = {
					visible = "[NotEqualTo_int64(Culture.GetPopulation(GetPlayer.Self),'(int64)0')]"
					direction = vertical

					custom_tooltip_textbox = {
						text = "CULTURE_TT_POPULATION"
					}

					custom_tooltip_textbox = {
						text = "CULTURE_TT_POLITICAL_STRENGTH"
					}

					custom_tooltip_textbox = {
						text = "CULTURE_TT_TURMOIL"
					}

				}

				custom_tooltip_textbox = {
					visible = "[EqualTo_int64(Culture.GetPopulation(GetPlayer.Self),'(int64)0')]"
					raw_text = "CULTURE_TT_NO_POPULATION_IN_PLAYER_COUNTRY"
				}

				custom_tooltip_newline = {}

				custom_tooltip_textbox = {
					text = "CULTURE_TT_ACCEPTANCE_MOD"

					max_width = @tooltip_fixed_width
				}				

				flowcontainer = {
					direction = vertical
					visible = "[NotEqualTo_int64(Culture.GetPopulation(GetPlayer.Self),'(int64)0')]"

					custom_tooltip_newline = {}

					custom_tooltip_textbox = {
						text = "CULTURE_ACCEPTANCE_STATUS_DISTRIBUTION_LABEL_TT"
						max_width = @tooltip_fixed_width
					}

					population_acceptance_status_chart = {
						blockoverride "barchart_size" {
							size = { @tooltip_fixed_width 40 }
						}

						blockoverride "barchart_datamodel" {
							datamodel = "[Culture.GetAllAcceptanceStatusSegments(GetPlayer)]"
						}
					}
				}
			}
		}
	}

	type FancyTooltip_CulturalCommunity = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_CULTURAL_COMMUNITY_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "CULTURAL_COMMUNITY_NAME"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_CULTURAL_COMMUNITY"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenCultureInfoPanel(CulturalCommunity.GetCulture.AccessSelf)]"
		}
	}

	
	type FancyTooltip_Religion = FancyTooltipWidgetType {
		blockoverride "text" {
			
		}

		blockoverride "name" {
			text = "RELIGION_TT_HEADING"
		}

		blockoverride "icon_texture" {
			texture = "[Religion.GetTexture]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_RELIGION"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenReligionInfoPanel(Religion.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" 
		{
			custom_tooltip_2_columns = {
				blockoverride "bg" {}
				
				blockoverride "left_column"
				{
					custom_tooltip_textbox = {
						max_width = 275
						text = "RELIGION_TT_TRAITS"
					}
				}

				blockoverride "right_column"
				{
					custom_tooltip_textbox = {
						max_width = 275
						text = "RELIGION_TT_TABOOS"
					}
				}
			}


			flowcontainer = {
				visible = "[GetPlayer.IsValid]"
				direction = vertical

				using = tooltip_segment_background
				using = tooltip_segment_margin

				min_width = @tooltip_fixed_width
				max_width = @tooltip_fixed_width

				custom_tooltip_textbox = {
					text = "CULTURE_RELIGION_TT_IN_PLAYER_COUNTRY"
				}
				
				flowcontainer = {
					visible = "[NotEqualTo_int64(Religion.GetPopulation(GetPlayer.Self),'(int64)0')]"
					direction = vertical

					custom_tooltip_textbox = {
						text = "RELIGION_TT_POPULATION"
					}

					custom_tooltip_textbox = {
						text = "RELIGION_TT_POLITICAL_STRENGTH"
					}
				}

				custom_tooltip_textbox = {
					visible = "[EqualTo_int64(Religion.GetPopulation(GetPlayer.Self),'(int64)0')]"
					raw_text = "RELIGION_TT_NO_POPULATION_IN_PLAYER_COUNTRY"
				}

				custom_tooltip_newline = {}

				custom_tooltip_textbox = {
					text = "RELIGION_TT_ACCEPTANCE_MOD"

					max_width = @tooltip_fixed_width
				}

				flowcontainer = {
					direction = vertical
					visible = "[NotEqualTo_int64(Religion.GetPopulation(GetPlayer.Self),'(int64)0')]"

					custom_tooltip_newline = {}

					custom_tooltip_textbox = {
						text = "RELIGION_ACCEPTANCE_STATUS_DISTRIBUTION_LABEL_TT"
						max_width = @tooltip_fixed_width
					}

					population_acceptance_status_chart = {
						blockoverride "barchart_size" {
							size = { @tooltip_fixed_width 40 }
						}

						blockoverride "barchart_datamodel" {
							datamodel = "[Religion.GetAcceptanceStatusSegmentsIn(GetPlayer)]"
						}
					}
				}

			}
		}

	}

	type FancyTooltip_DiscriminationTrait = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_DISCRIMINATION_TRAIT_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[DiscriminationTrait.GetName]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_CULTURAL_TRAIT"
		}
	}
	
	type FancyTooltip_Front = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_FRONT_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[Front.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_FRONT"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_tooltip" {
			tooltip = "BUTTON_DETAILS_FRONT"
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenFrontPanel(Front.AccessSelf)]"
		}
	}

	type FancyTooltip_State = FancyTooltipWidgetType {

		blockoverride "text" {} # all contents are defined in tooltip_content_after

		blockoverride "name" {
			text = "[State.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_STATE"
		}

		blockoverride "color" {
			color = "[State.GetOwner.GetMapColor]"
		}

		blockoverride "replace_icon" {
			small_flag = {
				parentanchor = center
				datacontext = "[State.GetOwner]"
				position = { 2 0 } #offset slightly to not overlap tooltip edge
			}
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenStatePanel(State.AccessSelf)]"
		}


		blockoverride "tooltip_content_after" 
		{
			background = {
				texture = "[State.GetBestTexture]"
				fittype = centercrop
				alpha = 0.15
			}

			custom_tooltip_textbox = {
				using = tooltip_segment_margin
				visible = "[State.HasOccupant]"
				text = "STATE_HAS_OCCUPANT"		
			}

			custom_tooltip_2_columns = {
				blockoverride "bg" {}
				blockoverride "left_column" {
					custom_tooltip_textbox_column_width = {
						text = "STATE_TT_STATE_TYPE"		
					}
				}

				blockoverride "right_column" {
					custom_tooltip_textbox_column_width = {
						text = "STATE_URBANIZATION"		
					}
				}
			}

			custom_tooltip_2_columns = {
				blockoverride "left_column" {
					custom_tooltip_textbox_column_width = {
						text = "[State.GetMarketAccessStatus]"		
					}
				}

				blockoverride "right_column" {
					custom_tooltip_textbox_column_width = {
						text = "STATE_TT_GDP_TAX"			
					}
				}
			}

			custom_tooltip_2_columns = {
				blockoverride "bg" {}
				blockoverride "left_column" {
					custom_tooltip_textbox_column_width = {
						text = "STATE_TT_POP_SOL"		
					}
				}

				blockoverride "right_column" {
					custom_tooltip_textbox_column_width = {
						text = "STATE_AVAILABLE_LABOR"			
					}
				}
			}


			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(State.AccessStateRegion.AccessTraits))]"
				name = "state_traits"
				direction = vertical
				using = tooltip_segment_background	
				using = tooltip_segment_margin
				min_width = @tooltip_fixed_width

				custom_tooltip_textbox = {
					raw_text = "STATE_TRAITS_HEADING"
					default_format = "#title"
				}

				fixedgridbox = {
					addrow = 40
					addcolumn = 166
					flipdirection = yes
					datamodel_wrap = 3

					datamodel = "[State.AccessStateRegion.AccessTraits]"

					item = {
						widget = {
							size = { 166 40 }
							tooltip = TOOLTIP_STATE_TRAIT
							using = tooltip_se

							flowcontainer = {
								parentanchor = vcenter
								margin_left = 5
								spacing = 5

								icon = {
									parentanchor = vcenter
									size = { 30 30 }
									onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
									onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
									texture = "[StateTrait.GetTexture]"
								}
								
								custom_tooltip_textbox = {
									parentanchor = vcenter
									autoresize = yes
									max_width = 120
									multiline = yes
									raw_text = "[StateTrait.GetName]"
									align = nobaseline
								}
							}
						}
					}
				}
			}
		}	
	}

	type FancyTooltip_StateRegion = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_STATE_REGION_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "[StateRegion.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_STATE_REGION"
		}
	}

	type FancyTooltip_Building = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "icon_texture" {
			texture = "[Building.GetIcon]"
		}

		blockoverride "name" {
			text = "TOOLTIP_BUILDING_HEADER"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_BUILDING"
		}

		blockoverride "tooltip_content_after" {
			# Custom tooltip layout for constructed buildings
			flowcontainer = {
				visible = "[Building.IsValid]"
				direction = vertical

				flowcontainer = {
					direction = vertical
					using = tooltip_segment_margin

					custom_tooltip_2_columns = {
						blockoverride "bg" { } #no bg

						blockoverride "left_column" {
							spacing = 8

							flowcontainer = {
								spacing = 10

								building_level_controls = {
									blockoverride "controller_size" {
										size = { @tooltip_fixed_column_width_minus_40 35 } 
									}
								}

								icon = {
									visible = "[Building.IsAutoDownsizing]"
									tooltip = "[Building.GetAutoDownsizeTooltip]"
									parentanchor = vcenter
									size = { 30 30 }
									texture = "gfx/interface/production_methods/auto_downsize.dds"
								}
							}
							
							building_progressbars = {
								blockoverride "progressbar_size" {
									size = {  @tooltip_fixed_column_width 26 }
								}
								
							}
						}

						blockoverride "right_column" {
							building_productivity_mini_chart = {
								blockoverride "graph_size" {
									size = { @tooltip_fixed_column_width_minus_16 60 }
								}
							}
						}
					}

					custom_tooltip_2_columns = {
						blockoverride "bg" { } #no bg

						blockoverride "left_column" {
							building_average_wage_label = {
								using = tooltip_font
							}
						}

						blockoverride "right_column" {
							building_rank_label = {
								using = tooltip_font
							}
						}
					}
				}

				### PROCESS
				flowcontainer = {
					direction = vertical
					using = tooltip_segment_background
					using = tooltip_segment_margin
					
					custom_tooltip_textbox = {
						
						text = "PROCESS_TOOLTIP_HEADER"
					}

					building_process_breakdown = {
						min_width =  @tooltip_fixed_width
					}
				}

				flowcontainer = {
					direction = vertical

					using = tooltip_segment_margin

					custom_tooltip_textbox = {
						raw_text = "[concept_workforce]:"
					}

					flowcontainer = {
						datacontext = "[Building.AccessPopsList]"
						datamodel = "[PopList.GetItems]"
						visible = "[And(Building.IsActive, Not(IsDataModelEmpty(PopList.GetItems)))]"

						spacing = 20

						item = {
							flowcontainer = {
								tooltip = "[PopListItem.GetEmploymentDesc]"
								icon = {
									size = { 20 20 }
									texture = "[PopListItem.GetPopType.GetTexture]"
									parentanchor = vcenter
									tooltipwidget = {
										FancyTooltip_PopType = {
											datacontext = "[PopListItem.GetPopType]"
										}
									}
								}
								custom_tooltip_textbox = {
									raw_text = "[PopListItem.GetWorkingAdultsPopSize|Dv]"
									parentanchor = vcenter
									max_width = 70
								}
							}
						}
					}
				}
				flowcontainer = {
					direction = vertical
					visible = "[Not(IsDataModelEmpty(Building.GetBuildingAssets))]"

					using = tooltip_segment_background
					using = tooltip_segment_margin
					min_width = @tooltip_fixed_width

					custom_tooltip_textbox = {
						text = "PORTFOLIO_TOOLTIP_HEADER"
					}

					property_portfolio_stacked_bar_chart = {
						blockoverride "barchart_size" {
							size = { @tooltip_fixed_width 40 }
						}
					}
				}


				
			}

			# Basic text contents when building is not constructed
			custom_tooltip_textbox = {
				visible = "[Not(Building.IsValid)]"
				text = "DATA_BUILDING_NAME_TOOLTIP"
			}

			custom_tooltip_textbox = {
				visible = "[InDebugMode]"
				raw_text = "[Building.GetDebugTooltip]"
			}
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "go_to_button_visibility" {
			visible = "[Building.IsValid]"
		}
		
		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
		}
	}



	type FancyTooltip_BuildingType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_BUILDING_TYPE_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[BuildingType.GetIcon]"
		}

		blockoverride "name" {
			text = "[BuildingType.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_BUILDING_TYPE"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenBuildingBrowserPanelForType(GetPlayer.Self, BuildingType.Self)]"
		}
	}

	type FancyTooltip_Character = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_CHARACTER_NAME_TOOLTIP"
		}

		blockoverride "name" {
			text = "CHARACTER_TOOLTIP_HEADER_NAME"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_CHARACTER"
		}

		blockoverride "replace_icon" {
			character_portrait_small2 = {
				blockoverride "tooltip" {}
				blockoverride "portrait_frame" {}
				blockoverride "rank_icon" {
					rank_icon = {
						visible = "[Character.IsCommander]"
						parentanchor = bottom|right
						blockoverride "icon_size" {
							size = { 26 26 }
						}
					}
				}
				parentanchor = center
			}
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_tooltip" {
			tooltip = "GO_TO_BUTTON_CHARACTER"
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
		}
		
		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
		}
		
		blockoverride "tooltip_content_after" {
			DefaultTooltipTextBox = {
				visible = "[InDebugMode]"
				text = "[Character.GetDebugDesc]"
				margin_bottom = 0
				autoresize = yes
				multiline = yes
				maximumsize = { 550 -1 }
				fonttintcolor = "[TooltipInfo.GetTintColor]"
			}
		}
	}

	type FancyTooltip_CharacterTrait = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_CHARACTER_TRAIT_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[CharacterTrait.GetTexture]"
		}

		blockoverride "icon_size" {
			size = { 30 42 }
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}
		
		blockoverride "name" {
			text = "[CharacterTrait.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_CHARACTER_TRAIT"
		}

		blockoverride "tooltip_content_after" {

			widget = {
				visible = "[Not(IsDataModelEmpty(CharacterTrait.AccessUnlockedOrders))]"
				size = { 15 15 }
			}

			DefaultTooltipTextBox = {
				visible = "[Not(IsDataModelEmpty(CharacterTrait.AccessUnlockedOrders))]"
				text = "TRAIT_UNLOCKABLE_ORDERS_TITLE"
				margin_bottom = 5
				autoresize = yes
				multiline = yes
				maximumsize = { 550 -1 }
				fonttintcolor = "[TooltipInfo.GetTintColor]"
			}

			dynamicgridbox = {
				visible = "[Not(IsDataModelEmpty(CharacterTrait.AccessUnlockedOrders))]"
				datamodel = "[CharacterTrait.AccessUnlockedOrders]"

				item = {
					flowcontainer = {
						spacing = 5
						tooltipwidget = {
							FancyTooltip_CommanderOrderType = {
								blockoverride "text_before" {
									using = visible_if_either_current_or_next_order
									text =  "NEXT_OR_CURRENT_ORDER"
									margin_bottom = 15
								}
							}
						}

						icon = {
							parentanchor = vcenter
							size = { 40 40 }
							texture = "[CommanderOrderType.GetTexture]"
						}

						DefaultTooltipTextBox = {
							parentanchor = vcenter
							text = "[CommanderOrderType.GetName]"
							align = nobaseline
							autoresize = yes
							multiline = yes
							maximumsize = { 500 -1 }
							fonttintcolor = "[TooltipInfo.GetTintColor]"
							default_format = "#tooltippable_name"
						}
					}
				}
			}
		}
	}

	type FancyTooltip_CommanderRank = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_CHARACTER_RANK_NAME_FORMAT_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[CommanderRank.GetTexture]"
		}
		
		blockoverride "name" {
			text = "[Character.GetRankTitleFor(CommanderRank.Self)]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_COMMANDER_RANK"
		}
	}

	type FancyTooltip_ProductionMethod = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_PRODUCTION_METHOD_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[ProductionMethod.GetTexture]"
		}
		
		blockoverride "name" {
			text = "[ProductionMethod.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_PRODUCTION_METHOD"
		}
	}

	type FancyTooltip_Technology = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_TECHNOLOGY_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Technology.GetTexture]"
			
			widget = {
				size = { 34 34 }
				position = { -6 30 }
			
				icon = {
					size = { 60% 60% }
					texture = "gfx/interface/backgrounds/round_button_bg.dds"
				}
				
				textbox = {
					text = "TECHNOLOGY_TYPE_DESCRIPTION"
					align = center|nobaseline
					position = { -7 -7 }
					using = fontsize_small
					size = { 20% 20% }
					parentanchor = center
				}
			}
			
		}
		
		blockoverride "name" {
			text = "[Technology.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_TECHNOLOGY"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPanelCycleTabs('tech_tree', 'production|military|society')]"
		}

		blockoverride "buttons" {
			flowcontainer = {
				margin_top = 14
				using = default_list_position

				button = {
					using = default_button
					text = "START_RESEARCHING"
					size = { 300 40 }
					enabled = "[IsValid(Technology.Research(GetPlayer.Self))]"
					tooltip = "START_RESEARCH_COMMANDS"

					click_modifiers = {
						ondefault = "[Execute(Technology.ResearchWithUnlocks(GetPlayer.Self))]"
						onshift = "[Execute(Technology.AddToQueueWithUnlocks(GetPlayer.Self))]"
					}
				}
			}
		}
	}

	type FancyTooltip_Technology_Tech_Tree = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_TECHNOLOGY_TECH_TREE_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Technology.GetTexture]"
			
			widget = {
				size = { 34 34 }
				position = { -6 30 }
			
				icon = {
					size = { 60% 60% }
					texture = "gfx/interface/backgrounds/round_button_bg.dds"
				}
				
				textbox = {
					text = "TECHNOLOGY_TYPE_DESCRIPTION"
					align = center|nobaseline
					position = { -7 -7 }
					using = fontsize_small
					size = { 20% 20% }
					parentanchor = center
				}
			}
			
		}
		
		blockoverride "name" {
			text = "[Technology.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_TECHNOLOGY"
		}
	}

	type FancyTooltip_InterestGroupTrait = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_INTEREST_GROUP_TRAIT_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			enabled = "[InterestGroupTrait.IsEnabled(InterestGroup.Self)]"
			texture = "[InterestGroupTrait.GetTexture]"
		}

		blockoverride "icon_size" {
			size = { 33 45 }
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}
		
		blockoverride "name" {
			text = "[InterestGroupTrait.GetNameNoFormatting] [InterestGroupTrait.GetInactiveString(InterestGroup.Self)]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_INTEREST_GROUP_TRAIT"
		}
	}

	# An Acceptance Status without any context
	type FancyTooltip_AcceptanceStatus = FancyTooltipWidgetType {
		blockoverride "text" { } #all content is in 'blockoverride "tooltip_content_after"'

		blockoverride "replace_icon" {
			acceptance_status_fancy_tooltip_large_icon = {}
		}

		blockoverride "name" {
			text = "[AcceptanceStatus.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_acceptance_status]"
		}

		blockoverride "tooltip_content_after" {
			datacontext = "[GetPlayer]"

			custom_tooltip_textbox = {
				text = "ACCEPTANCE_STATUS_THRESHOLDS_DESC"
			}

			custom_tooltip_textbox = {
				visible = "[AcceptanceStatus.HasHigherStatus]"
				text = "ACCEPTANCE_STATUS_NEXT"
				max_width = @tooltip_fixed_width
			}
			
			custom_tooltip_textbox = {
				visible = "[AcceptanceStatus.HasLowerStatus]"
				text = "ACCEPTANCE_STATUS_PREV"
				max_width = @tooltip_fixed_width
			}

			custom_tooltip_newline = {}

			acceptance_tooltip_bottom_section_flowcontainer = {}
		}
	}

	# A Group of Pops with the same Acceptance Status
	type FancyTooltip_AcceptanceStatusSegment = FancyTooltipWidgetType {
		blockoverride "text" {	} #all content is in 'blockoverride "tooltip_content_after"'

		blockoverride "replace_icon" {
			acceptance_status_fancy_tooltip_large_icon = {
				datacontext = "[AcceptanceStatusSegment.GetStatus]"
			}
		}
		
		blockoverride "name" {
			text = "[AcceptanceStatusSegment.GetStatus.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_acceptance_status]"
		}

		blockoverride "tooltip_content_after" {
			datacontext = "[AcceptanceStatusSegment.GetStatus]"

			custom_tooltip_textbox = {
				text = "ACCEPTANCE_STATUS_THRESHOLDS_DESC"
				using = tooltip_segment_margin
			}

			acceptance_tooltip_bottom_section_flowcontainer = {
				blockoverride "bottom_section_population" {
					custom_tooltip_textbox = {
						text = "[AcceptanceStatusSegment.GetPopulationDesc]"
						min_width = @tooltip_fixed_width
					}

					custom_tooltip_textbox = {
						visible = "[GreaterThan_int64( AcceptanceStatusSegment.GetTotalPopulationIncreasingInAcceptance, '(int64)0')]"
						text = "ACCEPTANCE_STATUS_SEGMENT_POPULATION_DECREASING"
						min_width = @tooltip_fixed_width
					}

					custom_tooltip_newline = {}

					custom_tooltip_textbox = {
						text = "ACCEPTANCE_STATUS_TT_EFFECTS_HEADER"
						default_format = "#title"
						min_width = @tooltip_fixed_width
					}
				}
			}
		}
	}

	# One Pop, its Acceptance Value and how it ties to Acceptance Status
	type FancyTooltip_PopAcceptance = FancyTooltipWidgetType {
		blockoverride "text" {	} #all content is in 'blockoverride "tooltip_content_after"'

		blockoverride "replace_icon" {
			acceptance_status_fancy_tooltip_large_icon = {
				datacontext = "[Pop.GetAcceptanceStatus]"
			}
		}
		
		blockoverride "name" {
			text = "[Pop.GetAcceptanceStatus.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_acceptance_status]"
		}

		blockoverride "tooltip_content_after" 
		{
			datacontext = "[Pop.GetAcceptanceStatus]"
			datacontext = "[Pop.GetCountry]"

			flowcontainer = {
				direction = vertical
				using = tooltip_segment_margin

				custom_tooltip_textbox = {
					visible = "[Pop.IsAcceptanceStatusIncreasing]"

					text = "ACCEPTANCE_STATUS_WILL_INCREASE"
					max_width = @tooltip_fixed_width
				}

				custom_tooltip_textbox = {
					visible = "[Not(Pop.GetSocialClass.GetSocialHierarchy.IsDefault)]"

					text = "ACCEPTANCE_STATUS_STRATA_RESTRICTION"
					max_width = @tooltip_fixed_width
				}

				custom_tooltip_newline = {
					visible = "[Or(Pop.IsAcceptanceStatusIncreasing, Not(Pop.GetSocialClass.GetSocialHierarchy.IsDefault))]"
				}

				custom_tooltip_textbox = {
					text = "POP_ACCEPTANCE_VALUE_WITH_BREAKDOWN"
					max_width = @tooltip_fixed_width					
				}

				custom_tooltip_newline = {}

				custom_tooltip_textbox = {
					visible = "[AcceptanceStatus.HasHigherStatus]"

					text = "ACCEPTANCE_STATUS_NEXT"
					max_width = @tooltip_fixed_width
				}
				custom_tooltip_textbox = {
					visible = "[AcceptanceStatus.HasLowerStatus]"

					text = "ACCEPTANCE_STATUS_PREV"
					max_width = @tooltip_fixed_width
				}
			}
			
			
			acceptance_tooltip_bottom_section_flowcontainer = {}
		}

	}


	type acceptance_tooltip_bottom_section_flowcontainer = flowcontainer {
		# uses datacontexts:
		# Country
		# AcceptanceStatus

		direction = vertical

		flowcontainer = {
			direction = vertical
			using = tooltip_segment_margin
			using = tooltip_segment_background

			custom_tooltip_textbox = {
				text = "ACCEPTANCE_STATUS_TT_COUNTRY_HEADER"
				default_format = "#title"
				min_width = @tooltip_fixed_width
			}

			block "bottom_section_population"
			{

			}

			custom_tooltip_textbox = {
				text = "[AcceptanceStatus.GetEffectsDescIn(Country.Self)]"
				min_width = @tooltip_fixed_width
			}
		}

		custom_tooltip_textbox = {
			text = "[AcceptanceStatus.GetDesc]"
			using = tooltip_segment_margin
			default_format = "#lore"
			max_width = @tooltip_fixed_width
		}
	}

	type FancyTooltip_SocialClass = FancyTooltipWidgetType {
		blockoverride "text" {	} #all content is in 'blockoverride "tooltip_content_after"
		
		blockoverride "name" {
			raw_text = "[SocialClass.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "SOCIAL_CLASS_TT_TYPE" 
		} 

		blockoverride "go_to_button_visibility" {
			visible = no
		}

		blockoverride "tooltip_content_after" 
		{
			custom_tooltip_textbox = {
				text = "SOCIAL_CLASS_TT_SOCIAL_HIERARCHY"
			}

			custom_tooltip_textbox = {
				text = "SOCIAL_CLASS_TT_STRATA"
			}

			custom_tooltip_textbox = {
				text = "SOCIAL_CLASS_TT_POPULATION"
			}

			custom_tooltip_newline = {}

			custom_tooltip_textbox = {
				text = "SOCIAL_CLASS_TT_PROFESSIONS_HEADING"
			}

			flowcontainer = {
				direction = vertical
				datamodel = "[SocialClass.GetAllowedProfessions]"

				item = {
					custom_tooltip_textbox = {
						text = "[PopType.GetName]"
					}
				}
			}

			custom_tooltip_newline = {}

			flowcontainer = {
				direction = vertical
				visible = "[Not(StringIsEmpty(SocialClass.GetPopTriggerDesc))]"

				custom_tooltip_textbox = {
					text = "SOCIAL_CLASS_TT_SPECIAL_TRIGGER"
				}

				custom_tooltip_newline = {}
			}

			custom_tooltip_textbox = {
				default_format = "#lore"
				text = "[SocialClass.GetDesc]"
			}
		}
	}


	type FancyTooltip_SocialHierarchy = FancyTooltipWidgetType {
		blockoverride "text" {	} #all content is in 'blockoverride "tooltip_content_after"
		
		blockoverride "name" {
			raw_text = "[SocialHierarchy.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_social_hierarchy]"
		}

		blockoverride "go_to_button_visibility" {
			visible = no
		}

		blockoverride "tooltip_content_after" 
		{

			custom_tooltip_textbox_with_empty_line = {
				visible = "[SocialHierarchy.IsDefault]"
				text = "DEFAULT_SOCIAL_HIERARCHY_EXTRA_DESC"
			}

			custom_tooltip_textbox_with_empty_line = {
				visible = "[Not( SocialHierarchy.IsDefault )]"
				text = "SOCIAL_HIERARCHY_TT_AFFECTED_POPS"
			}

			custom_tooltip_textbox_with_empty_line = {
				text = "SOCIAL_HIERARCHY_TT_CLASSES"
			}

			custom_tooltip_textbox = {
				default_format = "#lore"
				text = "[SocialHierarchy.GetDesc]"
			}
		}
	}


	type FancyTooltip_PoliticalLobby = FancyTooltipWidgetType {
		blockoverride "text" {	} #all content is in 'blockoverride "tooltip_content_after"'

		blockoverride "icon_texture" {
			texture = "[PoliticalLobby.GetType.GetTexture]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}
		
		blockoverride "name" {
			text = "[PoliticalLobby.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_political_lobby]"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPoliticalLobbyPanel(PoliticalLobby.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" 
		{
			custom_tooltip_textbox = {
				text = "POLITICAL_LOBBY_APPEASEMENT_VALUE"
				using = tooltip_segment_margin
			}

			flowcontainer = {
				name = "lobby_igs"
				direction = vertical 

				using = tooltip_segment_margin
				using = tooltip_segment_background

				spacing = 5

				widget = {
					name = "igs_heading"
					size = { 350 21 }

					hbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						custom_tooltip_textbox = {
							text = "POLITICAL_LOBBY_SUPPORTERS"
							default_format = "#title"
							layoutpolicy_horizontal = expanding

						}
						
						custom_tooltip_textbox = {
							text = "POLITICAL_LOBBY_TOTAL_CLOUT"
							default_format = "#title"
						}
					}
				}

				flowcontainer = {
					datamodel = "[PoliticalLobby.GetMembers]"
					spacing = 5

					item = {
						ig_button = {
							size = {40 40}

							blockoverride "in_government_icon" { }
						}
					}
				}

				custom_tooltip_textbox = {
					visible = "[Not(EqualTo_int32(PoliticalLobby.GetAppeasement,'(int32)0'))]"
					text = "POLITICAL_LOBBY_APPEASEMENT_IMPACT"
				}
			}

			flowcontainer = {
				direction = vertical
				using = tooltip_segment_margin

				custom_tooltip_textbox = {
					text = "POLITICAL_LOBBY_TARGET_COUNTRY_RELATION" 
				}

				custom_tooltip_textbox = {
					text = "POLITICAL_LOBBY_HOME_COUNTRY" 
				}	
			}		
		}
	}

	type FancyTooltip_PoliticalMovement = FancyTooltipWidgetType {
		blockoverride "text" {} #all content is in 'blockoverride "tooltip_content_after"'

		blockoverride "icon_texture" {
			texture = "[PoliticalMovement.GetTexture]"
		}
		
		blockoverride "name" {
			text = "POLITICAL_MOVEMENT_TOOLTIP_HEADER"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_POLITICAL_MOVEMENT"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" {

			block "top_content" {}

			flowcontainer = {
				visible = "[PoliticalMovement.IsBolstered]"
				spacing = 5

				bolster_icon = {
					parentanchor = vcenter
					size = { 22 22 }
				}

				DefaultTooltipTextBox = {
					parentanchor = vcenter	
					autoresize = yes
					text = "BOLSTERED"
				}
			}

			flowcontainer = {
				visible = "[PoliticalMovement.IsSuppressed]"
				spacing = 5

				suppress_icon = {
					parentanchor = vcenter
					size = { 22 22 }
				}

				DefaultTooltipTextBox = {
					parentanchor = vcenter	
					autoresize = yes
					text = "SUPPRESSED"
				}
			}

			flowcontainer = {
				visible = "[PoliticalMovement.IsInsurrectionary]"
				direction = vertical

				custom_tooltip_textbox = {
					visible = "[PoliticalMovement.IsSecessionist]"
					text = "POLITICAL_MOVEMENT_IS_SECESSIONIST"
				}

				custom_tooltip_textbox = {
					visible = "[PoliticalMovement.IsRevolutionary]"
					text = "POLITICAL_MOVEMENT_IS_REVOLUTIONARY"
				}

				custom_tooltip_textbox = {
					text = "POLITICAL_MOVEMENT_REVOLUTION_PROGRESS"
				}

				custom_tooltip_textbox = {
					text = "POLITICAL_MOVEMENT_REVOLUTION_CLOCK_CHECKPOINT"
				}

				custom_tooltip_textbox_with_empty_line = {
					text = "POLITICAL_MOVEMENT_REVOLUTION_PROGRESS_AT_CHECKPOINT"
				}
			}

			custom_tooltip_textbox = {
				min_width = 300
				text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
			}

			custom_tooltip_textbox = {
				min_width = 300
				text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
			}

			custom_tooltip_textbox_with_empty_line = {
				visible = "[And(GreaterThanOrEqualTo_CFixedPoint(PoliticalMovement.GetTargetRadicalism, '(CFixedPoint)0.5'), LessThan_CFixedPoint(PoliticalMovement.GetTargetRadicalism, '(CFixedPoint)1'))]"
				text = "POLITICAL_MOVEMENT_ACTIVISM_CAUTION"
			}

			custom_tooltip_textbox_with_empty_line = {
				visible = "[GreaterThanOrEqualTo_CFixedPoint(PoliticalMovement.GetTargetRadicalism, '(CFixedPoint)1')]"
				using = look_at_me_text_animation
				text = "POLITICAL_MOVEMENT_ACTIVISM_WARNING"
			}

			custom_tooltip_textbox = {
				visible = "[GreaterThan_int64(PoliticalMovement.PredictNumberOfRadicalsEveryMonth, '(int64)0')]"
				text = "POLITICAL_MOVEMENT_LOYALTY_PREDICTIONS"
			}

			custom_tooltip_newline = {}

			custom_tooltip_textbox = {
				raw_text = "[concept_core_movement_ideology]:"
			}

			flowcontainer = {
				datacontext = "[PoliticalMovement.GetCoreIdeology]"
				spacing = 5
				margin = { 5 5 }

				background = {
					using = fade_center_colored
					color = { 0.5 0.5 0.5 1 }
				}

				tooltipwidget = {
					FancyTooltip_Ideology = {}
				}

				icon = {
					size = { 40 40 }
					texture = "[Ideology.GetTexture]"
				}

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					max_width = 500
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					multiline = yes
					text = "[Ideology.GetNameNoFormatting]"
				}
			}

			custom_tooltip_newline = {}

			custom_tooltip_textbox = {
				visible = "[And(Not(PoliticalMovement.IsInsurrectionary), IsDataModelEmpty(PoliticalMovement.GetInfluencedInterestGroups))]"
				text = "POLITICAL_MOVEMENT_NO_INFLUENCED_INTEREST_GROUPS"
			}

			custom_tooltip_textbox = {
				visible = "[And(Not(PoliticalMovement.IsInsurrectionary), Not(IsDataModelEmpty(PoliticalMovement.GetInfluencedInterestGroups)))]"
				text = "POLITICAL_MOVEMENT_INFLUENCED_INTEREST_GROUPS"
			}

			dynamicgridbox = {
				visible = "[And(Not(PoliticalMovement.IsInsurrectionary), Not(IsDataModelEmpty(PoliticalMovement.GetInfluencedInterestGroups)))]"
				datamodel = "[PoliticalMovement.GetInfluencedInterestGroups]"
				flipdirection = yes

				item = {
					widget = {
						size = { 48 48  }

						ig_button = {
							parentanchor = center

							blockoverride = "button_size" {
								size = { 40 40 }
							}

							blockoverride "onclick" {
								onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.AccessSelf)]"
							}
						}
					}
				}
			}

			custom_tooltip_textbox = {
				visible = "[Not(PoliticalMovement.IsInsurrectionary)]"
				text = "POLITICAL_MOVEMENT_SUPPORTING_AGITATORS_HEADER"
			}

			dynamicgridbox = {
				visible = "[And(Not(PoliticalMovement.IsInsurrectionary), Not(IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters)))]"
				datamodel = "[PoliticalMovement.GetSupportingCharacters]"

				item = {
					flowcontainer = {
						spacing = 5

						character_portrait_small = {
							blockoverride "portrait_button_onrightclick" {}

							character_ig_icon = {
								parentanchor = bottom|right
								size = { 15 15 }

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_IG = {
											datacontext = "[Character.AccessInterestGroup]"
										}
									}
								}
							}
						}

						custom_tooltip_textbox = {
							parentanchor = vcenter
							text = "CHARACTER_NAME_WITH_POPULARITY"
						}

						button_icon_goto = {
							parentanchor = vcenter
							size = { 30 30 }

							blockoverride "icon_size" {
								size = { 100% 100% }
							}

 							onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
							tooltip = "GO_TO_BUTTON_CHARACTER"
 						}
					}
				}
			}

			custom_tooltip_newline = {
				visible = "[Not(PoliticalMovement.IsInsurrectionary)]"
			}
			
			custom_tooltip_textbox = {
				visible = "[PoliticalMovement.IsInsurrectionary]"
				text = "[PoliticalMovement.GetCivilWar.GetUprisingNumUnitsDesc]"
			}
			
			custom_tooltip_newline = {
				visible = "[PoliticalMovement.IsInsurrectionary]"
			}				
			
			custom_tooltip_textbox = {
				visible = "[PoliticalMovement.IsInsurrectionary]"
				text = "[PoliticalMovement.GetCivilWar.GetUprisingConscriptionRateDesc]"
			}
			
			custom_tooltip_newline = {
				visible = "[PoliticalMovement.IsInsurrectionary]"
			}			

			custom_tooltip_textbox = {
				visible = "[PoliticalMovement.IsRevolutionary]"
				text = "DATA_POLITICAL_MOVEMENT_STATES_JOIN_REVOLUTION_HEADER"
			}

			custom_tooltip_textbox = {
				visible = "[PoliticalMovement.IsSecessionist]"
				text = "DATA_POLITICAL_MOVEMENT_STATES_SECEDED_HEADER"
			}

			custom_tooltip_newline = {
				visible = "[PoliticalMovement.IsInsurrectionary]"
			}

			block "bottom_content" {}

			flowcontainer = {
				margin_top = 10
				parentanchor = hcenter
				spacing = 10

				button = {
					visible = "[Not( PoliticalMovement.IsSuppressed )]"
					using = default_button_action
					size = { 240 40 }
					tooltip = "TOOLTIP_SUPPRESS"
					using = tooltip_above
					enabled = "[IsValid( PoliticalMovement.ToggleSuppression )]"
					onclick = "[Execute( PoliticalMovement.ToggleSuppression )]"
					using = suppress_button_sound

					flowcontainer = {
						parentanchor = center

						icon = {
							parentanchor = vcenter
							size = { 25 25 }
							texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
						}

						textbox = {
							maximumsize = { 160 35 }
							autoresize = yes
							fontsize_min = 12
							elide = right
							text = "SUPPRESS_SHORT"
							align = nobaseline
							parentanchor = vcenter	
						}
					}
				}
				
				button = {
					visible = "[PoliticalMovement.IsSuppressed]"
					using = default_button_action
					size = { 240 40 }
					tooltip = "TOOLTIP_SUPPRESS_NOT"
					using = tooltip_above
					enabled = "[IsValid( PoliticalMovement.ToggleSuppression )]"
					onclick = "[Execute( PoliticalMovement.ToggleSuppression )]"
					using = close_button_sound
					using = shimmer

					textbox = {
						maximumsize = { 170 35 }
						autoresize = yes
						fontsize_min = 12
						elide = right
						text = "SUPPRESS_NOT_SHORT"
						align = nobaseline
						parentanchor = hcenter|vcenter	
					}

					icon = {
						visible = "[PoliticalMovement.IsSuppressed]"
						using = highlighted_square_selection
					}
				}
				
				button = {
					visible = "[Not( PoliticalMovement.IsBolstered )]"
					name = "tutorial_highlight_promote_button"
					using = default_button_action
					size = { 240 40 }
					tooltip = "TOOLTIP_BOLSTER"
					using = tooltip_above
					enabled = "[IsValid( PoliticalMovement.ToggleBolstering )]"
					onclick = "[Execute( PoliticalMovement.ToggleBolstering )]"
					using = bolster_button_sound

					flowcontainer = {
						parentanchor = center

						icon = {
							parentanchor = vcenter
							size = { 25 25 }
							texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
						}

						textbox = {
							maximumsize = { 160 35 }
							autoresize = yes
							fontsize_min = 12
							elide = right
							text = "BOLSTER_SHORT"
							align = nobaseline
							parentanchor = vcenter	
						}
					}
				}
							
				button = {
					visible = "[PoliticalMovement.IsBolstered]"
					tooltip = "TOOLTIP_BOLSTER_NOT"
					using = tooltip_above
					enabled = "[IsValid( PoliticalMovement.ToggleBolstering )]"
					onclick = "[Execute( PoliticalMovement.ToggleBolstering )]"
					using = close_button_sound
					using = shimmer
					using = default_button_action
					size = { 240 40 }

					textbox = {
						maximumsize = { 170 35 }
						autoresize = yes
						fontsize_min = 12
						elide = right
						text = "BOLSTER_NOT_SHORT"
						align = nobaseline
						parentanchor = hcenter|vcenter	
					}

					icon = {
						using = highlighted_square_selection
					}
				}									
			}			
		}
	}




	type FancyTooltip_StrategicRegion = FancyTooltipWidgetType {
		blockoverride "text" {
			visible = "[IsInGame]"
			text = "DATA_STRATEGIC_REGION_NAME_TOOLTIP"
		}
		
		blockoverride "name" {
			text = "[StrategicRegion.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_STRATEGIC_REGION"
		}

		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox = {
				visible = "[Not(IsInGame)]"
				text = "[StrategicRegion.GetStateRegionsDesc]"
			}

			overlappingitembox = {
					visible = "[IsInGame]"
					size = { 540 25 }
					datamodel = "[StrategicRegion.GetInterests]"

					item = {
						container = {
							tooltip = "INTEREST_MARKER_TOOLTIP"
							using = tooltip_above

							widget = {
								size = { 35 33 }

								tiny_flag = {
									position = { 0 -2 }
									visible = "[Not(Interest.IsActive)]"
									datacontext = "[Interest.GetOwner]"
									blockoverride "tooltip" {}
									parentanchor = center
									alpha = 0.3
								}
								tiny_flag = {
									position = { 0 -2 }
									visible = "[Interest.IsActive]"
									datacontext = "[Interest.GetOwner]"
									blockoverride "tooltip" {}
									parentanchor = center
								}

								widget = {
									size = { 25 4 }
									position = { 0 12 }
									visible = "[Interest.ShouldShowProgressBar]"
									parentanchor = center

									bad_progressbar_horizontal = {
										visible = "[Interest.IsActive]"
										size = { 100% 100% }
										blockoverride "values" {
											min = 0
											max = 1
											value = "[Interest.GetProgress]"
										}
									}

									default_progressbar_horizontal = {
										visible = "[Not(Interest.IsActive)]"
										size = { 100% 100% }
										blockoverride "values" {
											min = 0
											max = 1
											value = "[Interest.GetProgress]"
										}
									}
								}
							}
						}
					}
				}
		}
	}

	type FancyTooltip_CanalType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_CANAL_TYPE_NAME_FORMAT_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[CanalType.GetTexture]"
		}
		
		blockoverride "name" {
			text = "[CanalType.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_CANAL_TYPE"
		}
	}

	type FancyTooltip_Company = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_COMPANY_NAME_FORMAT_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Company.GetCompanyType.GetIcon]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}
		
		blockoverride "name" {
			text = "[Company.GetName]"
		}

		blockoverride "type" {
			text = "[concept_company]"
		}

		blockoverride "tooltip_content_after" {
			flowcontainer = {
				direction = horizontal
				spacing = 5							
				datamodel = "[Company.AccessCompanyType.AccessBuildingTypes]"
				
				item = {
					company_building_item = {}
				}
			}

			custom_tooltip_textbox = {
				text = "DATA_COMPANY_NAME_FORMAT_TOOLTIP_PT2"
			}	
		}
	}

	type FancyTooltip_CompanyType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_COMPANY_TYPE_NAME_FORMAT_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[CompanyType.GetIcon]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}
		
		blockoverride "name" {
			text = "[CompanyType.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_company]"
		}

		blockoverride "tooltip_content_after" {
			flowcontainer = {
				direction = horizontal
				spacing = 5						
				datamodel = "[CompanyType.AccessBuildingTypes]"
				
				item = {
					company_type_building_item = {}
				}
			}
			
			custom_tooltip_textbox = {
				text = "DATA_COMPANY_TYPE_NAME_FORMAT_TOOLTIP_PT2"
			}
		}
	}

	type FancyTooltip_War = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_WAR_NAME_TOOLTIP"
		}

		blockoverride "replace_icon" {
			icon = {
				texture = "[War.GetDiplomaticPlay.GetDiplomaticPlayType.GetWarGoalType.GetTexture]"
				size = { 45 45 }
				parentanchor = center
			}
		}

		blockoverride "name" {
			text = "[War.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_WAR"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_properties" {
			onclick = "[WarManager.ToggleWarPanel(War.AccessSelf)]"
		}
	}

	type FancyTooltip_ObjectiveType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_OBJECTIVE_TYPE_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[ObjectiveType.GetIcon]"
		}
		
		blockoverride "name" {
			text = "[ObjectiveType.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_OBJECTIVE_TYPE"
		}
	}

	type FancyTooltip_Objective = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_OBJECTIVE_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[Objective.GetIcon]"
		}
		
		blockoverride "name" {
			text = "[Objective.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_OBJECTIVE"
		}
	}

	type FancyTooltip_LegitimacyLevel = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_LEGITIMACY_LEVEL_TOOLTIP"
		}

		blockoverride "name" {
			text = "[LegitimacyLevel.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_LEGITIMACY_LEVEL"
		}
	}

    type FancyTooltip_LibertyDesireLevel = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_LIBERTY_DESIRE_LEVEL_TOOLTIP"
		}

		blockoverride "name" {
			text = "[LibertyDesireLevel.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_LIBERTY_DESIRE_LEVEL"
		}
	}

    type FancyTooltip_CohesionLevel = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_COHESION_LEVEL_TOOLTIP"
		}

		blockoverride "name" {
			text = "[CohesionLevel.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "TOOLTIP_TYPE_COHESION_LEVEL"
		}
	}

	type FancyTooltip_SubjectType = FancyTooltipWidgetType {
        blockoverride "text" {
            text = "DATA_SUBJECT_TYPE_TOOLTIP"
        }

        blockoverride "name" {
            text = "[SubjectType.GetNameNoIconNoFormatting]"
        }

        blockoverride "icon_texture" {
            texture = "[SubjectType.GetTexture]"
        }

        blockoverride "type" {
            text = "TOOLTIP_TYPE_SUBJECT_TYPE"
        }
    }

	type FancyTooltip_BattleCondition = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "BATTLE_CONDITION_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[BattleCondition.GetTexture]"
		}

		blockoverride "name" {
			text = "[BattleCondition.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_battle_condition]"
		}
	}

	type FancyTooltip_JournalEntry = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "JOURNAL_ENTRY_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[JournalEntry.GetIcon]"
		}

		blockoverride "name" {
			text = "[JournalEntry.GetName]"
		}

		blockoverride "type" {
			text = "JOURNAL_ENTRY_WITH_GROUP"
		}
	}
	
	type FancyTooltip_MobilizationOption = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "[MobilizationOption.GetTooltip]"
		}

		blockoverride "icon_texture" {
			texture = "[MobilizationOption.GetTexture]"
		}

		blockoverride "name" {
			text = "[MobilizationOption.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_mobilization_option]"
		}
	}

	type FancyTooltip_MobilizationOptionGroup = FancyTooltipWidgetType {
        blockoverride "text" {
            text = "[MobilizationOptionGroup.GetTooltip]"
        }

        blockoverride "icon_texture" {
            texture = "[MobilizationOptionGroup.GetIcon]"
        }

        blockoverride "name" {
            text = "[MobilizationOptionGroup.GetNameNoFormatting]"
        }

        blockoverride "type" {
            text = "[concept_mobilization_option]"
        }
    }

	type FancyTooltip_PowerBloc = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "icon_texture" {
			texture = "[PowerBloc.GetFlag.GetMediumPowerBlocCoaTexture]"
			frame = "[PowerBloc.GetFlag.GetMediumPowerBlocCoaFrame]"
			framesize = "[GetMediumPowerBlocCoaFrameSize]"
		}

		blockoverride "name" {
			text = "[PowerBloc.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_power_bloc]"
		}

		blockoverride "tooltip_content_after" {
			flowcontainer = {
				visible = "[PowerBloc.IsValid]"
				direction = vertical

				custom_tooltip_textbox = {
					text = "DATA_POWER_BLOC_RANK"
				}

				custom_tooltip_textbox = {
					text = "DATA_POWER_BLOC_LEADER"
				}

				custom_tooltip_textbox = {
					visible = "[Not(StringIsEmpty(PowerBloc.GetPowerStruggleDesc))]"
					text = "DATA_POWER_BLOC_POWER_STRUGGLE"
				}

				custom_tooltip_textbox = {
					text = "DATA_POWER_BLOC_COHESION"
				}

				custom_tooltip_textbox = {
					text = "DATA_POWER_BLOC_IDENTITY"
				}

				custom_tooltip_textbox = {
					visible = "[GetPlayer.GetPowerBloc.IsLeader(GetPlayer.Self)]"
					datacontext = "[GetPlayer]"
					text = "DATA_POWER_BLOC_LEVERAGE_OVER_PLAYER_LEADER"
				}

				flowcontainer = {
					visible = "[Not(GetPlayer.GetPowerBloc.IsLeader(GetPlayer.Self))]"
					datacontext = "[GetPlayer]"
					spacing = 5

					custom_tooltip_textbox = {
						text = "DATA_POWER_BLOC_LEVERAGE_OVER_PLAYER_TITLE"
					}

					custom_tooltip_textbox = {
						tooltip = "POWER_BLOC_CURRENT_LEVERAGE_BAR_TOOLTIP"
						text = "DATA_POWER_BLOC_LEVERAGE_OVER_PLAYER_VALUE"
					}

					custom_tooltip_textbox = {
						text = "DATA_POWER_BLOC_LEVERAGE_OVER_PLAYER_LABEL"
					}
				}

				flowcontainer = {
					margin_top = 15
					direction = vertical
					spacing = 5

					custom_tooltip_textbox = {
						text = "PRINCIPLES_TOOLTIP_TITLE"
					}

					dynamicgridbox = {
						parentanchor = hcenter
						flipdirection = yes
						datamodel_wrap = 2
						datamodel = "[PowerBloc.GetPrinciples]"

						item = {
							widget = {
								size = { 260 60 }

								locked_active_principle_slot = {
									parentanchor = center
									alpha = 1

									blockoverride "slot_size" {
										size = { 250 50 }
									}

									blockoverride "name_default_format" {}

									blockoverride "name_max_width" {
										max_width = 180
									}
								}
							}
						}
					}
				}

				flowcontainer = {
					margin_top = 15
					direction = vertical
					spacing = 5

					custom_tooltip_textbox = {
						text = "BLOC_MEMBERS_TOOLTIP_TITLE"
					}

					dynamicgridbox = {
						parentanchor = hcenter
						flipdirection = yes
						datamodel_wrap = 2
						datamodel = "[DataModelFirst(PowerBloc.GetMembers, '(int32)6')]"

						item = {
							widget = {
								size = { 260 25 }

								textbox = {
									visible = "[LessThan_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)5')]"
									parentanchor = vcenter
									autoresize = yes
									align = nobaseline
									max_width = 250
									elide = right
									fontsize_min = 12
									text = "POWER_BLOC_MEMBER_COUNTRY_NAME_AND_PRESTIGE"
								}

								textbox = {
									visible = "[GreaterThan_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)4')]"
									parentanchor = vcenter
									autoresize = yes
									align = nobaseline
									max_width = 250
									elide = right
									fontsize_min = 12
									default_format = "#tooltippable"
									text = "DATA_POWER_BLOC_ADDITIONAL_MEMBERS"
									
									tooltipwidget = {
										RegularTooltip = {
											blockoverride "tooltip_content" {
												dynamicgridbox = {
													parentanchor = hcenter
													flipdirection = yes
													datamodel_wrap = 2
													datamodel = "[DataModelSkipFirst(PowerBloc.GetMembers, '(int32)5')]"

													item = {
														widget = {
															size = { 260 25 }

															textbox = {
																parentanchor = vcenter
																autoresize = yes
																align = nobaseline
																max_width = 250
																elide = right
																fontsize_min = 12
																text = "POWER_BLOC_MEMBER_COUNTRY_NAME_AND_PRESTIGE"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}

		blockoverride "go_to_button_visibility" {
			visible = "[PowerBloc.IsValid]"
		}
		
		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenPowerBlocPanelTab( PowerBloc.Self, 'default' )]"
		}
	}

	type FancyTooltip_PowerBlocIdentity = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_POWER_BLOC_IDENTITY_NAME_TOOLTIP"
		}

		blockoverride "icon_texture" {
			texture = "[PowerBlocIdentity.GetIcon]"
		}

		blockoverride "name" {
			text = "[PowerBlocIdentity.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_power_bloc_identity]"
		}

		blockoverride "tooltip_content_after" {

			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(PowerBlocIdentity.GetPrimaryPrincipleGroups))]"
				direction = vertical
				margin_top = 15
				spacing = 5

				custom_tooltip_textbox = {
					text = "DATA_PRIMARY_PRINCIPLE_GROUPS_TITLE"
				}

				dynamicgridbox = {
					parentanchor = hcenter
					flipdirection = yes
					datamodel_wrap = 2
					datamodel = "[PowerBlocIdentity.GetPrimaryPrincipleGroups]"

					item = {
						container = {
							minimumsize = { 200 -1 }

							principle_group_no_interact = {
								blockoverride "has_principle_visibility" {
									block "has_principle_visibility_formation" {
										visible = "[GetPlayer.GetPowerBloc.HasPrinciple(PowerBlocPrinciple.Self)]"
									}
								}

								blockoverride "principle_group_tooltip" {
									tooltipwidget = {
										FancyTooltip_PowerBlocPrincipleGroup = {
											blockoverride "text_before" {
												visible = "[PowerBlocPrincipleGroup.IsPrimaryFor(PowerBlocIdentity.Self)]"
												text = "DATA_PRIMARY_PRINCIPLE_GROUP"
												margin_bottom = 15
											}
										}
									}
								}
							}
						}
					}
				}
			}

			tooltip_divider = {}

			custom_tooltip_textbox = {
				text = "DATA_POWER_BLOC_IDENTITY_DESC"
			}
		}
	}

	type principle_main_tooltip = flowcontainer {
		direction = vertical

		### HAS THIS PRINCIPLE - ACTIVE POWER BLOC
		block "has_this_principle" {
			custom_tooltip_textbox_with_empty_line = {
				visible = "[GetPlayer.GetPowerBloc.HasPrinciple(PowerBlocPrinciple.Self)]"
				text = "POWER_BLOC_PLAYER_PRINCIPLE_INFO"
			}	
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetIsPossibleTriggerDesc))]"
			text = "[PowerBlocPrinciple.GetIsPossibleTriggerDesc]"
		}

		### PRINCIPLE GROUP INFO
		block "principle_group_info" {
			custom_tooltip_textbox_with_empty_line = {
				datacontext = "[PowerBlocPrinciple.GetGroup]"
				text = "DATA_PRINCIPLE_GROUP_ENTRY"
			}
		}

		### EFFECTS
		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetPowerBlocEffectDesc))]"
			text = "[PowerBlocPrinciple.GetPowerBlocEffectDesc]"
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetMemberEffectDesc))]"
			text = "[PowerBlocPrinciple.GetMemberEffectDesc]"
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetLeaderEffectDesc))]"
			text = "[PowerBlocPrinciple.GetLeaderEffectDesc]"
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetNonLeaderEffectDesc))]"
			text = "[PowerBlocPrinciple.GetNonLeaderEffectDesc]"
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetInstitutionEffectDesc))]"
			text = "[PowerBlocPrinciple.GetInstitutionEffectDesc]"
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetBuildingTypesDesc))]"
			text = "[PowerBlocPrinciple.GetBuildingTypesDesc]"
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetCompanyTypesDesc))]"
			text = "[PowerBlocPrinciple.GetCompanyTypesDesc]"
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetProductionMethodsDesc))]"
			text = "[PowerBlocPrinciple.GetProductionMethodsDesc]"
		}

		custom_tooltip_textbox_with_empty_line = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetMobilizationOptionsDesc))]"
			text = "[PowerBlocPrinciple.GetMobilizationOptionsDesc]"
		}

		custom_tooltip_textbox = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetIncompatibilitiesDesc))]"
			text = "[PowerBlocPrinciple.GetIncompatibilitiesDesc]"
		}

		tooltip_divider = {}

		### DESCRIPTION
		custom_tooltip_textbox = {
			visible = "[Not(StringIsEmpty(PowerBlocPrinciple.GetDesc))]"
			text = "[PowerBlocPrinciple.GetDesc]"
		}
	}

	type FancyTooltip_PowerBlocPrinciple = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "replace_icon" {
			principle_icon_with_bg = {
				parentanchor = center
				size = { 50 50 }
			}
		}

		blockoverride "icon_frame" {}

		blockoverride "name" {
			text = "[PowerBlocPrinciple.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_power_bloc_principle]"
		}

		blockoverride "tooltip_content_after" {
			principle_main_tooltip = {}
		}
	}

	type FancyTooltip_PowerBlocPrincipleSlot = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "replace_icon" {
			principle_icon_with_bg = {
				parentanchor = center
				size = { 50 50 }
			}
		}

		blockoverride "icon_frame" {}

		blockoverride "name" {
			text = "[PowerBlocPrinciple.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_power_bloc_principle]"
		}

		blockoverride "tooltip_content_after" {
			
			### CAN UPGRADE THIS PRINCIPLE
			block "upgrade_text" {
				custom_tooltip_textbox_with_empty_line = {
					visible = "[IsValid(PowerBlocPrinciple.UpgradeToNextLevel)]"
					text = "POWER_BLOC_PLAYER_CAN_UPGRADE_THIS_PRINCIPLE"
				}
			}

			principle_main_tooltip = {}

			### CLICK PROMPT
			block "click_text" {
				custom_tooltip_textbox = {
					text = "CLICK_TO_SEE_ALL_PRINCIPLES"
					margin_top = 15
				}
			}
		}
	}

	type FancyTooltip_PowerBlocPrincipleSelection = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "replace_icon" {
			principle_icon_with_bg = {
				parentanchor = center
				size = { 50 50 }
			}
		}

		blockoverride "icon_frame" {}

		blockoverride "name" {
			text = "[PowerBlocPrinciple.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_power_bloc_principle]"
		}

		blockoverride "tooltip_content_after" {

			custom_tooltip_textbox_with_empty_line = {
				visible = "[Not(StringIsEmpty(PowerBlocPrincipleSelectionWindow.GetDescForPrincipleSelection(PowerBlocPrinciple.Self)))]"
				text = "[PowerBlocPrincipleSelectionWindow.GetDescForPrincipleSelection(PowerBlocPrinciple.Self)]"
			}

			principle_main_tooltip = {
				blockoverride "principle_group_info" {
					blockoverride "has_this_principle" {
						### HAS THIS PRINCIPLE - DURING FORMATION
						custom_tooltip_textbox_with_empty_line = {
							visible = "[PowerBlocPrincipleSelectionWindow.GetPowerBlocFormation.HasSelectedPrinciple(PowerBlocPrinciple.Self)]"
							datacontext = "[PowerBlocPrincipleSelectionWindow.GetPowerBlocFormation]"
							text = "POWER_BLOC_FORMATION_HAS_THIS_PRINCIPLE"
						}

						### HAS THIS PRINCIPLE GROUP - DURING FORMATION
						custom_tooltip_textbox_with_empty_line = {
							visible = "[And(Not(PowerBlocPrincipleSelectionWindow.GetPowerBlocFormation.HasSelectedPrinciple(PowerBlocPrinciple.Self)), PowerBlocPrincipleSelectionWindow.GetPowerBlocFormation.HasSelectedPrincipleGroup(PowerBlocPrinciple.GetGroup.Self))]"
							datacontext = "[PowerBlocPrincipleSelectionWindow.GetPowerBlocFormation]"
							text = "POWER_BLOC_FORMATION_HAS_THIS_PRINCIPLE_GROUP"
						}

						### HAS THIS PRINCIPLE - ACTIVE POWER BLOC
						custom_tooltip_textbox_with_empty_line = {
							visible = "[PowerBlocPrincipleSelectionWindow.GetPowerBloc.HasPrinciple(PowerBlocPrinciple.Self)]"
							datacontext = "[PowerBlocPrincipleSelectionWindow.GetPowerBloc]"
							text = "POWER_BLOC_HAS_THIS_PRINCIPLE"
						}

						### HAS THIS PRINCIPLE GROUP - ACTIVE POWER BLOC
						custom_tooltip_textbox_with_empty_line = {
							visible = "[And(Not(PowerBlocPrincipleSelectionWindow.GetPowerBloc.HasPrinciple(PowerBlocPrinciple.Self)), PowerBlocPrincipleSelectionWindow.GetPowerBloc.HasPrincipleFromGroup(PowerBlocPrinciple.GetGroup.Self))]"
							datacontext = "[PowerBlocPrincipleSelectionWindow.GetPowerBloc]"
							text = "POWER_BLOC_HAS_THIS_PRINCIPLE_GROUP"
						}
					}

					### IS NOT PRIMARY PRINCIPLE GROUP
					custom_tooltip_textbox_with_empty_line = {
						visible = "[And(Not(PowerBlocPrincipleGroup.IsPrimaryFor(PowerBlocPrincipleSelectionWindow.GetPowerBlocFormation.GetSelectedIdentity.Self)), Not(PowerBlocPrincipleGroup.IsPrimaryFor(PowerBlocPrincipleSelectionWindow.GetPowerBloc.GetIdentity.Self)))]"
						text = "DATA_PRINCIPLE_GROUP_ENTRY"
					}

					### IS PRIMARY PRINCIPLE GROUP - DURING FORMATION
					custom_tooltip_textbox_with_empty_line = {
						visible = "[And(PowerBlocPrincipleSelectionWindow.IsPowerBlocFormation, PowerBlocPrincipleGroup.IsPrimaryFor(PowerBlocPrincipleSelectionWindow.GetPowerBlocFormation.GetSelectedIdentity.Self))]"
						datacontext = "[PowerBlocPrincipleSelectionWindow.GetPowerBlocFormation.GetSelectedIdentity]"
						text = "DATA_PRIMARY_PRINCIPLE_GROUP_ENTRY_FORMATION"
					}

					### IS PRIMARY PRINCIPLE GROUP - ACTIVE POWER BLOC
					custom_tooltip_textbox_with_empty_line = {
						visible = "[And(Not(PowerBlocPrincipleSelectionWindow.IsPowerBlocFormation), PowerBlocPrincipleGroup.IsPrimaryFor(PowerBlocPrincipleSelectionWindow.GetPowerBloc.GetIdentity.Self))]"
						datacontext = "[PowerBlocPrincipleSelectionWindow.GetPowerBloc.GetIdentity]"
						text = "DATA_PRIMARY_PRINCIPLE_GROUP_ENTRY_ACTIVE"
					}
				}
			}

			custom_tooltip_textbox = {
				text = "CLICK_TO_SELECT"
				margin_top = 15
			}
		}
	}

	type FancyTooltip_PowerBlocPrincipleGroup = FancyTooltipWidgetType {
		blockoverride "text" {} # Fully replaced by everything in tooltip_content_after

		blockoverride "name" {
			text = "[PowerBlocPrincipleGroup.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "[concept_power_bloc_principle_group]"
		}

		blockoverride "replace_icon" {

			### This can be replaced by a new function: PowerBlocPrincipleGroup.GetTexture in PRCAL-34058
			flowcontainer = {
				parentanchor = center
				datamodel = "[PowerBlocPrincipleGroup.GetLevels]"

				item = {
					principle_icon = {
						visible = "[EqualTo_int32(PdxGuiWidget.GetIndexInDataModel, '(int32)0')]"
						parentanchor = vcenter
						size = { 50 50 }
					}
				}
			}
		}

		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox_with_empty_line = {
				visible = "[GetPlayer.GetPowerBloc.HasPrincipleFromGroup(PowerBlocPrincipleGroup.Self)]"
				text = "POWER_BLOC_PLAYER_HAS_THIS_PRINCIPLE_GROUP"
			}

			flowcontainer = {
				direction = vertical
				spacing = 5

				custom_tooltip_textbox = {
					text = "PRINCIPLES_TOOLTIP_TITLE"
				}

				dynamicgridbox = {
					parentanchor = hcenter
					flipdirection = yes
					datamodel_wrap = 2
					datamodel = "[PowerBlocPrincipleGroup.GetLevels]"

					item = {
						widget = {
							size = { 260 60 }

							locked_active_principle_slot = {
								parentanchor = center
								alpha = 1

								blockoverride "slot_size" {
									size = { 250 50 }
								}

								blockoverride "name_default_format" {}

								blockoverride "name_max_width" {
									max_width = 180
								}
							}
						}
					}
				}
			}

			tooltip_divider = {}

			custom_tooltip_textbox = {
				text = "DATA_POWER_BLOC_PRINCIPLE_GROUP_DESC"
			}
		}
	}

	type RegularTooltip_TimedModifierList = RegularTooltip {
		blockoverride "tooltip_content" {
			flowcontainer = {
				parentanchor = hcenter
				spacing = 2
				direction = vertical

				flowcontainer = {
					parentanchor = hcenter
					direction = vertical

					block "first_datamodel" {
						datamodel = "[DataModelSkipFirst(PoliticalMovement.GetTimedModifiers, '(int32)3')]"
					}

					item = {
						widget = {
							size = { 500 40 }

							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin = { 10 0 }

								hbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									tooltip = "[TimedModifier.GetTooltip]"
									margin = { 10 0 }

									background = {
										using = entry_bg_simple
									}

									flowcontainer = {
										spacing = 10
										minimumsize = { -1 40 }

										icon = {
											parentanchor = vcenter
											size = { 25 25 }
											texture = "[TimedModifier.GetIcon]"
										}

										textbox = {
											parentanchor = vcenter
											autoresize = yes
											align = nobaseline
											max_width = 440
											elide = right
											fontsize_min = 12
											text = "[TimedModifier.GetName]"
										}
									}

									expand = {}

									textbox = {
										autoresize = yes
										align = nobaseline
										text = "[TimedModifier.GetRemainingDuration]"
									}
								}
							}
						}
					}
				}
			}
		}
	}

	type RegularTooltip_Leverage = RegularTooltip {
		blockoverride "tooltip_content_after" {
			custom_tooltip_textbox = {
				text = "DATA_LEVERAGE_ADVANTAGE_HEADER"
			}

			flowcontainer = {
				spacing = 5

				block "has_power_bloc_context_visibility" {
					visible = no
				}

				custom_tooltip_textbox = {
					tooltip = "POWER_BLOC_CURRENT_LEVERAGE_BAR_TOOLTIP"
					raw_text = "#tooltippable #v [PowerBloc.GetLeverageAdvantage(Country.Self)|+=0]#!#!"
				}

				custom_tooltip_textbox = {

					text = "DATA_LEVERAGE_ADVANTAGE_FOR_POWER_BLOC"
				}
			}

			block "have_no_power_bloc" {}

			custom_tooltip_textbox = {
				text = "TOOLTIP_DELIMITER"
			}

			custom_tooltip_textbox_with_empty_line = {
				block "has_power_bloc_context_visibility" {
					visible = no
				}

				text = "DATA_LEVERAGE_ADVANTAGE_WHO_LEADS_LABEL"
			}

			flowcontainer = {
				direction = vertical

				custom_tooltip_textbox = {
					text = "CURRENT_LEVERAGE_BAR_TITLE"
				}

				leverage_stacked_barchart = {}
			}

			widget = {
				size = { 5 5 }
			}

			flowcontainer = {
				direction = vertical

				custom_tooltip_textbox = {
					text = "TARGET_LEVERAGE_BAR_TITLE"
				}

				leverage_target_stacked_barchart = {}
			}
		}
	}

	type FancyTooltip_MilitaryFormation = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_MILITARY_FORMATION"
		}

		blockoverride "icon_texture" {
			texture = "[MilitaryFormation.GetFlag]"
			color = "[MilitaryFormation.GetFlagColor]"
		}

		blockoverride "icon_background_texture" {}

		blockoverride "icon_frame" {}

		blockoverride "name" {
			text = "[MilitaryFormation.GetNameNoFormatting]"
		}

		blockoverride "type" {
			text = "DATA_MILITARY_FORMATION_TYPE"
		}

		blockoverride "go_to_button_visibility" {
			visible = yes
		}

		blockoverride "go_to_button_tooltip" {
			tooltip = "GO_TO_BUTTON_MILITARY_FORMATION"
		}

		blockoverride "go_to_button_properties" {
			onclick = "[InformationPanelBar.OpenMilitaryFormationPanel(MilitaryFormation.AccessSelf)]"
		}

		blockoverride "tooltip_content_after" {

			widget = {
				size = { 15 15 }
			}

			flowcontainer = {
				spacing = 5
				maximumsize = { 550 -1 }

				manpower_bar = {
					size = { 6 15 }
					parentanchor = vcenter
					alpha = "[TransparentIfTrue(EqualTo_int64(MilitaryFormation.GetMaxManpower, MilitaryFormation.GetCurrentManpower))]"
				}

				DefaultTooltipTextBox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					multiline = yes
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					text = "DATA_MILITARY_FORMATION_MANPOWER"
				}
			}

			flowcontainer = {
				spacing = 5
				maximumsize = { 550 -1 }

				organization_bar = {
					tooltip = "MILITARY_FORMATION_ORGANIZATION_TOOLTIP"
					parentanchor = vcenter
					size = { 6 15 }
					
					blockoverride "organization_value" {
						value = "[FixedPointToFloat( MilitaryFormation.GetOrganizationPercentage )]"
					}
					blockoverride "organization_color" {
						color = "[GetOrganizationColorVec( MilitaryFormation.GetOrganizationPercentage )]"
					}
					alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(MilitaryFormation.GetOrganizationPercentage, '(CFixedPoint)1'))]"
				}

				DefaultTooltipTextBox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					multiline = yes
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					text = "DATA_MILITARY_FORMATION_ORGANIZATION"
				}
			}

			flowcontainer = {
				spacing = 5
				maximumsize = { 550 -1 }

				morale_bar = {
					size = { 6 15 }
					parentanchor = vcenter
					tooltip = "MILITARY_FORMATION_MORALE_TOOLTIP"
					
					blockoverride "morale_value" {
						value = "[FixedPointToFloat( MilitaryFormation.GetMorale )]"
					}
					blockoverride "morale_color" {
						color = "[GetMoraleColorVec( MilitaryFormation.GetMorale )]"
					}
					alpha = "[TransparentIfTrue(EqualTo_CFixedPoint(MilitaryFormation.GetMorale, '(CFixedPoint)1'))]"
				}

				DefaultTooltipTextBox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					multiline = yes
					fonttintcolor = "[TooltipInfo.GetTintColor]"
					text = "DATA_MILITARY_FORMATION_MORALE"
				}
			}

			widget = {
				size = { 15 15 }
			}

			DefaultTooltipTextBox = {
				visible = "[IsDataModelEmpty(MilitaryFormation.GetCommanders)]"
				text = "NO_COMMANDERS_IN_MILITARY_FORMATION"
				align = nobaseline
				autoresize = yes
				multiline = yes
				maximumsize = { 500 -1 }
				fonttintcolor = "[TooltipInfo.GetTintColor]"
			}

			DefaultTooltipTextBox = {
				visible = "[Not(IsDataModelEmpty(MilitaryFormation.GetCommanders))]"
				text = "MILITARY_FORMATION_COMMANDERS_TOOLTIP_TITLE"
				margin_bottom = 5
				autoresize = yes
				multiline = yes
				maximumsize = { 550 -1 }
				fonttintcolor = "[TooltipInfo.GetTintColor]"
			}

			dynamicgridbox = {
				visible = "[Not(IsDataModelEmpty(MilitaryFormation.GetCommanders))]"
				datamodel = "[MilitaryFormation.GetCommanders]"

				item = {
					flowcontainer = {
						spacing = 5

						icon = {
							datacontext = "[Character.GetOrderType]"
							parentanchor = vcenter
							size = { 40 40 }
							texture = "[CommanderOrderType.GetTexture]"
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							icon = {
								visible = "[Not(CommanderOrderType.IsBasicOrderType)]"
								parentanchor = bottom
								position = { -4 4 }
								size = { 20 20 }
								texture = "gfx/interface/icons/generic_icons/most_senior_front_commander.dds"
							}
						}

						icon = {
							visible = "[Character.GetNextOrderType.IsValid]"
							parentanchor = vcenter
							size = { 25 25 }
							texture = "gfx/interface/icons/generic_icons/turns_into.dds"
						}

						icon = {
							visible = "[Character.GetNextOrderType.IsValid]"
							datacontext = "[Character.GetNextOrderType]"
							parentanchor = vcenter
							size = { 40 40 }
							texture = "[CommanderOrderType.GetTexture]"
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							icon = {
								visible = "[Not(CommanderOrderType.IsBasicOrderType)]"
								parentanchor = bottom
								position = { -4 4 }
								size = { 20 20 }
								texture = "gfx/interface/icons/generic_icons/most_senior_front_commander.dds"
							}
						}

						character_portrait_small = {
							blockoverride "portrait_button_onrightclick" {}

							blockoverride "commander_order_icon" {}
						}

						DefaultTooltipTextBox = {
							parentanchor = vcenter
							text = "[Character.GetFullName]"
							align = nobaseline
							autoresize = yes
							multiline = yes
							maximumsize = { 500 -1 }
							fonttintcolor = "[TooltipInfo.GetTintColor]"
						}

						button_icon_goto = {
							parentanchor = vcenter
							size = { 30 30 }

							blockoverride "icon_size" {
								size = { 100% 100% }
							}

 							onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
							tooltip = "GO_TO_BUTTON_CHARACTER"
 						}
					}
				}
			}

			widget = {
				size = { 15 15 }
			}

			military_formation_mobilize_button = {
				parentanchor = hcenter
				visible = "[MilitaryFormation.IsArmy]"

				blockoverride "size" {
					size = { 350 50 }
				}

				blockoverride "button_size" {
					size = { 335 75% }
				}

				blockoverride "fontsize" {}

				blockoverride "mobilization_icon_size" {
					size = { 50 50 }
				}
			}
		}
	}

	type FancyTooltip_CombatUnitTypeWithoutCulture = FancyTooltipWidgetType {
        blockoverride "text" {
            text = "DATA_COMBAT_UNIT_TYPE_NAME_TOOLTIP"
        }

		blockoverride "icon_texture" {
			modify_texture = {
				using = simple_frame_mask
			}

			icon = {
				using = simple_frame
				size = { 102% 102% }
				position = { -1% -1% }
			}
			
			texture = "[CombatUnitType.GetDefaultTexture]"
		}

		blockoverride "icon_size" {
			size = { 48 48 }
		}

        blockoverride "name" {
            text = "[CombatUnitType.GetNameNoFormatting]"
        }

        blockoverride "type" {
            text = "[concept_combat_unit_type]"
        }

        blockoverride "icon_frame" {}
    }
	
	type FancyTooltip_CombatUnitTypeWithCulture = FancyTooltipWidgetType {
        blockoverride "text" {
            text = "DATA_COMBAT_UNIT_TYPE_NAME_TOOLTIP"
        }

		blockoverride "icon_texture" {
			modify_texture = {
				using = simple_frame_mask
			}

			icon = {
				using = simple_frame
				size = { 102% 102% }
				position = { -1% -1% }
			}
			
			block "culture_texture" {
				texture = "[CombatUnitType.GetTextureForCulture( Culture.Self )]"
			}
		}

		blockoverride "icon_size" {
			size = { 48 48 }
		}

        blockoverride "name" {
            text = "[CombatUnitType.GetNameNoFormatting]"
        }

        blockoverride "type" {
            text = "[concept_combat_unit_type]"
        }

        blockoverride "icon_frame" {}
    }

	type FancyTooltip_CommanderOrderType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_COMMANDER_ORDER_TYPE_NAME_TOOLTIP"
		}
		
		blockoverride "icon_texture" {
            texture = "[CommanderOrderType.GetTexture]"
        }

        blockoverride "name" {
            text = "[CommanderOrderType.GetNameNoFormatting]"
        }

        blockoverride "type" {
            text = "[concept_order]"
        }
	}

	type FancyTooltip_DiplomaticAction = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_DIPLOMATIC_ACTION_NAME_TOOLTIP"
		}
		
		blockoverride "icon_texture" {
            texture = "[DiplomaticAction.GetType.GetTexture]"
        }

        blockoverride "text_before" {
        	visible = "[GreaterThan_CFixedPoint(DiplomaticAction.GetMaintenanceCost, '(CFixedPoint)0')]"
			text = "DATA_DIPLOMATIC_ACTION_INFLUENCE_COST"
			margin_bottom = 15
		}

        blockoverride "name" {
            text = "DATA_DIPLOMATIC_ACTION_NAME"
        }

        blockoverride "type" {
            text = "DATA_DIPLOMATIC_ACTION_PACT_OR_ONGOING_ACTION"
        }
	}

	type FancyTooltip_DiplomaticActionWithTargetCountry = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_COUNTRY_DIPLOMATIC_ACTION_NAME_TOOLTIP"
		}
		
		blockoverride "icon_texture" {
            texture = "[DiplomaticAction.GetType.GetTexture]"
        }

        blockoverride "name" {
            text = "DATA_COUNTRY_DIPLOMATIC_ACTION_NAME"
        }

        blockoverride "type" {
            text = "DATA_DIPLOMATIC_ACTION_PACT_OR_ONGOING_ACTION"
        }
	}

	### THIS SHOULD ONLY BE USED IN GENERIC PLACES AND NEVER ON BUTTONS FOR THE DIPLOMATIC ACTION
	type FancyTooltip_DiplomaticActionType = FancyTooltipWidgetType {
		blockoverride "text" {
			text = "DATA_DIPLOMATIC_ACTION_TYPE_NAME_TOOLTIP"
		}
		
		blockoverride "icon_texture" {
            texture = "[DiplomaticActionType.GetTexture]"
        }

        blockoverride "name" {
            text = "DATA_DIPLOMATIC_ACTION_TYPE_NAME"
        }

        blockoverride "type" {
            text = "DIPLOMATIC_ACTION_TYPE_TYPE"
        }
	}

	type FancyTooltip_ModifierBreakdown = FancyTooltipWidgetType {
		blockoverride "text_before" {
			text = "DATA_MODIFIER_BREAKDOWN_TOOLTIP"
		}

		blockoverride "name" {
			text = "[ModifierBreakdown.GetName]"
		}

		blockoverride "type" {
			text = "[ModifierBreakdown.GetTypeName]"
		}

		blockoverride "instruction_text" {
			text = "[ModifierBreakdown.GetTypeDescription]"
		}
	}
}

template building_size_tooltip_with_ownership 
{
	tooltip = "BUILDING_SIZE_TT"
	using = tooltip_se
	tooltipwidget = {
		TooltipWidgetType = {
			blockoverride "tooltip_content_after" {

				flowcontainer = {
					using = visible_if_ownership_can_be_split
					direction = vertical

					custom_tooltip_textbox = {
						text = "BUILDING_SIZE_TT_OWNERS_HEADER"		
					}

					building_ownership_stacked_barchart_short = {
						blockoverride "barchart_size" {
							size = { 360 40 }
						}
					}
				}
				
			}
		}
	}
}

template building_ownership_share_tooltip 
{
	tooltip = "OWNERSHIP_SHARE_CHART_TOOLTIP"
	tooltipwidget = {
		TooltipWidgetType = {
			blockoverride "tooltip_content_after" {

				#private ownership
				flowcontainer = {
					visible = "[Not(BuildingOwnership.IsCountryOwned)]"

					direction = vertical

					custom_tooltip_textbox = {
						text = "TOOLTIP_DELIMITER"		
					}

					# Local workforce list
					flowcontainer = {
						visible = "[ObjectsEqual(BuildingOwnership.GetOwnedBuilding.Self, BuildingOwnership.GetOwnerBuilding.Self)]"
						direction = vertical
						custom_tooltip_textbox = {
							text = "OWNERSHIP_SHARE_CHART_TOOLTIP_LOCAL_WORKFORCE_HEADER"		
						}

						flowcontainer = {
							direction = vertical

							datamodel = "[BuildingOwnership.GetOwnedBuilding.AccessPopsList.GetItems]"
							
							item = {
								custom_tooltip_textbox = {
									text = "OWNERSHIP_SHARE_CHART_TOOLTIP_WORKFORCE_POP_LINE"		
								}
							}
						}
					}

					# Ownership building workforce list
					flowcontainer = {
						visible = "[Not(ObjectsEqual(BuildingOwnership.GetOwnedBuilding.Self, BuildingOwnership.GetOwnerBuilding.Self))]"
						direction = vertical
						custom_tooltip_textbox = {
							text = "OWNERSHIP_SHARE_CHART_TOOLTIP_OWNER_BUILDING_WORKFORCE_HEADER"		
						}

						flowcontainer = {
							direction = vertical

							datamodel = "[BuildingOwnership.GetOwnerBuilding.AccessPopsList.GetItems]"
							
							item = {
								custom_tooltip_textbox = {
									text = "OWNERSHIP_SHARE_CHART_TOOLTIP_WORKFORCE_POP_LINE"		
								}
							}
						}
					}

					
				}
				
			}
		}
	}
}


template tooltip_segment_background {
	background = {
		using = dark_area
		alpha = 0.2
		margin = {13 0}
	}
}

template tooltip_segment_margin {
	margin = {0 5}
}
