template hud_elements_alpha {
	alpha = 1
}

# Note: We are using a slightly modified version of this in outliner_framework:11, update that one as well if this one gets changed
template hud_visibility {
	visible = "[And( IsInGame, And( Not( IsPauseMenuShown ), Not( IsGameOverScreenShown )))]"
}

@secondary_icon_size = 26

types topbar_components
{
	
	#####################################################################################################################
	#####################################################################################################################
	#####################################################################################################################
	#####################################################################################################################

	### SECONDARY ICONS
	type topbar_secondary_icons = container {
		position = { 150 40 }

		flowcontainer = {
			direction = vertical
			spacing = 0

			flowcontainer = {
				visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
				block "animation" {
					position = { 0 0 }
					alpha = 0

					state = {
						name = show_topbar_secondary_stats
						alpha = 1
						position_y = 44
						duration = 0.15
						using = Animation_Curve_Default
					}
					state = {
						name = hide_topbar_secondary_stats
						alpha = 0
						position_y = 0
						duration = 0.15
						using = Animation_Curve_Default
					}
				}

				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
				}

				#Pop
				button = {
					name = "population_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenPanelTab('pops_overview', 'default')]"
					flowcontainer = {
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						using = population_tooltip_with_graph
						using = tooltip_below

						icon = {
							texture = "gfx/interface/icons/generic_icons/population.dds"
							size = { @secondary_icon_size @secondary_icon_size }
							parentanchor = vcenter
						}
						textbox = {
							parentanchor = vcenter
							text = "#variable [Country.GetTotalPopulation|D]#!"
							autoresize = yes
							align = left|nobaseline
						}
					}
				}

				#Sol
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					using = average_standard_of_living_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_standard_of_living')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alwaystransparent = no

					textbox = {
						parentanchor = vcenter
						text = "[LabelingHelper.GetIconForStandardOfLivingCFixedPoint(Country.GetAverageSoLByPopulation)|v]"
						autoresize = yes
						align = left|nobaseline
						fontsize = 21 #hack to get the same size on the text icon as the rest in the top bar
					}

					textbox = {
						parentanchor = vcenter
						text = "[Country.GetFormattedStandardOfLivingAll|v]"
						autoresize = yes
						align = left|nobaseline
						margin_left = 3
					}
				}

				#Innovation
				flowcontainer = {
				 	name = "innovation"
				 	minimumsize = { 90 28 }
				 	maximumsize = { 90 28 }
				 	spacing = 2
				 	tooltip = "INNOVATION_TOOLTIP"
				 	using = tooltip_below

				 	icon = {
				 		size = { @secondary_icon_size @secondary_icon_size }
				 		name = infamy_icon
				 		texture = "gfx/interface/icons/generic_icons/innovation.dds"
				 		parentanchor = vcenter
				 	}

				 	textbox = {
				 		parentanchor = vcenter
				 		text = "[Country.GetWeeklyInnovation|1v]"
				 		alpha = "[TransparentIfZero_int32(Country.GetWeeklyInnovation)]"
				 		autoresize = yes
				 		align = left|nobaseline
				 	}
				}

				#GDP
				flowcontainer = {
					name = "tutorial_highlight_gdp"
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					using = GDP_tooltip_with_graph
					using = tooltip_below

					onmousehierarchyenter = "[SelectMapModeByKey('mm_gdp')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alwaystransparent = no

					icon = {
						texture = "gfx/interface/icons/generic_icons/gdp.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = "#variable [Country.GetGDP|1*]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}


				### Inflation/deflation
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }

					name = "tutorial_highlight_influence"
					using = glow_button
					tooltip = "INFLATION_TITLE"
					tooltipwidget = {
						TooltipWidgetType = {
							blockoverride "tooltip_content_after" {
								v3_plotline = {
									using = default_list_position

									blockoverride "header" {
										text = ""
									}
									blockoverride "line_color" {
										color = "[Pop.GetPopType.GetColor]"
									}
									blockoverride "size" {
										size = { 280 100 }
									}
									blockoverride "line_plotpoints" {
										plotpoints = "[GetTrendPlotPointsNormalized(GetPlayer.MakeScope.ScriptValue('inflation_value'), '(CFixedPoint)0', '(CFixedPoint)0.3' )]"
									}
									blockoverride "maxvalue" {
										text = "100%"
									}
									blockoverride "minvalue" {
										raw_text = "-100%"
									}
									blockoverride "startdate" {
										text = "[GetOldestDate(Country.GetRadicalsTrend)]"
									}
									blockoverride "enddate" {
										text = "[GetLatestDate(Country.GetRadicalsTrend)]"
									}
									blockoverride "extra_plotlines" {
										### Base Price line
										plotline = {
											size = { 100% 100% }
											using = plot_line
											width = 2
											color = { 1 0 0 0.5 }
											plotpoints = "[(CFixedPoint)0]"
										}
									}
									blockoverride "multiitem" {}

									blockoverride "empty_state_visibility" {
										visible = "[IsEmpty(Pop.GetSizeTrend)]"
									}
									blockoverride "empty_state_text" {
										text = "GRAPH_NOT_INITIALIZED"
									}
								}
							}
						}
					}
					using = tooltip_below
					onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
					enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

					icon = {
						texture = "gfx/interface/icons/topbar/inflation2.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
						name = dip_power_icon
						position = { 0 2 }
					}
					textbox = {
						raw_text = "#bold [GetPlayer.MakeScope.ScriptValue('inflation_value')|%|=-]#!"
						align = left|nobaseline
						autoresize = yes
						parentanchor = vcenter
					}
				}

				### has_central_banking_no_gold_standard_tech_visibility
				flowcontainer = {
					visible = "[GetScriptedGui('has_central_banking_no_gold_standard_tech_visibility').IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

					name = "has_central_banking_no_gold_standard_tech_visibility"
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					tooltip = "MONEY_VALUE_no_gold_standart"

					using = tooltip_below
					onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
					enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

					textbox = {
						parentanchor = vcenter
						text = "money_value_in_paper_top_bar"
						align = left|nobaseline
						autoresize = yes
					}
				}

				### has_gold_standard_no_gold_exchange_standard_tech_visibility
				flowcontainer = {
					visible = "[GetScriptedGui('has_gold_standard_no_gold_exchange_standard_tech_visibility').IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

					name = "has_gold_standard_no_gold_exchange_standard_tech_visibility"
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					tooltip = "MONEY_VALUE_gold_standard"

					tooltipwidget = {
						TooltipWidgetType = {
							blockoverride "tooltip_content_after" {
								v3_plotline = {
									using = default_list_position

									blockoverride "header" {
										text = ""
									}
									blockoverride "line_color" {
										color = "[Pop.GetPopType.GetColor]"
									}
									blockoverride "size" {
										size = { 280 100 }
									}

									blockoverride "line_plotpoints" {
										plotpoints = "[GetTrendPlotPointsNormalized(Country.GetMintingTrend, '(CFixedPoint)0', GetMax(Country.GetMintingTrend) )]"
									}

									blockoverride "maxvalue" {
										raw_text = "100"
									}

									blockoverride "minvalue" {
										raw_text = "0.01"
									}

									blockoverride "startdate" {
										text = "[GetOldestDate(Country.GetRadicalsTrend)]"
									}

									blockoverride "enddate" {
										text = "[GetLatestDate(Country.GetRadicalsTrend)]"
									}

									blockoverride "extra_plotlines" {
									}

									blockoverride "multiitem" {}

									blockoverride "empty_state_visibility" {
										visible = "[IsEmpty(GetPlayer.GetMintingTrend)]"
									}
									blockoverride "empty_state_text" {
										text = "GRAPH_NOT_INITIALIZED"
									}
								}
							}
						}
					}

					using = tooltip_below
					onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
					enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

					textbox = {
						parentanchor = vcenter
						text = "money_value_in_gold_top_bar"
						align = left|nobaseline
						autoresize = yes
					}
				}

				### has_gold_exchange_standard_tech_visibility
				flowcontainer = {
					visible = "[GetScriptedGui('has_gold_exchange_standard_tech_visibility').IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

					name = "has_gold_exchange_standard_tech_visibility"
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					tooltip = "MONEY_VALUE_gold_exchange_standard"

					tooltipwidget = {
						TooltipWidgetType = {
							blockoverride "tooltip_content_after" {
								v3_plotline = {
									using = default_list_position

									blockoverride "header" {
										text = ""
									}
									blockoverride "line_color" {
										color = "[Pop.GetPopType.GetColor]"
									}
									blockoverride "size" {
										size = { 280 100 }
									}

									blockoverride "line_plotpoints" {
										plotpoints = "[GetTrendPlotPointsNormalized(Country.GetMintingTrend, '(CFixedPoint)0', GetMax(Country.GetMintingTrend) )]"
									}

									blockoverride "maxvalue" {
										raw_text = "100"
									}

									blockoverride "minvalue" {
										raw_text = "0.01"
									}

									blockoverride "startdate" {
										text = "[GetOldestDate(Country.GetRadicalsTrend)]"
									}

									blockoverride "enddate" {
										text = "[GetLatestDate(Country.GetRadicalsTrend)]"
									}

									blockoverride "extra_plotlines" {
									}

									blockoverride "multiitem" {}

									blockoverride "empty_state_visibility" {
										visible = "[IsEmpty(GetPlayer.GetMintingTrend)]"
									}
									blockoverride "empty_state_text" {
										text = "GRAPH_NOT_INITIALIZED"
									}
								}
							}
						}
					}

					using = tooltip_below
					onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
					enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

					textbox = {
						parentanchor = vcenter
						text = "money_value_in_reference_currency_top_bar"
						align = left|nobaseline
						autoresize = yes
					}
				}

				#############################################

				### subject_country
				flowcontainer = {
					visible = "[GetScriptedGui('has_central_banking_tech_and_is_subject_visibility').IsShown( GuiScope.SetRoot(GetPlayer.MakeScope).End)]"

					name = "subject_country"
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					tooltip = "MONEY_VALUE_subject"

					using = tooltip_below
					onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
					enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

					textbox = {
						parentanchor = vcenter
						text = "money_value_subject_country_top_bar"
						align = left|nobaseline
						autoresize = yes
					}
				}
			}
			
			### EXTRA INFO
			flowcontainer = {
				name = "extra_info"
				layoutpolicy_vertical = expanding

				background = {
					using = dark_area_rounded
					margin = { 0 -5 }
					margin_left = 5
				}

				# Loyalist
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					using = radicals_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_radicals')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alpha = "[TransparentIfZero_int32(Country.GetNumRadicals)]"
					alwaystransparent = no

					icon = {
						texture = "gfx/interface/icons/generic_icons/population_radical.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = "#variable [Country.GetNumRadicals|D]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}

				# Radical
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					using = loyalists_tooltip_with_graph
					using = tooltip_below
					onmousehierarchyenter = "[SelectMapModeByKey('mm_loyalists')]"
					onmousehierarchyleave = "[UnforceMapMode]"
					alpha = "[TransparentIfZero_int32(Country.GetNumLoyalists)]"
					alwaystransparent = no

					icon = {
						texture = "gfx/interface/icons/generic_icons/population_loyalist.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = "#variable [Country.GetNumLoyalists|D]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}

				# Litteracy
				flowcontainer = {
					minimumsize = { 90 28 }
					maximumsize = { 90 28 }
					spacing = 2
					tooltip = "LITERACY_TOOLTIP"
					using = tooltip_below

					icon = {
						texture = "gfx/interface/icons/generic_icons/literacy.dds"
						size = { @secondary_icon_size @secondary_icon_size }
						parentanchor = vcenter
					}
					textbox = {
						parentanchor = vcenter
						text = "#variable [Country.GetIncorporatedLiteracyRate|%1]#!"
						autoresize = yes
						align = left|nobaseline
					}
				}
				# Battalions
				button = {
					name = "battalions_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenPanelTab('military', 'army')]"

					flowcontainer = {
						name = "battalions"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "PANEL_MILITARY_ARMY_OVERVIEW_TOOLTIP"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = battalions_icon
							texture = "gfx/interface/icons/generic_icons/battalions.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetBattalions|v]+[Country.CalcConscriptableBattalions|v]"
							alpha = "[TransparentIfZero_int32(Country.GetBattalions)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = -1
						}
					}
				}

				# Flotillas
				button = {
					name = "flotillas_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenPanelTab('military', 'navy')]"

					flowcontainer = {
						name = "Flotillas"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "PANEL_MILITARY_NAVY_CURRENT_FLOTILLAS_TOOLTIP"
						using = tooltip_below
						margin_left = 3

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = flotillas_icon
							texture = "gfx/interface/icons/generic_icons/flotillas.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "#variable [Country.GetWarships|0]#!"
							alpha = "[TransparentIfZero_int32(Country.GetWarships)]"
							autoresize = yes
							align = left|nobaseline
							margin_left = 2
						}
					}
				}
				# Prestige
				button = {
					name = "prestige_button"
					size = { 90 28 }
					onclick = "[InformationPanelBar.OpenCountryPanel(Country.Self)]"

					flowcontainer = {
						name = "prestige"
						minimumsize = { 90 28 }
						maximumsize = { 90 28 }
						spacing = 2
						tooltip = "COUNTRY_PRESTIGE_BREAKDOWN"
						using = tooltip_below

						icon = {
							size = { @secondary_icon_size @secondary_icon_size }
							name = prestige_icon
							texture = "gfx/interface/icons/generic_icons/unused/most_senior_front_commander.dds"
							parentanchor = vcenter
						}

						textbox = {
							parentanchor = vcenter
							text = "[Country.GetPrestige|1v]"
							alpha = "[TransparentIfZero_int32(Country.GetPrestige)]"
							autoresize = yes
							align = left|nobaseline
						}
					}
				}

			}
		}
	}

	#####################################################################################################################
	#####################################################################################################################
	#####################################################################################################################
	#####################################################################################################################

	type topbar = widget {
		widget = {
			name = "topbar"
			using = hud_visibility
			datacontext = "[AccessMetaPlayer.AccessPlayedOrObservedCountry]"
			using = clickthrough_blocker
			size = { 705 80 }
			allow_outside = yes
			resizeparent = yes

			#alpha = 0
			#position = { 0 -100 }

			#state = {
			#	name = _show
			#	using = default_show_properties
			#	#position_y = 0
			#
			#	on_start = "[PdxGuiTriggerAllAnimations('hud_shiny_effect_show')]"
			#}
			#state = {
			#	name = _hide
			#	using = default_hide_properties
			#	#position_y = -100
			#}

			using = default_fade_in_out

			onmousehierarchyenter = "[PdxGuiInterruptThenTriggerAllAnimations('hide_topbar_secondary_stats','show_topbar_secondary_stats')]"
			onmousehierarchyleave = "[PdxGuiInterruptThenTriggerAllAnimations('show_topbar_secondary_stats','hide_topbar_secondary_stats')]"

			widget = {
				### background
				#this is also used to trigger notifications maximize/minimize
				#when you open/close any fullscreen (did not know where else to put it)
				widget = {
					using = fullscreen_hide
					size = { 100% 100% }

					state = {
						name = _show
						alpha = 1
						duration = 0
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_minimize','notifications_maximize')]"
					}
					state = {
						name = _hide
						alpha = 0
						duration = 0.2
						on_start = "[PdxGuiInterruptThenTriggerAllAnimations('notifications_maximize','notifications_minimize')]"
					}

					background = {
						texture = "gfx/interface/main_hud/topbar_bg.dds"
						shaderfile = "gfx/FX/pdxgui_default.shader"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 100
						texture_density = 2
						using = hud_elements_alpha

						modify_texture = {
							texture = "gfx/interface/backgrounds/default_bg_shading.dds"
							spriteType = Corneredstretched
							spriteborder = { 0 0 }
							blend_mode = overlay
							alpha = 0.5
						}
						modify_texture = {
							using = texture_velvet
						}
						modify_texture = {
							using = fancy_pattern
						}
					}
					icon = {
						texture = "gfx/interface/main_hud/topbar_side_dec.dds"
						size = { 100% 100% }
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						spriteborder_bottom = 94
						spriteborder_right = 110
						texture_density = 2

						using = hud_shiny_effect
					}
				}

				flowcontainer = {
					margin_right = 35
					margin_bottom = 7
					resizeparent = yes

					container = {
						### PRIMARY ICONS
						flowcontainer = {
							position = { 130 -1 }

							block "spacing" {
								spacing = 12
							}
							margin_bottom = 5

							flowcontainer = {
								# TODO Mikael / Aron: surely there is a better way to do this
								name = "tutorial_highlight_all_capacities"
								block "spacing" {
									spacing = 12
								}

								### BUREAUCRACY
								button = {
									name = "tutorial_highlight_bureaucracy"
									using = glow_button
									size = { 100 40 }
									tooltip = "BUREAUCRACY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'institutions')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = bureaucracy_icon
										texture = "gfx/interface/icons/topbar/bureaucracy_icon.dds"
										parentanchor = vcenter
									}

									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('bureaucracy')|D=+]#!"
										align = center|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}

									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom

										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('bureaucracy')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('bureaucracy'))]"
										}
									}
								}
								### AUTHORITY
								button = {
									name = "tutorial_highlight_authority"
									using = glow_button
									size = { 100 40 }
									tooltip = "AUTHORITY_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('politics', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = authority_icon
										texture = "gfx/interface/icons/topbar/authority_icon.dds"
										parentanchor = vcenter
									}

									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('authority')|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}

									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom

										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('authority')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('authority'))]"
										}
									}
								}
								### INFLUENCE
								button = {
									name = "tutorial_highlight_influence"
									using = glow_button
									size = { 100 40 }
									tooltip = "INFLUENCE_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenPanelTab('diplomatic_overview', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

									icon = {
										size = { 32 32 }
										position = { 0 2 }
										name = dip_power_icon
										texture = "gfx/interface/icons/topbar/influence_icon.dds"
										parentanchor = vcenter
									}

									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetPowerDelta('influence')|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}

									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom

										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitPowerRatioForProgressBar('influence')))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessPowerRatioForProgressBar('influence'))]"
										}
									}
								}
							}

							block "convoys_info" {
								button = {
									name = "tutorial_highlight_convoys"
									using = glow_button
									size = { 100 40 }
									tooltip = "CONVOY_TOPBAR_TOOLTIP"
									using = tooltip_below
									onclick = "[InformationPanelBar.OpenMarketPanelTab(AccessPlayer.AccessFirstMarket, 'trade_routes')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
									alpha = "[TransparentIfZero(GetPlayer.GetSupplyNetworkStrength)]"

									widget = {
										size = { 32 32 }
										name = convoys_icon
										parentanchor = vcenter
										position = { 0 2 }

										icon = {
											parentanchor = center
											size = { 28 28 }
											texture = "gfx/interface/icons/generic_icons/convoys.dds"
										}

									}
									textbox = {
										position = { 35 -3 }
										name = capital_value
										raw_text = "#bold [GetPlayer.GetNumAvailableConvoys|=+D]#!"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}

									double_direction_progressbar = {
										size = { 60 6 }
										position = { 40 -3 }
										parentanchor = bottom

										blockoverride "value_left" {
											value = "[Negate_float(FixedPointToFloat(GetPlayer.GetDeficitConvoyRatioForProgressBar))]"
										}
										blockoverride "value_right" {
											value = "[FixedPointToFloat(GetPlayer.GetExcessConvoyRatioForProgressBar)]"
										}
									}
								}
							}

							#####################################################################################################################
							#####################################################################################################################
							#####################################################################################################################
							#####################################################################################################################

							### MONEY
							flowcontainer = {
								name = "tutorial_highlight_treasury"
								##layoutpolicy_vertical = expanding

								direction = horizontal
								spacing = 0


								button = {
									using = glow_button
									size = { 100 40 }
									tooltip = "CAPITAL_MONEY"
									using = tooltip_below
									using = money_tooltip_with_graph
									onclick = "[InformationPanelBar.OpenPanelTab('budget', 'default')]"
									enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"

									icon = {
										size = { 36 36 }
										name = dip_power_icon

										#begin_tag_1						
										
									
											#algerian_dinar
											textbox = {
												position = { 0 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_algerian_dinar')]"
												parentanchor = vcenter
											}
																		
											#argentine_peso
											textbox = {
												position = { -3 -4 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_argentine_peso')]"
												parentanchor = vcenter
											}
																		
											#ariary
											textbox = {
												position = { 4 -6 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_ariary')]"
												parentanchor = vcenter
											}
																		
											#australian_dollar
											textbox = {
												position = { -3 -4 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_australian_dollar')]"
												parentanchor = vcenter
											}
																		
											#bahraini_dinar
											textbox = {
												position = { -5 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_bahraini_dinar')]"
												parentanchor = vcenter
											}
																		
											#baht
											textbox = {
												position = { 5 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_baht')]"
												parentanchor = vcenter
											}
																		
											#bavarian_gulden
											textbox = {
												position = { 7 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_bavarian_gulden')]"
												parentanchor = vcenter
											}
																		
											#belgian_franc
											textbox = {
												position = { 3 -2 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_belgian_franc')]"
												parentanchor = vcenter
											}
																		
											#brazilian_real
											textbox = {
												position = { -4 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_brazilian_real')]"
												parentanchor = vcenter
											}
																		
											#canadian_dollar
											textbox = {
												position = { -8 -2 }
												fontsize = 20
												text = "[Country.GetCustom('currency_symbol_canadian_dollar')]"
												parentanchor = vcenter
											}
																		
											#caribbean_dollar
											textbox = {
												position = { -4 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_caribbean_dollar')]"
												parentanchor = vcenter
											}
																		
											#central_african_eco
											textbox = {
												position = { -4 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_central_african_eco')]"
												parentanchor = vcenter
											}
																		
											#chilean_peso
											textbox = {
												position = { -4 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_chilean_peso')]"
												parentanchor = vcenter
											}
																		
											#colombian_peso
											textbox = {
												position = { -4 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_colombian_peso')]"
												parentanchor = vcenter
											}
																		
											#confederate_states_dollar
											textbox = {
												position = { -4 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_confederate_states_dollar')]"
												parentanchor = vcenter
											}
																		
											#costa_rican_colon
											textbox = {
												position = { 0 -3 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_costa_rican_colon')]"
												parentanchor = vcenter
											}
																		
											#cuban_peso
											textbox = {
												position = { -4 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_cuban_peso')]"
												parentanchor = vcenter
											}
																		
											#czech_koruna
											textbox = {
												position = { -5 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_czech_koruna')]"
												parentanchor = vcenter
											}
																		
											#danish_krone
											textbox = {
												position = { 0 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_danish_krone')]"
												parentanchor = vcenter
											}
																		
											#dinar
											textbox = {
												position = { 0 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_dinar')]"
												parentanchor = vcenter
											}
																		
											#ducato
											textbox = {
												position = { 6 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_ducato')]"
												parentanchor = vcenter
											}
																		
											#drachma
											textbox = {
												position = { 0 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_drachma')]"
												parentanchor = vcenter
											}
																		
											#ecuadorian_peso
											textbox = {
												position = { -2 -4 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_ecuadorian_peso')]"
												parentanchor = vcenter
											}
																		
											#egyptian_pound
											textbox = {
												position = { -2 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_egyptian_pound')]"
												parentanchor = vcenter
											}
																		
											#estonian_kroon
											textbox = {
												position = { -3 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_estonian_kroon')]"
												parentanchor = vcenter
											}
																		
											#ethiopian_birr
											textbox = {
												position = { -3 -5 }
												fontsize = 27
												text = "[Country.GetCustom('currency_symbol_ethiopian_birr')]"
												parentanchor = vcenter
											}
																		
											#finnish_markka
											textbox = {
												position = { -3 -6 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_finnish_markka')]"
												parentanchor = vcenter
											}
																		
											#florin
											textbox = {
												position = { 7 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_florin')]"
												parentanchor = vcenter
											}
																		
											#french_franc
											textbox = {
												position = { 5 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_french_franc')]"
												parentanchor = vcenter
											}
																		
											#ghanaian_cedi
											textbox = {
												position = { 2 -2 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_ghanaian_cedi')]"
												parentanchor = vcenter
											}
																		
											#gulden
											textbox = {
												position = { 7 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_gulden')]"
												parentanchor = vcenter
											}
																		
											#guatemalan_quetzal
											textbox = {
												position = { 2 -2 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_guatemalan_quetzal')]"
												parentanchor = vcenter
											}
																		
											#hannoveraner_thaler
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_hannoveraner_thaler')]"
												parentanchor = vcenter
											}
																		
											#honduran_lempira
											textbox = {
												position = { 5 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_honduran_lempira')]"
												parentanchor = vcenter
											}
																		
											#hungarian_forint
											textbox = {
												position = { 0 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_hungarian_forint')]"
												parentanchor = vcenter
											}
																		
											#icelandic_krona
											textbox = {
												position = { 0 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_icelandic_krona')]"
												parentanchor = vcenter
											}
																		
											#indian_rupee
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_indian_rupee')]"
												parentanchor = vcenter
											}
																		
											#indies_guilder
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_indies_guilder')]"
												parentanchor = vcenter
											}
																		
											#indonesian_rupiah
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_indonesian_rupiah')]"
												parentanchor = vcenter
											}
																		
											#iraqi_dinar
											textbox = {
												position = { 0 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_iraqi_dinar')]"
												parentanchor = vcenter
											}
																		
											#irish_pound
											textbox = {
												position = { 2 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_irish_pound')]"
												parentanchor = vcenter
											}
																		
											#jordanian_dinar
											textbox = {
												position = { -12 0 }
												fontsize = 17
												text = "[Country.GetCustom('currency_symbol_jordanian_dinar')]"
												parentanchor = vcenter
											}
																		
											#korean_won
											textbox = {
												position = { -4 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_korean_won')]"
												parentanchor = vcenter
											}
																		
											#latvian_lats
											textbox = {
												position = { -1 -5 }
												fontsize = 27
												text = "[Country.GetCustom('currency_symbol_latvian_lats')]"
												parentanchor = vcenter
											}
																		
											#leu
											textbox = {
												position = { 9 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_leu')]"
												parentanchor = vcenter
											}
																		
											#lev
											textbox = {
												position = { -5 -10 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_lev')]"
												parentanchor = vcenter
											}
																		
											#liberian_dollar
											textbox = {
												position = { 4 -2 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_liberian_dollar')]"
												parentanchor = vcenter
											}
																		
											#libyan_dinar
											textbox = {
												position = { -4 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_libyan_dinar')]"
												parentanchor = vcenter
											}
																		
											#lira
											textbox = {
												position = { 6 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_lira')]"
												parentanchor = vcenter
											}
																		
											#lithuanian_litas
											textbox = {
												position = { 0 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_lithuanian_litas')]"
												parentanchor = vcenter
											}
																		
											#luxembourgish_franc
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_luxembourgish_franc')]"
												parentanchor = vcenter
											}
																		
											#mark
											textbox = {
												position = { -1 -6 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_mark')]"
												parentanchor = vcenter
											}
																		
											#mexican_peso
											textbox = {
												position = { -1 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_mexican_peso')]"
												parentanchor = vcenter
											}
																		
											#moroccan_dirham
											textbox = {
												position = { -5 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_moroccan_dirham')]"
												parentanchor = vcenter
											}
																		
											#new_zealand_dollar
											textbox = {
												position = { -7 0 }
												fontsize = 20
												text = "[Country.GetCustom('currency_symbol_new_zealand_dollar')]"
												parentanchor = vcenter
											}
																		
											#nicaraguan_cordoba
											textbox = {
												position = { -4 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_nicaraguan_cordoba')]"
												parentanchor = vcenter
											}
																		
											#nigerian_naira
											textbox = {
												position = { 3 -3 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_nigerian_naira')]"
												parentanchor = vcenter
											}
																		
											#norwegian_krone
											textbox = {
												position = { 0 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_norwegian_krone')]"
												parentanchor = vcenter
											}
																		
											#omanian_rial
											textbox = {
												position = { -5 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_omanian_rial')]"
												parentanchor = vcenter
											}
																		
											#ottoman_lira
											textbox = {
												position = { 5 -3 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_ottoman_lira')]"
												parentanchor = vcenter
											}
																		
											#pakistan_rupee
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_pakistan_rupee')]"
												parentanchor = vcenter
											}
																		
											#peseta
											textbox = {
												position = { -3 -5 }
												fontsize = 27
												text = "[Country.GetCustom('currency_symbol_peseta')]"
												parentanchor = vcenter
											}
																		
											#peso
											textbox = {
												position = { 5 -2 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_peso')]"
												parentanchor = vcenter
											}
																		
											#peso_bolivien
											textbox = {
												position = { -5 -2 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_peso_bolivien')]"
												parentanchor = vcenter
											}
																		
											#philippine_peso
											textbox = {
												position = { 3 0 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_philippine_peso')]"
												parentanchor = vcenter
											}
																		
											#pound_sterling
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_pound_sterling')]"
												parentanchor = vcenter
											}
																		
											#prussian_thaler
											textbox = {
												position = { 4 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_prussian_thaler')]"
												parentanchor = vcenter
											}
																		
											#qatari_riyal
											textbox = {
												position = { -5 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_qatari_riyal')]"
												parentanchor = vcenter
											}
																		
											#qiran
											textbox = {
												position = { 5 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_qiran')]"
												parentanchor = vcenter
											}
																		
											#real
											textbox = {
												position = { 0 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_real')]"
												parentanchor = vcenter
											}
																		
											#ruble
											textbox = {
												position = { 10 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_ruble')]"
												parentanchor = vcenter
											}
																		
											#saudi_riyal
											textbox = {
												position = { -4 -4 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_saudi_riyal')]"
												parentanchor = vcenter
											}
																		
											#saxon_thaler
											textbox = {
												position = { -3 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_saxon_thaler')]"
												parentanchor = vcenter
											}
																		
											#scudo_pontificio
											textbox = {
												position = { 6 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_scudo_pontificio')]"
												parentanchor = vcenter
											}
																		
											#scudo_sardo
											textbox = {
												position = { 6 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_scudo_sardo')]"
												parentanchor = vcenter
											}
																		
											#serbian_dinar
											textbox = {
												position = { 0 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_serbian_dinar')]"
												parentanchor = vcenter
											}
																		
											#south_german_gulden
											textbox = {
												position = { 0 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_south_german_gulden')]"
												parentanchor = vcenter
											}
																		
											#singapore_dollar
											textbox = {
												position = { 0 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_singapore_dollar')]"
												parentanchor = vcenter
											}
																		
											#slovak_koruna
											textbox = {
												position = { -5 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_slovak_koruna')]"
												parentanchor = vcenter
											}
																		
											#sol_de_oro
											textbox = {
												position = { 0 -3 }
												fontsize = 27
												text = "[Country.GetCustom('currency_symbol_sol_de_oro')]"
												parentanchor = vcenter
											}
																		
											#south_african_rand
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_south_african_rand')]"
												parentanchor = vcenter
											}
																		
											#swedish_krona
											textbox = {
												position = { 0 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_swedish_krona')]"
												parentanchor = vcenter
											}
																		
											#swiss_franc
											textbox = {
												position = { -10 -3 }
												fontsize = 20
												text = "[Country.GetCustom('currency_symbol_swiss_franc')]"
												parentanchor = vcenter
											}
																		
											#tical
											textbox = {
												position = { 8 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_tical')]"
												parentanchor = vcenter
											}
																		
											#toscane_lira
											textbox = {
												position = { 6 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_toscane_lira')]"
												parentanchor = vcenter
											}
																		
											#tunisian_dinar
											textbox = {
												position = { -6 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_tunisian_dinar')]"
												parentanchor = vcenter
											}
																		
											#tuareg_ouguiya
											textbox = {
												position = { -5 -3 }
												fontsize = 22
												text = "[Country.GetCustom('currency_symbol_tuareg_ouguiya')]"
												parentanchor = vcenter
											}
																		
											#uni
											textbox = {
												position = { 5 -5 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_uni')]"
												parentanchor = vcenter
											}
																		
											#united_states_dollar
											textbox = {
												position = { 5 -2 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_united_states_dollar')]"
												parentanchor = vcenter
											}
																		
											#uruguayan_peso
											textbox = {
												position = { -3 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_uruguayan_peso')]"
												parentanchor = vcenter
											}
																		
											#venezuelan_peso
											textbox = {
												position = { -3 -3 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_venezuelan_peso')]"
												parentanchor = vcenter
											}
																		
											#east_african_eco
											textbox = {
												position = { -3 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_east_african_eco')]"
												parentanchor = vcenter
											}
																		
											#west_african_eco
											textbox = {
												position = { -3 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_west_african_eco')]"
												parentanchor = vcenter
											}
																		
											#yen
											textbox = {
												position = { 5 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_yen')]"
												parentanchor = vcenter
											}
																		
											#yuan
											textbox = {
												position = { 0 0 }
												fontsize = 25
												text = "[Country.GetCustom('currency_symbol_yuan')]"
												parentanchor = vcenter
											}
																		
											#yugoslav_dinar
											textbox = {
												position = { 0 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_yugoslav_dinar')]"
												parentanchor = vcenter
											}
																		
											#zloti
											textbox = {
												position = { 0 -5 }
												fontsize = 30
												text = "[Country.GetCustom('currency_symbol_zloti')]"
												parentanchor = vcenter
											}
									#end_tag_1
										
									}

									textbox = {
										position = { 35 -3 }
										name = capital_value
										text = "[AccessPlayer.PredictWeeklyBalanceWithEconomyHealthHint]"
										align = left|nobaseline
										using = fontsize_large
										autoresize = yes
										parentanchor = vcenter
									}
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThanOrEqualTo_CFixedPoint( GetPlayer.GetCreditRatio, '(CFixedPoint)0' )]"

										bad_progressbar_horizontal = {
											parentanchor = vcenter
											name = "credit_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetCreditRatio)]"
												min = 0
												max = 1
											}
										}
									}
									widget = {
										size = { 60 12 }
										position = { 40 0 }
										parentanchor = bottom
										visible = "[GreaterThan_CFixedPoint( GetPlayer.GetGoldReserveRatio, '(CFixedPoint)0' )]"

										gold_progressbar_horizontal = {
											parentanchor = vcenter
											name = "gold_progressbar"
											size = { 60 6 }
											blockoverride "values" {
												value = "[FixedPointToFloat(GetPlayer.GetGoldReserveRatio )]"
												min = 0
												max = 1
											}
										}
									}
								}
							}

							#####################################################################################################################
							#####################################################################################################################
							#####################################################################################################################
							#####################################################################################################################

						}

						#shows only on hover
						topbar_secondary_icons = {
							visible = "[GetVariableSystem.Exists('more_topbar_info')]"
						}

						#locked
						topbar_secondary_icons = {
							visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"

							blockoverride "animation" {
								position = { 0 44 }
							}
						}
					}
				}
			}

			### LOCK TOGGLE FOR SECONDARY ROW OF ICONS
			button_icon_round_toggle = {
				visible = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
				size = { 24 24 }
				parentanchor = bottom|right
				position = { -3 15 }

				alpha = 0

				state = {
					name = show_topbar_secondary_stats
					delay = 0.15
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide_topbar_secondary_stats
					alpha = 0
					duration = 0
					using = Animation_Curve_Default
				}

				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('more_topbar_info')]"
				}
				blockoverride "view_1" {
					visible = "[GetVariableSystem.Exists('more_topbar_info')]"
				}
				blockoverride "view_2" {
					visible = "[Not(GetVariableSystem.Exists('more_topbar_info'))]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/unlock.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/lock.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "LOCK_TOPBAR"
				}
				blockoverride "tooltip_2" {
					tooltip = "UNLOCK_TOPBAR"
				}
			}

			### FLAG
			fancy_flag = {
				blockoverride "rank_badge_block" {} # Show rank badge seperately from flag with topbar_rank

				observer_mode_overlay = {
					blockoverride "observer_properties" {
						position = { -1 -105 }
					}

					blockoverride "icon_size" {
						size = { 25 25 }
					}

					blockoverride "fontsize" {
						using = fontsize_medium
						maximumsize = { 100 -1 }
					}
				}
			}
		}
	}

	type topbar_rank = button {
		name = "topbar_rank"
		using = hud_visibility
		datacontext = "[GetPlayer]"
		using = clickthrough_blocker
		size = { 57 57 }
		position = { -4 78 }

		onclick = "[MapListPanelManager.ToggleCurrentPanel]"
		onclick = "[SelectMapModeByKey('mm_default')]"

		### RANK
		rank_badge = {
			size = { 57 57 }
		}
		#Panel_1
button_icon_round = {
	name = "Panel_1"
	size = { 33 33 }


	onclick = "[ExecuteConsoleCommand( Select_CString( GetVariableSystem.Exists('my_ef_custom_windows'), 'gui.ClearWidgets ef_custom_windows', 'gui.createwidget gui/ef_custom_windows/ef_custom_windows.gui ef_custom_windows' ) )]"
	onclick = "[GetVariableSystem.Toggle('my_ef_custom_windows')]"

	sing = shimmer
	position = { 0 33 }
	textbox = {
		text = "1"
		align = center|nobaseline
		default_format = "#white #bold"
		autoresize = yes
		fontsize = 25
		allow_outside = no
		ignoreinvisible = yes
		margin_left = 10
	}
}
	}
}
