types right_click_menu_types {
	type right_click_menu_item = button {
		name = "right_click_menu_item"
		align = left|nobaseline
		using = fontsize_large

		block "size" {
			size = { 460 44 }
		}

		block "button" {
			using = default_button
		}

		block "properties" {
			raw_tooltip = "Default Item Tooltip"
			enabled = yes
			#onclick = "[SomeCallback]"
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left  = 10

			block "icon" {
				icon = {
					block "texture" {
						texture = "gfx/interface/population/pop_culture.dds"
					}
					size = { 28 28 }
				}
			}

			textbox = {
				block "text_layoutpolicies" {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
				}

				block "text" {
					raw_text = "#TODO Default Item Text#!"
				}

				align = left|nobaseline
				using = fontsize_large
				fontsize_min = 12
				elide = right
				margin = { 5 0 }
			}

			block "rclick_item_after_label" {}

			block "right_text" {}
		}

		block "margin" {
			margin_left = 15
		}

		block "onclick" {
			onclick = "[RightClickMenuManager.Close]"
		}

		block "sound" {
			using = select_button_sound
		}
	}

	type right_click_menu_expandable_item = flowcontainer {
		direction = vertical

		right_click_menu_item = {
			blockoverride "button" {
				using = expand_button_bg
			}
			blockoverride "margin" {
				margin_left = 30
			}

			container = {
				parentanchor = vcenter

				button = {
					using = expand_arrow
					size = { 25 25 }
					alwaystransparent = yes

					block "expanded_list_expand_visible" {}
				}

				button = {
					using = expand_arrow_expanded
					size = { 25 25 }
					alwaystransparent = yes

					block "expanded_list_collapse_visible" {}
				}
			}

			block "unread_icon_expandable_item" {}

			textbox = {
				block "number_of_items_text" {
					raw_text = "-1"
				}
				autoresize = yes
				parentanchor = right|vcenter
				block "position_number_of_items" {}
				align = nobaseline
				default_format = "#v"
				margin_right = 10
			}

			blockoverride "icon" {}

			blockoverride = "text" {}
		}

		flowcontainer = {
			direction = vertical
			block "expanded_list_properties" {}
			margin_bottom = 15
			margin_left = 20

			item = {
				button = {
					block "button" {
						using = default_button
					}

					textbox = {
						resizeparent = yes
						minimumsize = { 380 34 }
						maximumsize = { 380 -1 }
						margin = { 15 5 }
						margin_right = 25
						autoresize = yes
						fontsize_min = 12
						elide = right
						multiline = yes
						align = nobaseline
						block "list_item_text_properties" {
							raw_text = "Default Item Text"
							raw_tooltip = "Default Item Tooltip"
						}
					}

					block "unread_icon" {}

					block "list_item_properties" {
					}

					block "enabled" {
						enabled = yes
					}

					block "expandable_onclick" {}
					onclick = "[RightClickMenuManager.Close]"
				}
			}
		}
	}

	type right_click_menu = right_click_menu_widget {
		gfxtype = windowgfx
		shaderfile = "gfx/FX/pdxgui_default.shader"
		widgetanchor = top|left
		movable = no
		layer = layer_rightclickmenu

		block "right_click_menu_open_sound" {
			state = {
				name = sound
				trigger_on_create = yes
				start_sound = {
					using = ui_sfx_global_panel_show
				}
			}
		}

		background = {
			using = default_background
		}
		background = {
			using = frame_small
		}

		# hidden button to close the menu
		button = {
			size = { 0 0 }
			onclick = "[RightClickMenuManager.Close]"
			shortcut = "close_window"
			block "right_click_menu_close_sound" {
				using = ui_close
			}
		}

		flowcontainer = {
			direction = vertical
			resizeparent = yes

			block "menu_maximumsize" {
				maximumsize = { -1 800 }
			}

			block "fixed_top" {}

			flowcontainer = {

				block "scrollarea_margins" {
					margin = { 8 15 }
				}

				block "resizeparent_without_fixed_bottom" {
					resizeparent = yes
				}

				scrollarea = {
					scrollbarpolicy_horizontal = always_off
					scrollbar_vertical = {
						using = vertical_scrollbar
					}

					block "scrollarea_maximumsize" {
						maximumsize = { -1 770 }
					}

					block "above_header" {}

					autoresizescrollarea = yes

					scrollwidget = {
						flowcontainer = {
							margin = { 8 0 }
							parentanchor = hcenter
							direction = vertical

							block "header_text" {
								textbox = {
									autoresize = yes
									default_format = "#header"
									align = left|nobaseline
									using = right_click_menu_title_margin_left
									margin_bottom = 2

									block "title_text" {
										raw_text = "Default Title"
									}
								}
							}

							block "list" {
								flowcontainer = {
									using = default_list_position
									spacing = 2

									direction = vertical

									block "items" {
										right_click_menu_item = {}
									}
								}
							}
						}
					}
				}
			}

			block "fixed_bottom" {}
		}
	}

	type right_click_menu_dropdown = flowcontainer {
		direction = vertical

		block "parentanchor" {
			parentanchor = hcenter
		}

		section_header_button = {
			using = default_fade_in_out
			parentanchor = hcenter

			block "section_header_tooltip" {}

			block "section_header_size" {
				size = { 360 44 }
			}

			blockoverride "arrow_position" {
				position = { 2 0 }
				parentanchor = left|vcenter
			}

			blockoverride "left_textbox_margin_left" {
				margin_left = 30
			}

			blockoverride "right_text" {
				block "section_header_right_text" {}
			}
		}

		block "dropdown_items" {
			dynamicgridbox = {
				block "items_visibility" {}

				block "dropdown_datamodel" {
					datamodel = "[DataModelRepeatedItem('(int32)4')]"
				}

				item = {
					flowcontainer = {
						right_click_menu_item = {

							blockoverride "margin" {
								block "item_margin" {
									margin_left = 15
								}
							}

							blockoverride "right_text" {
								block "item_right_textbox" {
									textbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										align = right|nobaseline
										fontsize_min = 12
										elide = right
										margin = { 5 0 }
										margin_right = 10

										block "item_right_text_visibility" {
											visible = no
										}

										block "item_right_text" {
											raw_text = "#todo Right Text#!"
										}
									}
								}
							}
						}
					}
				}
			}

			block "additional_dropdown_items_after_gridbox" {}
		}
	}

	type privately_owned_filter_right_click_menu_item = button {
		size = { 100% 100% }

		block "default_button_template" {
			using = default_button_action
		}

		flowcontainer = {
			parentanchor = vcenter
			position = { 10 0 }

			block "spacing" {
				spacing = 5
			}

			icon = {
				parentanchor = vcenter

				block "icon_size" {
					size = { 35 35 }
				}

				block "icon_texture" {
					texture = "gfx/interface/icons/building_icons/building_browser_filter_icons/filter_icons_all.dds"
				}
			}

			textbox = {
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				max_width = 300
				elide = right
				fontsize_min = 12

				block "text_name" {
					text = "ALL"
				}
			}
		}

		textbox = {
			parentanchor = right|vcenter
			position = { -20 0 }
			align = nobaseline
			autoresize = yes
			max_width = 50
			elide = right
			fontsize_min = 12

			block "text_levels" {
				raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('all')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('all')]"
			}
		}
	}

	type privately_owned_filter_right_click_menu_item_selected = widget {
		size = { 100% 100% }

		background = {
			using = paper_bg
		}

		flowcontainer = {
			parentanchor = vcenter
			position = { 10 0 }

			block "spacing" {
				spacing = 5
			}

			icon = {
				block "icon_size" {
					size = { 35 35 }
				}

				block "icon_texture" {
					texture = "gfx/interface/icons/building_icons/building_browser_filter_icons/filter_icons_all.dds"
				}
			}

			textbox = {
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				max_width = 300
				elide = right
				fontsize_min = 12

				block "text_name" {
					text = "ALL"
				}
			}
		}

		textbox = {
			parentanchor = right|vcenter
			position = { -20 0 }
			align = nobaseline
			autoresize = yes
			max_width = 50
			elide = right
			fontsize_min = 12

			block "text_levels" {
				raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('all')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('all')]"
			}
		}

		icon = {
			using = highlighted_square_selection
		}
	}

	type map_mode_right_click_menu_item = button {
		size = { 100% 100% }
		tooltip = "MAP_MODE_SHOW_TOOLTIP"

		block "default_button_template" {
			using = default_button_action
		}

		state = {
			name = _show
			on_start = "[PdxGuiWidget.FindChild('map_mode_icon').TriggerAnimation('small')]"
		}

		state = {
			name = _hide
			on_start = "[PdxGuiWidget.FindChild('map_mode_icon').TriggerAnimation('large')]"
		}

		flowcontainer = {
			parentanchor = vcenter
			position = { 15 0 }
			spacing = 5

			button_radio = {
				parentanchor = vcenter
				frame = 1
				size = { 25 25 }
				alwaystransparent = yes
			}

			textbox = {
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				max_width = 300
				elide = right
				fontsize_min = 12
				raw_text = "[MapMode.GetName]"
			}
		}

		button = {
			name = "map_mode_icon"
			parentanchor = right|vcenter
			position = { -15 0 }
			size = { 25 25 }
			alwaystransparent = yes
			alpha = 0.7
			texture = "[MapMode.GetIcon]"

			state = {
				name = small
				alpha = 0.7
				duration = 0.1
				using = Animation_Curve_Default

				block "right_icon_size_selected" {
					size = { 25 25 }
				}
			}

			state = {
				name = large
				alpha = 1
				duration = 0.1
				using = Animation_Curve_Default

				block "right_icon_size_selected" {
					size = { 30 30 }
				}
			}
		}
	}

	type map_mode_right_click_menu_item_selected = widget {
		size = { 100% 100% }
		tooltip = "MAP_MODE_SHOW_TOOLTIP_SELECTED"

		background = {
			using = paper_bg
		}

		state = {
			name = _show
			on_start = "[PdxGuiWidget.FindChild('map_mode_icon').TriggerAnimation('large')]"
		}

		state = {
			name = _hide
			on_start = "[PdxGuiWidget.FindChild('map_mode_icon').TriggerAnimation('small')]"
		}

		flowcontainer = {
			parentanchor = vcenter
			position = { 15 0 }
			spacing = 5

			map_modes_fake_static_filled_radiobutton = {
				parentanchor = vcenter

				blockoverride "position" {}
			}

			textbox = {
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				max_width = 300
				elide = right
				fontsize_min = 12
				raw_text = "[MapMode.GetName]"
			}
		}

		widget = {
			parentanchor = right|vcenter
			position = { -15 0 }
			size = { 25 25 }

			icon = {
				size = { 250% 250% }
				parentanchor = center
				using = rotate_glow_animation_02
			}

			button = {
				name = "map_mode_icon"
				parentanchor = center
				alwaystransparent = yes
				size = { 25 25 }
				texture = "[MapMode.GetIcon]"

				state = {
					name = _show
					alpha = 1
					duration = 0.2
					using = Animation_Curve_Default

					block "right_icon_size_selected" {
						size = { 30 30 }
					}
				}

				state = {
					name = large
					alpha = 1
					duration = 0.2
					using = Animation_Curve_Default

					block "right_icon_size_selected" {
						size = { 30 30 }
					}
				}

				state = {
					name = small
					alpha = 0.7
					duration = 0.2
					using = Animation_Curve_Default

					block "right_icon_size_selected" {
						size = { 25 25 }
					}
				}
			}
		}

		icon = {
			using = highlighted_square_selection
		}
	}

	type market_starvation_countries_filter_right_click_menu_item = button {
		size = { 100% 100% }
		onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		block "default_button_template" {
			using = default_button_action
		}

		textbox = {
			position = { 15 0 }
			parentanchor = vcenter
			align = nobaseline
			autoresize = yes
			max_width = 340
			elide = right
			fontsize_min = 12

			block "button_text" {
				text = "[Country.GetName]"
			}
		}
	}

	type market_starvation_countries_filter_right_click_menu_item_selected = widget {
		size = { 100% 100% }
		onmousehierarchyenter = "[AccessHighlightManager.HighlightCountry(Country.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		background = {
			using = paper_bg
		}

		textbox = {
			position = { 15 0 }
			parentanchor = vcenter
			align = nobaseline
			autoresize = yes
			max_width = 340
			elide = right
			fontsize_min = 12

			block "button_text" {
				text = "[Country.GetName]"
			}
		}

		icon = {
			using = highlighted_square_selection
		}
	}

	type market_starvation_states_filter_right_click_menu_item = button {
		size = { 100% 100% }
		onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		block "tooltip" {
			tooltip = "STATE_FOOD_SECURITY_TOOLTIP"
		}

		block "default_button_template" {
			using = default_button_action
		}

		textbox = {
			visible = "[Not(FoodSecurity.HasFamine)]"
			position = { 15 0 }
			parentanchor = vcenter
			align = nobaseline
			autoresize = yes
			max_width = 340
			elide = right
			fontsize_min = 12

			block "button_text" {
				raw_text = "[State.GetCountry.GetFlagTextIcon] [State.GetName]"
			}
		}

		textbox = {
			visible = "[FoodSecurity.HasFamine]"
			position = { 15 0 }
			parentanchor = vcenter
			align = nobaseline
			autoresize = yes
			max_width = 120
			elide = right
			fontsize_min = 12

			block "button_text" {
				raw_text = "[State.GetCountry.GetFlagTextIcon] [State.GetName]"
			}
		}

		flowcontainer = {
			parentanchor = right|vcenter
			position = { -10 0 }
			spacing = 5

			flowcontainer = {
				visible = "[FoodSecurity.HasFamine]"
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/famine_icon.dds"
				}

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					elide = right
					fontsize_min = 12
					min_width = 30
					max_width = 70

					block "starvation_famine_text" {
						raw_text = "[concept_famine]"
					}
				}
			}

			vertical_divider = {
				visible = "[FoodSecurity.HasFamine]"
			}

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/mild_starvation.dds"
				}

				textbox = {
					parentanchor = vcenter
					size = { 50 30 }
					align = nobaseline
					elide = right
					fontsize_min = 12

					block "starvation_mild_text" {
						raw_text = "#v [FoodSecurity.GetPercentageStarvingPopsMild|0%]#!"
					}
				}
			}

			vertical_divider = {}

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/severe_starvation.dds"
				}

				textbox = {
					parentanchor = vcenter
					size = { 50 30 }
					align = nobaseline
					elide = right
					fontsize_min = 12

					block "starvation_severe_text" {
						raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsSevere|0%]#!"
					}
				}
			}
		}
	}

	type market_starvation_states_filter_right_click_menu_item_selected = widget {
		size = { 100% 100% }
		onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

		block "tooltip" {
			tooltip = "STATE_FOOD_SECURITY_TOOLTIP"
		}

		background = {
			using = paper_bg
		}

		textbox = {
			visible = "[Not(FoodSecurity.HasFamine)]"
			position = { 15 0 }
			parentanchor = vcenter
			align = nobaseline
			autoresize = yes
			max_width = 340
			elide = right
			fontsize_min = 12

			block "button_text" {
				raw_text = "[State.GetCountry.GetFlagTextIcon] [State.GetName]"
			}
		}

		textbox = {
			visible = "[FoodSecurity.HasFamine]"
			position = { 15 0 }
			parentanchor = vcenter
			align = nobaseline
			autoresize = yes
			max_width = 120
			elide = right
			fontsize_min = 12

			block "button_text" {
				raw_text = "[State.GetCountry.GetFlagTextIcon] [State.GetName]"
			}
		}

		flowcontainer = {
			parentanchor = right|vcenter
			position = { -10 0 }
			spacing = 5

			flowcontainer = {
				visible = "[FoodSecurity.HasFamine]"
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/famine_icon.dds"
				}

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					elide = right
					fontsize_min = 12
					min_width = 30
					max_width = 70

					block "starvation_famine_text" {
						raw_text = "[concept_famine]"
					}
				}
			}

			vertical_divider = {
				visible = "[FoodSecurity.HasFamine]"
			}

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/mild_starvation.dds"
				}

				textbox = {
					parentanchor = vcenter
					size = { 50 30 }
					align = nobaseline
					elide = right
					fontsize_min = 12

					block "starvation_mild_text" {
						raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsMild|0%]#!"
					}
				}
			}

			vertical_divider = {}

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/famine_icons/severe_starvation.dds"
				}

				textbox = {
					parentanchor = vcenter
					size = { 50 30 }
					align = nobaseline
					elide = right
					fontsize_min = 12

					block "starvation_severe_text" {
						raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsSevere|0%]#!"
					}
				}
			}
		}

		icon = {
			using = highlighted_square_selection
		}
	}

	type military_formation_right_click_item = button {
		size = { 100% 100% }

		block "default_button_template" {
			using = default_button_action
		}

		block "tooltip" {}

		block "onclick" {}

		flowcontainer = {
			parentanchor = vcenter
			position = { 10 0 }
			spacing = 5

			icon = {
				### Remove this visible state when the GetIcon/GetTexture function is in
				visible = "[MilitaryFormation.IsArmy]"
				parentanchor = vcenter
				size = { 65 65 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			### Remove this whole icon when the GetIcon/GetTexture function is in
			icon = {
				visible = "[MilitaryFormation.IsFleet]"
				parentanchor = vcenter
				size = { 65 65 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			flowcontainer = {
				direction = vertical
				spacing = 5
				parentanchor = vcenter

				flowcontainer = {
					minimumsize = { 235 30 }
					spacing = 5

					textbox = {
						minimumsize = { 180 30 }
						maximumsize = { 180 30 }
						parentanchor = vcenter
						align = nobaseline
						elide = right
						autoresize = yes
						text = "[MilitaryFormation.GetName]"
						fontsize_min = 14

						block "name_max_width" {
							max_width = 160
						}
					}

					flowcontainer = {
						spacing = 5
						parentanchor = vcenter

						### NUMBER OF UNITS
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = hcenter|nobaseline
							using = fontsize_large
							text = "MILITARY_FORMATION_TOTAL_NUMBER_OF_UNITS_WITH_ICON"
							max_width = 90
							elide = right
							fontsize_min = 12
						}
					}
				}

				textbox = {
					block "status_visibility" {}
					align = nobaseline
					autoresize = yes
					text = "[MilitaryFormation.GetShortFormationStatusDesc]"
					max_width = 235
					elide = right
					fontsize_min = 14
				}

				textbox = {
					block "mobilization_info_visibliity" {
						visible = no
					}

					align = nobaseline
					autoresize = yes
					text = "INVASION_PLANNER_ARMY_NOT_MOBILIZED"
					max_width = 235
					elide = right
					fontsize_min = 14
				}
			}
		}
	}

	type military_formation_right_click_item_selected = widget {
		size = { 100% 100% }

		block "tooltip" {}

		background = {
			using = paper_bg
		}

		flowcontainer = {
			parentanchor = vcenter
			position = { 10 0 }
			spacing = 5

			icon = {
				visible = "[MilitaryFormation.IsArmy]"
				parentanchor = vcenter
				size = { 65 65 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			icon = {
				visible = "[MilitaryFormation.IsFleet]"
				parentanchor = vcenter
				size = { 65 65 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			flowcontainer = {
				direction = vertical
				spacing = 5
				parentanchor = vcenter

				flowcontainer = {
					minimumsize = { 235 30 }
					spacing = 5

					textbox = {
						minimumsize = { 180 30 }
						maximumsize = { 180 30 }
						parentanchor = vcenter
						align = nobaseline
						autoresize = yes
						text = "[MilitaryFormation.GetName]"
						elide = right
						fontsize_min = 14

						block "name_max_width" {
							max_width = 160
						}
					}

					flowcontainer = {
						spacing = 5
						parentanchor = vcenter

						### NUMBER OF UNITS
						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = hcenter|nobaseline
							using = fontsize_large
							text = "MILITARY_FORMATION_TOTAL_NUMBER_OF_UNITS_WITH_ICON"
							max_width = 90
							elide = right
							fontsize_min = 12
						}
					}
				}

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "[MilitaryFormation.GetShortFormationStatusDesc]"
					max_width = 235
					elide = right
					fontsize_min = 14
				}
			}
		}

		icon = {
			using = highlighted_square_selection
		}
	}
}

right_click_menu = {
	name = "building_right_click_menu"
	datacontext = "[GetMetaPlayer.GetPlayedOrObservedCountry]"

	blockoverride "title_text" {
		text = "BUILDING_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		flowcontainer = {
			visible = "[Not(Building.GetBuildingType.IsMilitaryBuilding)]"
			direction = vertical
			parentanchor = hcenter
			datacontext = "[Building.GetState]"

			### EXPAND BUTTON
			right_click_menu_item = {

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/plus.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_EXPAND"
				}

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					tooltip = "[Building.GetQueueConstructionTooltip]"
					enabled = "[IsValid( Building.QueueConstruction )]"
					visible = "[And(Building.IsExpandable, Building.GetState.GetOwner.IsLocalPlayer)]"
					onclick = "[Execute( Building.QueueConstruction )]"
				}
			}

			### EXPAND BUTTON - FOREIGN INVESTMENT
			right_click_menu_item = {

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And(Building.IsExpandable, Not(Building.GetState.GetOwner.IsLocalPlayer))]"
					enabled = "[IsValid( Building.QueueConstruction )]"
					onclick = "[Execute( Building.QueueConstruction )]"
					tooltip = "[Building.GetQueueConstructionTooltip]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/foreign_invest.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_EXPAND_FOREIGN"
				}
			}

			### TOGGLE AUTO_EXPAND ON
			right_click_menu_item = {

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And(IsPotential( Building.ToggleAutoExpand ), Not(Building.IsAutoExpanding))]"
					tooltip = "[Building.GetAutoExpandTooltip]"
					enabled = "[IsValid( Building.ToggleAutoExpandOn )]"
					onclick = "[Execute( Building.ToggleAutoExpandOn )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/production_methods/auto_expand_not.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_AUTOEXPAND_ON"
				}
			}

			### TOGGLE AUTO_EXPAND OFF
			right_click_menu_item = {

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And(IsPotential( Building.ToggleAutoExpand ), Building.IsAutoExpanding)]"
					tooltip = "[Building.GetAutoExpandTooltip]"
					enabled = "[IsValid( Building.ToggleAutoExpandOff )]"
					onclick = "[Execute( Building.ToggleAutoExpandOff )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/production_methods/auto_expand.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_AUTOEXPAND_OFF"
				}

				icon = {
					using = highlighted_square_selection
				}
			}

			### EXPAND IN OTHER STATES
			right_click_menu_item = {

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And(Building.IsExpandable, IsValid( Building.QueueConstruction ))]"
					onclick = "[Building.GetBuildingType.ActivateExpansionLens]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/plus.dds"
				}

				blockoverride = "text" {
					text = "OPEN_EXPANSION_LENS"
				}
			}

			right_click_menu_item = {

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					tooltip = "[Building.GetCancelConstructionTooltip]"
					visible = "[IsValid( Building.CancelConstruction )]"
					onclick = "[Execute( Building.CancelConstruction )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/minus.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_CANCEL_CONSTRUCTION"
				}
			}

			### DOWNSIZE
			right_click_menu_item = {

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And( And( Building.IsValid, Building.IsDownsizeable ), Not( ShouldAskConfirmation( Building.Downsize ) ) )]"
					tooltip = "[Building.GetDownsizeTooltip]"
					enabled = "[IsValid( Building.Downsize )]"
					onclick = "[Execute( Building.Downsize )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/minus.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_DOWNSIZE"
				}
			}

			### DOWNSIZE WITH CONFIRMATION
			right_click_menu_item = {
				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And( And( Building.IsValid, Building.IsDownsizeable ), ShouldAskConfirmation( Building.Downsize ) )]"
					tooltip = "[Building.GetDownsizeTooltip]"
					enabled = "[IsValid( Building.Downsize )]"
					onclick = "[PopupManager.AskConfirmation( Building.Downsize )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/buttons/button_icons/minus.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_DOWNSIZE"
				}
			}
		}

		### TOGGLE SUBSIDIZE ON
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				visible = "[And(IsValid( Building.ToggleSubsidies ), Not(Building.IsSubsidized))]"
				tooltip = "[Building.GetSubsidizeTooltip]"
				enabled = "[IsValid( Building.ToggleSubsidiesOn )]"
				onclick = "[Execute( Building.ToggleSubsidiesOn )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/subsidized_not.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_RIGHT_CLICK_MENU_SUBSIDIZE_ON"
			}
		}

		### TOGGLE SUBSIDIZE OFF
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				visible = "[And(IsValid( Building.ToggleSubsidies ), Building.IsSubsidized)]"
				tooltip = "[Building.GetSubsidizeTooltip]"
				enabled = "[IsValid( Building.ToggleSubsidiesOff )]"
				onclick = "[Execute( Building.ToggleSubsidiesOff )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/subsidized.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_RIGHT_CLICK_MENU_SUBSIDIZE_OFF"
			}

			icon = {
				using = highlighted_square_selection
			}
		}

		# RESET PRODUCTION METHODS
		right_click_menu_item = {
			visible = "[Building.GetState.GetCountry.IsLocalPlayer]"

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				onclick = "[Execute( Building.ResetProductionMethodsToStandard )]"
				enabled = "[IsValid( Building.ResetProductionMethodsToStandard )]"
				tooltip = "[Building.GetResetProductionMethodsToStandardTooltip]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/reset_production_methods_lens_option.dds"
			}

			blockoverride = "text" {
				text = "RESET_PM_BUILDING"
			}
		}

		right_click_menu_item = {
			visible = "[Building.GetState.GetCountry.IsLocalPlayer]"

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				onclick = "[Execute( Building.GetBuildingType.ResetProductionMethodsToStandard )]"
				enabled = "[IsValid( Building.GetBuildingType.ResetProductionMethodsToStandard )]"
				tooltip = "[Building.GetBuildingType.GetResetProductionMethodsToStandardTooltip]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/reset_production_methods_lens_option.dds"
			}

			blockoverride = "text" {
				text = "RESET_PM_BUILDING_TYPE"
			}
		}

		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
					enabled = "[IsValid( Building.NationalizeBuildingLevels( '(int32)1' ) )]"
					onclick = "[PopupManager.ShowNationalizeBuildingWindow(Building.Self)]"
					tooltip = "BUILDING_NATIONALIZE_TOOLTIP"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/nationalize.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_NATIONALIZE"
			}
		}

		### TOGGLE PRIVITZATION ON
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				enabled = "[IsValid( Building.TogglePrivatization)]"
				onclick = "[Execute( Building.TogglePrivatization)]"
				tooltip = "[Building.GetTogglePrivatizationTooltip]"
				visible = "[Building.CanBePrivatized]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/privatize.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_DISABLE_PRIVATIZATION"
			}

			icon = {
				using = highlighted_square_selection
			}
		}

		### TOGGLE PRIVITZATION OFF
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				enabled = "[IsValid( Building.TogglePrivatization)]"
				onclick = "[Execute( Building.TogglePrivatization)]"
				tooltip = "[Building.GetTogglePrivatizationTooltip]"
				visible = "[Not(Building.CanBePrivatized)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/privatize_not.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_ENABLE_PRIVATIZATION"
			}
		}

		right_click_menu_item = {
			visible = "[Building.IsValid]"

			blockoverride "properties" {
				onclick = "[Building.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[Building.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(Building.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}

			blockoverride = "text" {
				text = "BUILDING_PIN_IN_OUTLINER"
			}
		}
	}
}

right_click_menu = {
	name = "building_actions_right_click_menu"
	datacontext = "[GetMetaPlayer.GetPlayedOrObservedCountry]"
	datacontext = "[Building.GetState]"
	parentanchor = right

	blockoverride "title_text" {
		text = "BUILDING_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		flowcontainer = {
			visible = "[Not(Building.GetBuildingType.IsMilitaryBuilding)]"
			direction = vertical
			parentanchor = hcenter

			### TOGGLE AUTO_EXPAND ON
			right_click_menu_item = {

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And(IsPotential( Building.ToggleAutoExpand ), Not(Building.IsAutoExpanding))]"
					tooltip = "[Building.GetAutoExpandTooltip]"
					enabled = "[IsValid( Building.ToggleAutoExpandOn )]"
					onclick = "[Execute( Building.ToggleAutoExpandOn )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/production_methods/auto_expand_not.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_AUTOEXPAND_ON"
				}
			}

			### TOGGLE AUTO_EXPAND OFF
			right_click_menu_item = {

				blockoverride "margin" {
					margin_left = 45
				}

				blockoverride "properties" {
					visible = "[And(IsPotential( Building.ToggleAutoExpand ), Building.IsAutoExpanding)]"
					tooltip = "[Building.GetAutoExpandTooltip]"
					enabled = "[IsValid( Building.ToggleAutoExpandOff )]"
					onclick = "[Execute( Building.ToggleAutoExpandOff )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/production_methods/auto_expand.dds"
				}

				blockoverride = "text" {
					text = "BUILDING_RIGHT_CLICK_MENU_AUTOEXPAND_OFF"
				}

				icon = {
					using = highlighted_square_selection
				}
			}
		}

		### TOGGLE SUBSIDIZE ON
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				visible = "[And(IsValid( Building.ToggleSubsidies ), Not(Building.IsSubsidized))]"
				tooltip = "[Building.GetSubsidizeTooltip]"
				enabled = "[IsValid( Building.ToggleSubsidiesOn )]"
				onclick = "[Execute( Building.ToggleSubsidiesOn )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/subsidized_not.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_RIGHT_CLICK_MENU_SUBSIDIZE_ON"
			}
		}

		### TOGGLE SUBSIDIZE OFF
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				visible = "[And(IsValid( Building.ToggleSubsidies ), Building.IsSubsidized)]"
				tooltip = "[Building.GetSubsidizeTooltip]"
				enabled = "[IsValid( Building.ToggleSubsidiesOff )]"
				onclick = "[Execute( Building.ToggleSubsidiesOff )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/subsidized.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_RIGHT_CLICK_MENU_SUBSIDIZE_OFF"
			}

			icon = {
				using = highlighted_square_selection
			}
		}

		# RESET PRODUCTION METHODS
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				onclick = "[Execute( Building.ResetProductionMethodsToStandard )]"
				enabled = "[IsValid( Building.ResetProductionMethodsToStandard )]"
				tooltip = "[Building.GetResetProductionMethodsToStandardTooltip]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/reset_production_methods_lens_option.dds"
			}

			blockoverride = "text" {
				text = "RESET_PM_BUILDING"
			}
		}

		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				onclick = "[Execute( Building.GetBuildingType.ResetProductionMethodsToStandard )]"
				enabled = "[IsValid( Building.GetBuildingType.ResetProductionMethodsToStandard )]"
				tooltip = "[Building.GetBuildingType.GetResetProductionMethodsToStandardTooltip]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/reset_production_methods_lens_option.dds"
			}

			blockoverride = "text" {
				text = "RESET_PM_BUILDING_TYPE"
			}
		}

		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
					enabled = "[IsValid( Building.NationalizeBuildingLevels( '(int32)1' ) )]"
					onclick = "[PopupManager.ShowNationalizeBuildingWindow(Building.Self)]"
					tooltip = "BUILDING_NATIONALIZE_TOOLTIP"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/nationalize.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_NATIONALIZE"
			}
		}

		### TOGGLE PRIVITZATION ON
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				enabled = "[IsValid( Building.TogglePrivatization)]"
				onclick = "[Execute( Building.TogglePrivatization)]"
				tooltip = "[Building.GetTogglePrivatizationTooltip]"
				visible = "[Building.CanBePrivatized]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/privatize.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_DISABLE_PRIVATIZATION"
			}

			icon = {
				using = highlighted_square_selection
			}
		}

		### TOGGLE PRIVITZATION OFF
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}

			blockoverride "properties" {
				enabled = "[IsValid( Building.TogglePrivatization)]"
				onclick = "[Execute( Building.TogglePrivatization)]"
				tooltip = "[Building.GetTogglePrivatizationTooltip]"
				visible = "[Not(Building.CanBePrivatized)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/production_methods/privatize_not.dds"
			}

			blockoverride = "text" {
				text = "BUILDING_ENABLE_PRIVATIZATION"
			}
		}

		right_click_menu_item = {
			visible = "[Building.IsValid]"

			blockoverride "properties" {
				onclick = "[Building.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[Building.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(Building.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}

			blockoverride = "text" {
				text = "BUILDING_PIN_IN_OUTLINER"
			}
		}
	}
}

right_click_menu = {
	name = "building_type_right_click_menu"
	datacontext = "[GetMetaPlayer.GetPlayedOrObservedCountry]"

	blockoverride "title_text" {
		text = "[BuildingType.GetName]"
	}
	blockoverride "items" {
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				visible = "[And(BuildingType.IsExpandable, Not(BuildingType.IsMilitaryBuilding))]"
				onclick = "[BuildingType.ActivateExpansionLens]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/plus.dds"
			}

			blockoverride = "text" {
				text = "OPEN_EXPANSION_LENS"
			}
		}

		# RESET PRODUCTION METHODS
		right_click_menu_item = {

			blockoverride "margin" {
				margin_left = 45
			}
			blockoverride "properties" {
				onclick = "[Execute( BuildingType.ResetProductionMethodsToStandard )]"
				enabled = "[IsValid( BuildingType.ResetProductionMethodsToStandard )]"
				tooltip = "[BuildingType.GetResetProductionMethodsToStandardTooltip]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/reset_production_methods_lens_option.dds"
			}

			blockoverride = "text" {
				text = "RESET_PM_BUILDING_TYPE"
			}
		}
	}
}

right_click_menu = {
	name = "ig_right_click_menu"

	blockoverride "title_text" {
		text = "IG_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			visible = "[InterestGroup.GetCountry.IsLocalPlayer]"

			blockoverride "properties" {
				onclick = "[InterestGroup.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[InterestGroup.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(InterestGroup.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}

			blockoverride = "text" {
				text = "IG_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}
		}
	}
}

right_click_menu = {
	name = "decree_right_click_menu"

	blockoverride "title_text" {
		text = "DECREE_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "DECREE_REMOVE"
				enabled = "[IsValid( Decree.GetRemoveCommand )]"
				onclick = "[Execute( Decree.GetRemoveCommand )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/close.dds"
			}

			blockoverride = "text" {
				text = "DECREE_RIGHT_CLICK_MENU_REMOVE"
			}
		}
	}
}

right_click_menu = {
	name = "set_default_combat_unit_right_click_menu"

	blockoverride "title_text" {
		text = "SET_DEFAULT_UNIT_TYPE_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[MilitaryFormation.GetEligibleTypesByGroup( CombatUnitGroup.Self )]"

			item = {
				flowcontainer = {
					default_unit_right_click_item = {
						visible = "[Not(ObjectsEqual(CombatUnitType.Self, MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.Self).Self))]"
					}

					default_unit_right_click_item_selected = {
						visible = "[ObjectsEqual(CombatUnitType.Self, MilitaryFormation.GetSelectedUnitTypeForGroup(CombatUnitGroup.Self).Self)]"
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "military_formation_right_click_menu"
	widgetanchor = right

	blockoverride "title_text" {
		text = "[MilitaryFormation.GetName]"
	}

	blockoverride "header_text" {
		flowcontainer = {
			margin_bottom = 2

			icon = {
				parentanchor = vcenter
				size = { 32 32 }
				texture = "[MilitaryFormation.GetFlag]"
				color = "[MilitaryFormation.GetFlagColor]"
			}

			textbox = {
				parentanchor = vcenter
				autoresize = yes
				default_format = "#header"
				align = nobaseline
				using = right_click_menu_title_margin_left
				text = "[MilitaryFormation.GetName]"
			}
		}
	}

	blockoverride "items" {
		right_click_menu_item = {		# GO TO PANEL
			visible = "[Not(InformationPanelBar.IsPanelOpen('military_formation'))]"

			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenMilitaryFormationPanel(MilitaryFormation.Self)]"
				tooltip = "GO_TO_BUTTON_MILITARY_FORMATION"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}

			blockoverride = "text" {
				text = "CHARACTER_RIGHT_CLICK_MENU_INFORMATION"
			}

			blockoverride "size" {
				size = { 260 44 }
			}
		}

		right_click_menu_item = {		# EDIT NAME AND EMBLEM
			visible = "[MilitaryFormation.GetCountry.IsLocalPlayer]"
			blockoverride "properties" {
				onclick = "[PopupManager.ShowMilitaryFormationChangeName(MilitaryFormation.Self)]"
				tooltip = "CUSTOMIZE_NAME_AND_EMBLEM"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/edit.dds"
			}

			blockoverride = "text" {
				text = "CUSTOMIZE"
			}

			blockoverride "size" {
				size = { 260 44 }
			}
		}

		right_click_menu_item = {
			visible = "[MilitaryFormation.GetCountry.IsLocalPlayer]"
			blockoverride "properties" {
				onclick = "[MilitaryFormation.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[MilitaryFormation.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(MilitaryFormation.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}

			blockoverride "text" {
				text = "MILITARY_FORMATION_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}

			blockoverride "size" {
				size = { 260 44 }
			}
		}

		flowcontainer = {
			visible = "[MilitaryFormation.GetCountry.IsPlayer]"
			spacing = 2
			direction = vertical

			right_click_menu_item = {		# MOBILIZE
				visible = "[And(MilitaryFormation.IsArmy, Not(MilitaryFormation.IsMobilized))]"

				blockoverride "properties" {
					onclick = "[Execute( MilitaryFormation.Mobilize )]"
					tooltip = "MOBILIZE_ARMY_TOOLTIP"
					enabled = "[IsValid( MilitaryFormation.Mobilize )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/mobilize_icon_single.dds"
				}

				blockoverride = "text" {
					text = "MOBILIZE_ARMY"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# DEMOBILIZE
				visible = "[And(MilitaryFormation.IsArmy, MilitaryFormation.IsMobilized)]"

				blockoverride "properties" {
					enabled = "[IsValid( MilitaryFormation.Demobilize )]"
					onclick = "[PopupManager.AskConfirmation( MilitaryFormation.Demobilize )]"
					tooltip = "DEMOBILIZE_ARMY_TOOLTIP"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/mobilize_icon_single.dds"
				}

				blockoverride = "text" {
					text = "DEMOBILIZE_ARMY"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# RAISE CONSCRIPTS
				visible = "[MilitaryFormation.IsArmy]"

				blockoverride "properties" {
					enabled = "[IsValid( MilitaryFormation.RaiseConscripts )]"
					onclick = "[Execute( MilitaryFormation.RaiseConscripts )]"
					tooltip = "RAISE_ALL_CONSCRIPTS_TOOLTIP"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/lens_toolbar_icons/activate_conscription_centers_lens_option.dds"
				}

				blockoverride = "text" {
					text = "RAISE_ALL_CONSCRIPTS"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# DEPLOY TO FRONT
				visible = "[MilitaryFormation.IsArmy]"

				blockoverride "properties" {
					tooltip = "DEPLOY_MILITARY_FORMATION_TO_FRONT_TOOLTIP"
					onclick = "[MilitaryFormation.OnDeployToFrontClicked]"
					enabled = "[MilitaryFormation.IsMobilized]"
				}

				blockoverride "texture" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/commander_order_icons/move.dds"
				}

				blockoverride = "text" {
					text = "DEPLOY_MILITARY_FORMATION_TO_FRONT_TEXT"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# DEPLOY TO SEA NODE
				visible = "[MilitaryFormation.IsFleet]"

				blockoverride "properties" {
					tooltip = "DEPLOY_MILITARY_FORMATION_TO_SEA_NODE_TOOLTIP"
                    enabled = "[MilitaryFormation.CanDeployToSeaNode]"
					onclick = "[MilitaryFormation.OnDeployToSeaNodeClicked]"
				}

				blockoverride "texture" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/generic_icons/sea_region_mm_battle.dds"
				}

				blockoverride = "text" {
					text = "DEPLOY_MILITARY_FORMATION_TO_SEA_NODE_LABEL"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# STATION

				blockoverride "properties" {
					tooltip = "STATION_MILITARY_FORMATION_TOOLTIP"
                    enabled = "[MilitaryFormation.CanStation]"
					onclick = "[MilitaryFormation.OnStationClicked]"
				}

				blockoverride "texture" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/alert_icons/has_army_in_reserve.dds"
				}

				blockoverride = "text" {
					text = "STATION_MILITARY_FORMATION_LABEL"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# INVASION

				blockoverride "properties" {
					tooltip = "MILITARY_FORMATION_INVASION_TOOLTIP"
					onclick = "[MilitaryFormation.OnInvasionClicked]"
					enabled = "[MilitaryFormation.CanInvade]"
				}

				blockoverride "texture" {
					### PLACEHOLDER ICON
					texture = "gfx/interface/icons/formation_order_icons/naval_invasion.dds"
				}

				blockoverride = "text" {
					text = "MILITARY_FORMATION_INVADE_LABEL"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			### SET STRATEGIC OBJECTIVE
			right_click_menu_item = {
				visible = "[MilitaryFormation.IsArmy]"

				blockoverride "properties" {
					tooltip = "MILITARY_FORMATION_SET_STRATEGIC_OBJECTIVE_TOOLTIP"
					onclick = "[MilitaryFormation.OnSetStrategicObjectiveClicked]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/formation_order_icons/strategic_objective.dds"
				}

				blockoverride "text" {
					text = "MILITARY_FORMATION_SET_STRATEGIC_OBJECTIVE"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# TRANSFER UNITS

				blockoverride "properties" {
					tooltip = "MILITARY_FORMATION_TRANSFER_UNIT_TOOLTIP"
					onclick = "[PopupManager.ShowTransferFormation( MilitaryFormation.AccessSelf )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/formation_order_icons/transfer.dds"
				}

				blockoverride = "text" {
					text = "TRANSFER_POPUP_HEADER"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}

			right_click_menu_item = {		# Disband Formation

				blockoverride "properties" {
					tooltip = "MILITARY_FORMATION_DISBAND_TOOLTIP"
					onclick = "[PopupManager.AskConfirmation( MilitaryFormation.Disband )]"
					enabled = "[IsValid( MilitaryFormation.Disband )]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/military_icons/disband_formation.dds"
				}

				blockoverride = "text" {
					text = "MILITARY_FORMATION_DISBAND"
				}

				blockoverride "size" {
					size = { 260 44 }
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_any_source"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "ARMIES"
					margin_left = 10
				}

				new_army_button = {
					datacontext = "[TransferFormationPopup.GetLeftStagedFormation]"

					blockoverride "deselect_selected_formation_if_there_is_one" {
						onclick = "[TransferFormationPopup.DeselectLeftFormation]"
					}
				}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_ARMY"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedLeftFormation( MilitaryFormation.AccessSelf )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}

			flowcontainer = {
				direction = vertical

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "FLEETS"
					margin_left = 10
				}

				new_fleet_button = {
					datacontext = "[TransferFormationPopup.GetLeftStagedFormation]"

					blockoverride "deselect_selected_formation_if_there_is_one" {
						onclick = "[TransferFormationPopup.DeselectLeftFormation]"
					}
				}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_FLEET"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedLeftFormation( MilitaryFormation.AccessSelf )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_army_source"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "ARMIES"
					margin_left = 10
				}

				new_army_button = {
					datacontext = "[TransferFormationPopup.GetLeftStagedFormation]"

					blockoverride "deselect_selected_formation_if_there_is_one" {
						onclick = "[TransferFormationPopup.DeselectLeftFormation]"
					}
				}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_ARMY"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedLeftFormation( MilitaryFormation.AccessSelf )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_fleet_source"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "FLEETS"
					margin_left = 10
				}

				new_fleet_button = {
					datacontext = "[TransferFormationPopup.GetLeftStagedFormation]"

					blockoverride "deselect_selected_formation_if_there_is_one" {
						onclick = "[TransferFormationPopup.DeselectLeftFormation]"
					}
				}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_FLEET"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedLeftFormation( MilitaryFormation.AccessSelf )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_any_target"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical
				datacontext = "[TransferFormationPopup.GetRightStagedFormation]"

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "ARMIES"
					margin_left = 10
				}

				new_army_button = {}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_ARMY"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedRightFormation( MilitaryFormation.AccessSelf )]"
									onclick = "[GetVariableSystem.Clear( 'transfer_formation_new_formation' )]"
									onclick = "[GetVariableSystem.Clear( Concatenate( StagedFormation.GetIDString, '_new_formation') )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}

			flowcontainer = {
				direction = vertical
				datacontext = "[TransferFormationPopup.GetRightStagedFormation]"

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "FLEETS"
					margin_left = 10
				}

				new_fleet_button = {}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_FLEET"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedRightFormation( MilitaryFormation.AccessSelf )]"
									onclick = "[GetVariableSystem.Clear( 'transfer_formation_new_formation' )]"
									onclick = "[GetVariableSystem.Clear( Concatenate( StagedFormation.GetIDString, '_new_formation') )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_army_target"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical
				datacontext = "[TransferFormationPopup.GetRightStagedFormation]"

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "ARMIES"
					margin_left = 10
				}

				new_army_button = {}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_ARMY"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedRightFormation( MilitaryFormation.AccessSelf )]"
									onclick = "[GetVariableSystem.Clear( 'transfer_formation_new_formation' )]"
									onclick = "[GetVariableSystem.Clear( Concatenate( StagedFormation.GetIDString, '_new_formation') )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "company_charter_option_items_right_click_menu"
	parentanchor = right|bottom
	widgetanchor = bottom

	blockoverride "header_text" {
	}

	blockoverride "items" {
		flowcontainer = {
			visible = "[Not(IsDataModelEmpty(Company.GetActiveCharters(CompanyCharterType.Self)))]"
			direction = vertical

			textbox = {
				visible = "[CompanyCharterType.IsMonopolyCharter]"
				autoresize = yes
				default_format = "#header"
				align = nobaseline
				margin_left = 10
				margin_bottom = 2
				text = "COMPANY_CHARTER_ACTIVE_MONOPOLYS"
			}

			textbox = {
				visible = "[CompanyCharterType.IsIndustryCharter]"
				autoresize = yes
				default_format = "#header"
				align = nobaseline
				margin_left = 10
				margin_bottom = 2
				text = "COMPANY_CHARTER_ACTIVE_ADDITIONAL_INDUSTRIES"
			}

			textbox = {
				visible = "[CompanyCharterType.IsColonizationCharter]"
				autoresize = yes
				default_format = "#header"
				align = nobaseline
				margin_left = 10
				margin_bottom = 2
				text = "COMPANY_CHARTER_ACTIVE_COLONIES"
			}
		}

		flowcontainer = {
			using = default_list_position
			direction = vertical
			spacing = 2
			margin_bottom = 10
			datamodel = "[Company.GetActiveCharters(CompanyCharterType.Self)]"

			item = {
				container = {
					active_charter_right_click_item = {
						visible = "[CompanyCharterType.IsMonopolyCharter]"
						datacontext = "[CompanyCharter.GetBuildingType]"

						blockoverride "texture" {
							texture = "[BuildingType.GetIcon]"
						}

						blockoverride "text" {
							text = "[BuildingType.GetNameNoFormatting]"
						}

						blockoverride "remove_button_properties" {
							tooltip = "REMOVE_COMPANY_CHARTER_MONOPOLY"
							enabled = "[IsValid( Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self) )]"
							onclick = "[Execute( Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self) )]"
						}
					}

					active_charter_right_click_item = {
						visible = "[CompanyCharterType.IsIndustryCharter]"
						datacontext = "[CompanyCharter.GetBuildingType]"

						blockoverride "texture" {
							texture = "[BuildingType.GetIcon]"
						}

						blockoverride "text" {
							text = "[BuildingType.GetNameNoFormatting]"
						}

						blockoverride "remove_button_properties" {
							tooltip = "REMOVE_COMPANY_CHARTER_ADDITIONAL_INDUSTRY"
							enabled = "[IsValid( Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self) )]"
							onclick = "[Execute( Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self) )]"
						}
					}

					active_charter_right_click_item = {
						visible = "[CompanyCharterType.IsColonizationCharter]"
						datacontext = "[CompanyCharter.GetStateRegion]"

						blockoverride "text" {
							text = "[StateRegion.GetNameNoFormatting]"
						}

						blockoverride "remove_button_properties" {
							tooltip = "REMOVE_COMPANY_CHARTER_COLONY"
							enabled = "[IsValid( Company.ToggleRegionCharter(CompanyCharterType.Self, StateRegion.Self) )]"
							onclick = "[PopupManager.AskConfirmationWithSound(Company.ToggleRegionCharter(CompanyCharterType.Self, StateRegion.Self), 'event:/SFX/UI/CompanyCharters/company_charter_revoke')]"
						}
					}
				}
			}
		}

		textbox = {
			visible = "[CompanyCharterType.IsMonopolyCharter]"
			autoresize = yes
			default_format = "#header"
			align = nobaseline
			margin_left = 10
			margin_bottom = 2
			text = "COMPANY_CHARTER_SELECT_BUILDING_TYPE_TO_MONPOLIZE"
		}

		textbox = {
			visible = "[CompanyCharterType.IsIndustryCharter]"
			autoresize = yes
			default_format = "#header"
			align = nobaseline
			margin_left = 10
			margin_bottom = 2
			text = "COMPANY_CHARTER_SELECT_BUILDING_TYPE_ADDITIONAL_INDUSTRY"
		}

		textbox = {
			visible = "[CompanyCharterType.IsColonizationCharter]"
			autoresize = yes
			default_format = "#header"
			align = nobaseline
			margin_left = 10
			margin_bottom = 2
			text = "COMPANY_CHARTER_SELECT_STATE_TO_COLONIZE"
		}

		flowcontainer = {
			visible = "[CompanyCharterType.IsMonopolyCharter]"
			direction = vertical

			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(CompanyCharterType.GetPotentialBuildings(Company.Self)))]"
				direction = vertical
				datamodel = "[CompanyCharterType.GetPotentialBuildings(Company.Self)]"

				item = {
					container = {
						right_click_menu_item = {
							using = company_charter_grant_sound

							blockoverride "button" {
								using = default_button_action
							}

							tooltipwidget = {
								FancyTooltip_BuildingType = {
									blockoverride "tooltip_content_before" {
										custom_tooltip_textbox = {
											visible = "[StringIsEmpty(GetDesc(Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self)))]"
											text = "GRANT_MONOPOLY_CHARTER_TOOLTIP"
										}

										custom_tooltip_textbox_with_empty_line = {
											visible = "[StringIsEmpty(GetDesc(Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self)))]"
											text = "COMPANY_CHARTER_AUTHORITY_COST"
										}

										custom_tooltip_textbox_with_empty_line = {
											datacontext = "[Company.GetCountry]"
											text = "USING_X_FREE_CHARTERS"
										}

										custom_tooltip_textbox_with_empty_line = {
											visible = "[Not(StringIsEmpty(GetDesc(Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self))))]"
											text = "[GetDesc(Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self))]"
										}
									}
								}
							}

							blockoverride "margin" {
								margin_left = 45
							}

							blockoverride "properties" {
								enabled = "[IsValid( Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self) )]"
								onclick = "[PopupManager.AskConfirmationWithSound( Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self), 'event:/SFX/UI/CompanyCharters/company_charter_grant' )]"
							}

							blockoverride "onclick" {} #Prevents the menu from closing when clicked

							blockoverride "texture" {
								texture = "[BuildingType.GetIcon]"
							}

							blockoverride = "text" {
								text = "[BuildingType.GetNameNoFormatting]"
							}

							blockoverride "right_text" {
								textbox = {
									align = nobaseline
									autoresize = yes
									margin_right = 15
									elide = right
									fontsize_min = 14
									max_width = 80
									raw_text = "@aut! #v [CompanyCharterType.GetAuthorityCost(Company.Self)|-0]#!"
								}
							}
						}
					}
				}
			}

			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(CompanyCharterType.GetPotentialBuildings(Company.Self))]"
				}

				blockoverride "text" {
					text = "NO_AVAILABLE_INDUSTRIES"
				}

				blockoverride "size" {
					minimumsize = { 460 -1 }
					maximumsize = { 460 -1 }
				}
			}
		}

		flowcontainer = {
			visible = "[CompanyCharterType.IsIndustryCharter]"
			direction = vertical

			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(CompanyCharterType.GetPotentialBuildings(Company.Self)))]"
				direction = vertical
				datamodel = "[CompanyCharterType.GetPotentialBuildings(Company.Self)]"

				item = {
					container = {
						right_click_menu_item = {
							using = company_charter_grant_sound

							blockoverride "button" {
								using = default_button_action
							}

							tooltipwidget = {
								FancyTooltip_BuildingType = {
									blockoverride "tooltip_content_before" {
										custom_tooltip_textbox = {
											visible = "[StringIsEmpty(GetDesc(Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self)))]"
											text = "GRANT_ADDITIONAL_INDUSTRY_CHARTER_TOOLTIP"
										}

										custom_tooltip_textbox_with_empty_line = {
											visible = "[StringIsEmpty(GetDesc(Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self)))]"
											text = "COMPANY_CHARTER_AUTHORITY_COST"
										}

										custom_tooltip_textbox_with_empty_line = {
											visible = "[Not(StringIsEmpty(GetDesc(Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self))))]"
											text = "[GetDesc(Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self))]"
										}

										custom_tooltip_textbox_with_empty_line = {
											datacontext = "[Company.GetCountry]"
											text = "USING_X_FREE_CHARTERS"
										}
									}
								}
							}

							blockoverride "margin" {
								margin_left = 45
							}

							blockoverride "properties" {
								enabled = "[IsValid( Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self) )]"
								onclick = "[Execute( Company.ToggleBuildingCharter(CompanyCharterType.Self, BuildingType.Self) )]"
							}

							blockoverride "onclick" {} #Prevents the menu from closing when clicked

							blockoverride "texture" {
								texture = "[BuildingType.GetIcon]"
							}

							blockoverride = "text" {
								text = "[BuildingType.GetNameNoFormatting]"
							}

							blockoverride "right_text" {
								textbox = {
									align = nobaseline
									autoresize = yes
									margin_right = 15
									elide = right
									fontsize_min = 14
									max_width = 80
									raw_text = "@aut! #v [CompanyCharterType.GetAuthorityCost(Company.Self)|-0]#!"
								}
							}
						}
					}
				}
			}

			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(CompanyCharterType.GetPotentialBuildings(Company.Self))]"
				}

				blockoverride "text" {
					text = "NO_AVAILABLE_INDUSTRIES"
				}

				blockoverride "size" {
					minimumsize = { 460 -1 }
					maximumsize = { 460 -1 }
				}
			}
		}

		flowcontainer = {
			visible = "[CompanyCharterType.IsColonizationCharter]"
			direction = vertical

			flowcontainer = {
				visible = "[Not(IsDataModelEmpty(CompanyCharterType.GetPotentialRegions(Company.Self)))]"
				direction = vertical
				datamodel = "[CompanyCharterType.GetPotentialRegions(Company.Self)]"

				item = {
					container = {
						right_click_menu_item = {
							using = company_charter_grant_sound

							blockoverride "button" {
								using = default_button_action
							}

							tooltipwidget = {
								FancyTooltip_StateRegion = {
									blockoverride "tooltip_content_before" {
										custom_tooltip_textbox = {
											visible = "[StringIsEmpty(GetDesc(Company.ToggleRegionCharter(CompanyCharterType.Self, StateRegion.Self)))]"
											text = "GRANT_COLONY_CHARTER_TOOLTIP"
										}

										custom_tooltip_textbox_with_empty_line = {
											visible = "[IsValid(Company.ToggleRegionCharter(CompanyCharterType.Self, StateRegion.Self))]"
											text = "COMPANY_CHARTER_AUTHORITY_COST"
										}

										custom_tooltip_textbox_with_empty_line = {
											datacontext = "[Company.GetCountry]"
											text = "USING_X_FREE_CHARTERS"
										}

										custom_tooltip_textbox_with_empty_line = {
											visible = "[Not(StringIsEmpty(GetDesc(Company.ToggleRegionCharter(CompanyCharterType.Self, StateRegion.Self))))]"
											text = "[GetDesc(Company.ToggleRegionCharter(CompanyCharterType.Self, StateRegion.Self))]"
										}
									}

									blockoverride "tooltip_content_after" {

										custom_tooltip_newline = {}

										custom_tooltip_textbox = {
											text = "RIGHT_CLICK_TO_ZOOM_TO_STATE_REGION"
										}
									}
								}
							}

							blockoverride "margin" {
								margin_left = 45
							}

							blockoverride "properties" {
								enabled = "[IsValid( Company.ToggleRegionCharter(CompanyCharterType.Self, StateRegion.Self) )]"
								onclick = "[PopupManager.ExecuteOrAskConfirmationIfNeeded( Company.ToggleRegionCharter(CompanyCharterType.Self, StateRegion.Self) )]"
								onrightclick = "[StateRegion.GetLargestStateInRegion.ZoomToCapital]"
								onmousehierarchyenter = "[SetCanOpenRightClickContextMenu( '(bool)no' )]"
								onmousehierarchyenter = "[AccessHighlightManager.HighlightStateRegion(StateRegion.Self)]"
								onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
								onmousehierarchyleave = "[SetCanOpenRightClickContextMenu( '(bool)yes' )]"
							}

							blockoverride "onclick" {} #Prevents the menu from closing when clicked

							blockoverride "icon" {}

							blockoverride = "text" {
								text = "[StateRegion.GetNameNoFormatting]"
							}

							blockoverride "right_text" {
								textbox = {
									align = nobaseline
									autoresize = yes
									margin_right = 15
									elide = right
									fontsize_min = 14
									max_width = 80
									raw_text = "@aut! #v [CompanyCharterType.GetAuthorityCost(Company.Self)|-0]#!"
								}
							}
						}
					}
				}
			}

			empty_state = {
				blockoverride "visible" {
					visible = "[IsDataModelEmpty(CompanyCharterType.GetPotentialRegions(Company.Self))]"
				}

				blockoverride "text" {
					text = "NO_AVAILABLE_STATES"
				}

				blockoverride "size" {
					minimumsize = { 460 -1 }
					maximumsize = { 460 -1 }
				}
			}
		}
	}
}

types company_charter_types
{
	type active_charter_right_click_item = widget {
		size = { 460 44 }

		tooltipwidget = {
			FancyTooltip_CompanyCharter = {
				blockoverride "tooltip_content_before" {
					custom_tooltip_textbox = {
						text = "COMPANY_CHARTER_TYPE_IS_ACTIVE"
					}

					custom_tooltip_textbox_with_empty_line = {
						text = "COMPANY_CHARTER_AUTHORITY_COST"
					}

					custom_tooltip_textbox_with_empty_line = {
						datacontext = "[Company.GetCountry]"
						text = "USING_X_FREE_CHARTERS"
					}
				}
			}
		}

		background = {
			using = paper_bg
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin_left  = 10

			icon = {
				size = { 28 28 }

				block "texture" {
					texture = "gfx/interface/icons/company_charter_icons/industry_charter.dds"
				}
			}

			textbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				block "text" {
					raw_text = "#TODO Default Item Text#!"
				}

				align = left|nobaseline
				using = fontsize_large
				fontsize_min = 12
				elide = right
				margin = { 5 0 }
			}

			hbox = {
				margin_right = 10
				spacing = 5

				close_button = {
					size = { 28 28 }
					blockoverride "tooltip" {}
					block "remove_button_properties" {}
					using = company_charter_revoke_sound
				}
			}

			block "rclick_item_after_label" {}

			block "right_text" {}
		}

		icon = {
			using = highlighted_square_selection
		}
	}
}

right_click_menu = {
	name = "transfer_formation_select_fleet_target"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			flowcontainer = {
				direction = vertical
				datacontext = "[TransferFormationPopup.GetRightStagedFormation]"

				textbox = {
					align = nobaseline
					autoresize = yes
					text = "FLEETS"
					margin_left = 10
				}

				new_fleet_button = {}

				dynamicgridbox = {
					datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"

					item = {
						widget = {
							using = standard_formation_item_size

							military_formation_right_click_item = {
								visible = "[Not(TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf ))]"

								blockoverride "tooltip" {
						        	tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "TRANSFER_FORMATION_SELECT_FLEET"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}

								blockoverride "onclick" {
									onclick = "[TransferFormationPopup.SetSelectedRightFormation( MilitaryFormation.AccessSelf )]"
									onclick = "[GetVariableSystem.Clear( 'transfer_formation_new_formation' )]"
									onclick = "[GetVariableSystem.Clear( Concatenate( StagedFormation.GetIDString, '_new_formation') )]"
		                       		onclick = "[RightClickMenuManager.Close]"
								}
							}

							military_formation_right_click_item_selected = {
								visible = "[TransferFormationPopup.IsFormationSelected( MilitaryFormation.AccessSelf )]"

								blockoverride "tooltip" {
									tooltipwidget = {
										FancyTooltip_MilitaryFormation = {
											blockoverride "text_before" {
		                        				text =  "CURRENTLY_SELECTED"
		                        				margin_bottom = 15
		                        			}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "privately_owned_filter_right_click_menu"
	parentanchor = top|right
	widgetanchor = top|left

	blockoverride "title_text" {
		max_width = 390
		fontsize_min = 12
		elide = right
		text = "PRIVATELY_OWNED_FILTER_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "list" {

		### ALL
		widget = {
			size = { 400 50 }

			privately_owned_filter_right_click_menu_item = {
				visible = "[Not(NationalizeBuildingGroup.HasFilter('all'))]"
				onclick = "[NationalizeBuildingGroup.SetFilter('all')]"
				enabled = "[GreaterThan_int32(NationalizeBuildingGroup.GetFilterMaxLevels('all'), '(int32)0')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_ALL"

				blockoverride "spacing" {}
			}

			privately_owned_filter_right_click_menu_item_selected = {
				visible = "[NationalizeBuildingGroup.HasFilter('all')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_ALL_SELECTED"

				blockoverride "spacing" {}
			}
		}

		### COMPANIES
		widget = {
			size = { 400 50 }

			privately_owned_filter_right_click_menu_item = {
				visible = "[Not(NationalizeBuildingGroup.HasFilter('companies'))]"
				onclick = "[NationalizeBuildingGroup.SetFilter('companies')]"
				enabled = "[GreaterThan_int32(NationalizeBuildingGroup.GetFilterMaxLevels('companies'), '(int32)0')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_COMPANIES"

				blockoverride "icon_texture" {
					texture = "gfx/interface/main_hud/companies_btn.dds"
				}

				blockoverride "text_name" {
					text = "COMPANIES"
				}

				blockoverride "text_levels" {
					raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('companies')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('companies')]"
				}

				blockoverride "spacing" {}
			}

			privately_owned_filter_right_click_menu_item_selected = {
				visible = "[NationalizeBuildingGroup.HasFilter('companies')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_COMPANIES_SELECTED"

				blockoverride "icon_texture" {
					texture = "gfx/interface/main_hud/companies_btn.dds"
				}

				blockoverride "text_name" {
					text = "COMPANIES"
				}

				blockoverride "text_levels" {
					raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('companies')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('companies')]"
				}

				blockoverride "spacing" {}
			}
		}

		### MANOR HOUSES
		widget = {
			size = { 400 50 }

			privately_owned_filter_right_click_menu_item = {
				visible = "[Not(NationalizeBuildingGroup.HasFilter('manor_house'))]"
				onclick = "[NationalizeBuildingGroup.SetFilter('manor_house')]"
				enabled = "[GreaterThan_int32(NationalizeBuildingGroup.GetFilterMaxLevels('manor_house'), '(int32)0')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_MANOR_HOUSE"

				blockoverride "icon_texture" {
					texture = "[GetBuildingType('building_manor_house').GetIcon]"
				}

				blockoverride "text_name" {
					text = "[GetBuildingType('building_manor_house').GetName]"
				}

				blockoverride "text_levels" {
					raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('manor_house')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('manor_house')]"
				}

				blockoverride "icon_size" {
					size = { 30 30 }
				}
			}

			privately_owned_filter_right_click_menu_item_selected = {
				visible = "[NationalizeBuildingGroup.HasFilter('manor_house')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_MANOR_HOUSE_SELECTED"

				blockoverride "icon_texture" {
					texture = "[GetBuildingType('building_manor_house').GetIcon]"
				}

				blockoverride "text_name" {
					text = "[GetBuildingType('building_manor_house').GetName]"
				}

				blockoverride "text_levels" {
					raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('manor_house')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('manor_house')]"
				}

				blockoverride "icon_size" {
					size = { 30 30 }
				}
			}
		}

		### FINANCIAL DISTRICTS
		widget = {
			size = { 400 50 }

			privately_owned_filter_right_click_menu_item = {
				visible = "[Not(NationalizeBuildingGroup.HasFilter('financial_district'))]"
				onclick = "[NationalizeBuildingGroup.SetFilter('financial_district')]"
				enabled = "[GreaterThan_int32(NationalizeBuildingGroup.GetFilterMaxLevels('financial_district'), '(int32)0')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_FINANCIAL_DISTRICT"

				blockoverride "icon_texture" {
					texture = "[GetBuildingType('building_financial_district').GetIcon]"
				}

				blockoverride "text_name" {
					text = "[GetBuildingType('building_financial_district').GetName]"
				}

				blockoverride "text_levels" {
					raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('financial_district')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('financial_district')]"
				}

				blockoverride "icon_size" {
					size = { 30 30 }
				}
			}

			privately_owned_filter_right_click_menu_item_selected = {
				visible = "[NationalizeBuildingGroup.HasFilter('financial_district')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_FINANCIAL_DISTRICT_SELECTED"

				blockoverride "icon_texture" {
					texture = "[GetBuildingType('building_financial_district').GetIcon]"
				}

				blockoverride "text_name" {
					text = "[GetBuildingType('building_financial_district').GetName]"
				}

				blockoverride "text_levels" {
					raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('financial_district')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('financial_district')]"
				}

				blockoverride "icon_size" {
					size = { 30 30 }
				}
			}
		}

		### SELF OWNED
		widget = {
			size = { 400 50 }

			privately_owned_filter_right_click_menu_item = {
				visible = "[Not(NationalizeBuildingGroup.HasFilter('self'))]"
				onclick = "[NationalizeBuildingGroup.SetFilter('self')]"
				enabled = "[GreaterThan_int32(NationalizeBuildingGroup.GetFilterMaxLevels('self'), '(int32)0')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_WORKER_OWNED"

				blockoverride "icon_texture" {
					texture = "gfx/interface/icons/generic_icons/population.dds"
				}

				blockoverride "text_name" {
					text = "WORKER_OWNED"
				}

				blockoverride "text_levels" {
					raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('self')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('self')]"
				}

				blockoverride "icon_size" {
					size = { 30 30 }
				}
			}

			privately_owned_filter_right_click_menu_item_selected = {
				visible = "[NationalizeBuildingGroup.HasFilter('self')]"
				tooltip = "PRIVATELY_OWNED_FILTER_TOOLTIP_WORKER_OWNED_SELECTED"

				blockoverride "icon_texture" {
					texture = "gfx/interface/icons/generic_icons/population.dds"
				}

				blockoverride "text_name" {
					text = "WORKER_OWNED"
				}

				blockoverride "text_levels" {
					raw_text = "#v [NationalizeBuildingGroup.GetFilterNumSelectedLevels('self')]#!/[NationalizeBuildingGroup.GetFilterMaxLevels('self')]"
				}

				blockoverride "icon_size" {
					size = { 30 30 }
				}
			}
		}
	}
}

right_click_menu = {
	name = "privatize_monopolize_right_click_menu"
	parentanchor = bottom
	widgetanchor = top|left
	datacontext = "[BuildingBrowserBuildingTypeItem.GetBuildingType]"

	blockoverride "header_text" {
		textbox = {
			visible = "[HasDlcFeature('mp1_monopolies')]"
			autoresize = yes
			default_format = "#header"
			align = nobaseline
			using = right_click_menu_title_margin_left
			margin_bottom = 2
			max_width = 390
			fontsize_min = 12
			elide = right
			text = "PRIVATIZE_OR_MONOPOLIZE_RIGHT_CLICK_MENU_TITLE"
		}

		textbox = {
			visible = "[Not(HasDlcFeature('mp1_monopolies'))]"
			autoresize = yes
			default_format = "#header"
			align = nobaseline
			using = right_click_menu_title_margin_left
			margin_bottom = 2
			max_width = 390
			fontsize_min = 12
			elide = right
			text = "[concept_privatize] [BuildingType.GetName]"
		}
	}

	blockoverride "menu_maximumsize" {
		maximumsize = { -1 180 }
	}

	blockoverride "list" {
		flowcontainer = {
			using = default_list_position
			direction = vertical
			spacing = 2

			flowcontainer = {
				visible = "[HasDlcFeature('mp1_monopolies')]"
				direction = vertical

				### MONOPOLIZE BUTTON - PRIVATIZATION ACTIVE
				building_type_ownership_button = {
					visible = "[And(Not(BuildingType.HasCountryMonopoly), IsValid(BuildingBrowserBuildingTypeItem.RemoveAllPrivatization))]"
					enabled = "[And(IsValid( BuildingType.ToggleMonopoly ), Not(BuildingBrowserBuildingTypeItem.HasAllForcedPrivatization))]"
					onclick = "[Execute(BuildingBrowserBuildingTypeItem.RemoveAllPrivatization)]"
					onclick = "[Execute(BuildingType.ToggleMonopoly)]"
					tooltip = "COUNTRY_MONOPOLIZE_TOOLTIP_ACTIVATE"
					using = icon_toggle_single_off_sound

					blockoverride "ownership_text_inactive" {
						text = "concept_country_monopolize_short"
					}

					blockoverride "ownership_texture_inactive" {
						texture = "gfx/interface/production_methods/monopolize_inactive.dds"
					}
				}

				### MONOPOLIZE BUTTON
				building_type_ownership_button = {
					visible = "[And(Not(BuildingType.HasCountryMonopoly), Not(IsValid(BuildingBrowserBuildingTypeItem.RemoveAllPrivatization)))]"
					enabled = "[And(IsValid( BuildingType.ToggleMonopoly ), Not(BuildingBrowserBuildingTypeItem.HasAllForcedPrivatization))]"
					onclick = "[Execute(BuildingType.ToggleMonopoly)]"
					tooltip = "COUNTRY_MONOPOLIZE_TOOLTIP_ACTIVATE"
					using = icon_toggle_single_off_sound

					blockoverride "ownership_text_inactive" {
						text = "concept_country_monopolize_short"
					}

					blockoverride "ownership_texture_inactive" {
						texture = "gfx/interface/production_methods/monopolize_inactive.dds"
					}
				}

				### MONOPOLY ACTIVE
				building_type_ownership_active_widget = {
					visible = "[BuildingType.HasCountryMonopoly]"
					tooltip = "COUNTRY_MONOPOLIZE_TOOLTIP_ACTIVE"

					blockoverride "ownership_text_active" {
						text = "concept_country_monopolize_short"
					}

					blockoverride "ownership_texture_active" {
						texture = "gfx/interface/production_methods/monopolize_active.dds"
					}
				}

				### NONE BUTTON - MONOPOLY ACTIVE
				building_type_ownership_button = {
					visible = "[BuildingType.HasCountryMonopoly]"
					enabled = "[IsValid(BuildingType.ToggleMonopoly)]"
					onclick = "[Execute(BuildingType.ToggleMonopoly)]"
					tooltip = "COUNTRY_MONOPOLIZE_TOOLTIP_DEACTIVATE"
					using = icon_toggle_single_off_sound

					blockoverride "ownership_texture_inactive" {
						texture = "gfx/interface/production_methods/none_inactive.dds"
					}
				}
			}

			### NONE BUTTON - ALL PRIVATIZATION ACTIVE
			building_type_ownership_button = {
				visible = "[BuildingBrowserBuildingTypeItem.HasAllPrivatization]"
				enabled = "[And(IsValid( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization ), Not(BuildingBrowserBuildingTypeItem.HasAllForcedPrivatization))]"
				onclick = "[Execute( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
				tooltip = "PRIVATIZATION_ALL_YES"
				using = icon_toggle_single_off_sound

				blockoverride "ownership_texture_inactive" {
					texture = "gfx/interface/production_methods/none_inactive.dds"
				}
			}

			### NONE BUTTON - MIXED PRIVATIZATION ACTIVE
			building_type_ownership_button = {
				visible = "[And(BuildingBrowserBuildingTypeItem.HasMixedPrivatization, Not(Or(BuildingType.HasCountryMonopoly, BuildingBrowserBuildingTypeItem.HasAllNoPrivatization)))]"
				onclick = "[Execute( BuildingBrowserBuildingTypeItem.RemoveAllPrivatization )]"
				tooltip = "PRIVATIZATION_ALL_MIXED_DEACTIVATE_ALL"
				using = icon_toggle_single_off_sound

				blockoverride "ownership_texture_inactive" {
					texture = "gfx/interface/production_methods/none_inactive.dds"
				}
			}

			### NONE ACTIVE
			building_type_ownership_active_widget = {
				visible = "[And(And(Not(BuildingType.HasCountryMonopoly), Not(BuildingBrowserBuildingTypeItem.HasAllPrivatization)), Not(BuildingBrowserBuildingTypeItem.HasMixedPrivatization))]"
				tooltip = "COUNTRY_MONOPOLIZE_TOOLTIP_NONE_ACTIVE"

				blockoverride "ownership_texture_active" {
					texture = "gfx/interface/production_methods/none_active.dds"
				}
			}

			### PRIVATIZE BUTTON - NONE ACTIVE - MONOPOLY ACTIVE
			building_type_ownership_button = {
				visible = "[And(BuildingType.HasCountryMonopoly, BuildingBrowserBuildingTypeItem.HasAllNoPrivatization)]"
				enabled = "[IsValid( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
				onclick = "[Execute(BuildingType.ToggleMonopoly)]"
				onclick = "[Execute( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
				tooltip = "PRIVATIZATION_ALL_NO"
				using = icon_toggle_single_off_sound

				blockoverride "ownership_texture_inactive" {
					texture = "gfx/interface/production_methods/privatize_not.dds"
				}

				blockoverride "ownership_text_inactive" {
					text = "concept_privatize"
				}
			}

			### PRIVATIZE BUTTON - MIXED ACTIVE - MONOPOLY ACTIVE
			building_type_ownership_button = {
				visible = "[And(BuildingType.HasCountryMonopoly, BuildingBrowserBuildingTypeItem.HasMixedPrivatization)]"
				enabled = "[IsValid( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization)]"
				onclick = "[Execute(BuildingType.ToggleMonopoly)]"
				onclick = "[Execute( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
				tooltip = "PRIVATIZATION_ALL_MIXED_ACTIVATE_ALL"
				using = icon_toggle_single_off_sound

				blockoverride "ownership_texture_inactive" {
					texture = "gfx/interface/production_methods/subsidized_mixed.dds"
				}

				blockoverride "ownership_text_inactive" {
					text = "concept_privatize"
				}
			}

			### PRIVATIZE BUTTON - NONE ACTIVE
			building_type_ownership_button = {
				visible = "[And(Not(BuildingType.HasCountryMonopoly), BuildingBrowserBuildingTypeItem.HasAllNoPrivatization)]"
				enabled = "[IsValid( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization)]"
				onclick = "[Execute( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
				tooltip = "PRIVATIZATION_ALL_NO"
				using = icon_toggle_single_off_sound

				blockoverride "ownership_texture_inactive" {
					texture = "gfx/interface/production_methods/privatize_not.dds"
				}

				blockoverride "ownership_text_inactive" {
					text = "concept_privatize"
				}
			}

			### PRIVATIZE BUTTON - MIXED ACTIVE
			building_type_ownership_button = {
				visible = "[And(Not(BuildingType.HasCountryMonopoly), BuildingBrowserBuildingTypeItem.HasMixedPrivatization)]"
				enabled = "[IsValid( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization)]"
				onclick = "[Execute( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
				tooltip = "PRIVATIZATION_ALL_MIXED_ACTIVATE_ALL"
				using = icon_toggle_single_off_sound

				blockoverride "ownership_texture_inactive" {
					texture = "gfx/interface/production_methods/subsidized_mixed.dds"
				}

				blockoverride "ownership_text_inactive" {
					text = "concept_privatize"
				}
			}

			### ALL PRIVATIZATION ACTIVE
			building_type_ownership_active_widget = {
				visible = "[BuildingBrowserBuildingTypeItem.HasAllPrivatization]"
				tooltip = "PRIVATIZATION_ALL_ACTIVE"

				blockoverride "ownership_texture_active" {
					texture = "gfx/interface/production_methods/privatize.dds"
				}

				blockoverride "ownership_text_active" {
					text = "concept_privatize"
				}
			}
		}
	}
}

types ownership_types
{
	type building_type_ownership_button = button {
		size = { 300 40 }
		using = default_button_action

		flowcontainer = {
			parentanchor = vcenter
			spacing = 5
			margin_left = 10

			block "ownership_icon" {
				icon = {
					parentanchor = vcenter
					size = { 30 30 }

					block "ownership_texture_inactive" {
						texture = "gfx/interface/icons/harvest_condition_icons/placeholder.dds"
					}
				}
			}

			textbox = {
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				max_width = 100
				using = elide_fontsize_min

				block "ownership_text_inactive" {
					text = "NONE"
				}
			}
		}
	}

	type building_type_ownership_active_widget = widget {
		size = { 300 40 }

		background = {
			using = paper_bg
		}

		flowcontainer = {
			parentanchor = vcenter
			spacing = 5
			margin_left = 10

			icon = {
				parentanchor = vcenter
				size = { 30 30 }

				block "ownership_texture_active" {
					texture = "gfx/interface/icons/harvest_condition_icons/placeholder.dds"
				}
			}

			textbox = {
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				max_width = 100
				using = elide_fontsize_min

				block "ownership_text_active" {
					text = "NONE"
				}
			}
		}

		icon = {
			using = highlighted_square_selection
		}
	}
}

right_click_menu = {
	datacontext = "[StagedFormation.GetMilitaryFormation]"
	name = "filter_unit_states_right_click_menu"
	parentanchor = right|bottom

	blockoverride "title_text" {
		text = "SELECT_STATE_TO_FILTER_ON"
	}

	blockoverride "items" {

		flowcontainer = {
			direction = vertical

			dynamicgridbox = {
				datamodel = "[StagedUnitsWithType.GetStagedCombatUnitStates]"

				item = {
					widget = {
						size = { 460 44 }

						right_click_menu_item = {
							visible = "[Not(ObjectsEqual(StagedUnitsWithType.GetStateFilter.Self, State.Self))]"

							blockoverride "properties" {
								onclick = "[StagedUnitsWithType.SetStateFilter( State.AccessSelf )]"

								datacontext = "[StagedUnitsWithType]"
								datacontext = "[StagedFormation]"
								tooltip = "FILTER_UNITS_IN_STATE_TOOLTIP"
							}

							blockoverride "text" {
								text = "[State.GetName]"
							}

							blockoverride "right_text" {
								textbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "UNIT_TYPE_UNITS_IN_STATE"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}

							blockoverride "icon" {
								tiny_flag_no_interact = {
									datacontext = "[State.GetCountry]"
								}
							}

							blockoverride "margin" {
								margin_left = 55
							}
						}

						right_click_menu_item = {
							visible = "[ObjectsEqual(StagedUnitsWithType.GetStateFilter.Self, State.Self)]"

							background = {
								using = paper_bg
							}

							blockoverride "button" {}

							blockoverride "properties" {
								onclick = "[StagedUnitsWithType.SetStateFilter( State.AccessSelf )]"
								tooltip = "FILTER_UNITS_IN_STATE_TOOLTIP"
							}

							blockoverride "text" {
								text = "[State.GetName]"
							}

							blockoverride "right_text" {
								textbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "UNIT_TYPE_UNITS_IN_STATE"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}

							blockoverride "icon" {
								tiny_flag_no_interact = {
									datacontext = "[State.GetCountry]"
								}
							}

							blockoverride "margin" {
								margin_left = 55
							}

							icon = {
								using = highlighted_square_selection
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "select_fleet_right_click_menu"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"
			flipdirection = yes
			datamodel_wrap = 2

			item = {
				widget = {
					using = standard_formation_item_size

					military_formation_right_click_item = {
						visible = "[Not(InvasionPlannerPopup.IsMilitaryFormationSelected(MilitaryFormation.Self))]"

                        blockoverride "tooltip" {
                        	tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(InvasionPlannerPopup.CanMilitaryFormationBeSelected(MilitaryFormation.Self))]"
                        				text =  "[InvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}

						blockoverride "onclick" {
							enabled = "[InvasionPlannerPopup.CanMilitaryFormationBeSelected(MilitaryFormation.Self)]"
							onclick = "[InvasionPlannerPopup.OnSelectedFleet(MilitaryFormation.AccessSelf)]"
                        	onclick = "[RightClickMenuManager.Close]"
						}
					}

					military_formation_right_click_item_selected = {
						visible = "[InvasionPlannerPopup.IsMilitaryFormationSelected(MilitaryFormation.Self)]"

						blockoverride "tooltip" {
							tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(InvasionPlannerPopup.CanMilitaryFormationBeSelected(MilitaryFormation.Self))]"
                        				text =  "[InvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}
					}
				}
			}

		}
	}
}

right_click_menu = {
	name = "select_army_right_click_menu"

	blockoverride "title_text" {
		text = "SELECT_MILITARY_FORMATION"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"
			flipdirection = yes
			datamodel_wrap = 2

			item = {
				widget = {
					using = standard_formation_item_size

					military_formation_right_click_item = {
						visible = "[Not(InvasionPlannerPopup.IsMilitaryFormationSelected(MilitaryFormation.Self))]"

						blockoverride "tooltip" {
							tooltipwidget = {
								FancyTooltip_MilitaryFormation = {
									blockoverride "text_before" {
										visible = "[Not(InvasionPlannerPopup.CanMilitaryFormationBeSelected(MilitaryFormation.Self))]"
										text = "[InvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)]"
										margin_bottom = 15
									}
								}
							}
						}

						blockoverride "onclick" {
							enabled = "[InvasionPlannerPopup.CanMilitaryFormationBeSelected(MilitaryFormation.Self)]"
							onclick = "[InvasionPlannerPopup.OnSelectedArmy(MilitaryFormation.AccessSelf)]"
                        	onclick = "[RightClickMenuManager.Close]"
						}
					}

					military_formation_right_click_item_selected = {
						visible = "[InvasionPlannerPopup.IsMilitaryFormationSelected(MilitaryFormation.Self)]"

						blockoverride "tooltip" {
							tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(InvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)))]"
                        				text =  "[InvasionPlannerPopup.GetCanMilitaryFormationBeSelectedTooltip(MilitaryFormation.Self)]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}
					}
				}
			}

		}
	}
}

right_click_menu = {
	name = "add_fleet_invasion_right_click_menu"
	parentanchor = hcenter|bottom

	blockoverride "title_text" {
		text = "SELECT_FLEET_TO_SEND"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[AccessPlayer.GetMilitaryFormationsFleet]"
			flipdirection = yes
			datamodel_wrap = 2

			item = {
				widget = {
					using = standard_formation_item_size

					military_formation_right_click_item = {
						visible = "[And(Not(MilitaryFormation.IsTargetSeaNode(Invasion.GetSeaNode.Self)), Not(MilitaryFormation.IsCurrentSeaNode(Invasion.GetSeaNode.Self)))]"

                        blockoverride "tooltip" {
                        	tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(GetDesc(Invasion.DeployFleetToDefend(MilitaryFormation.Self))))]"
                        				text =  "[GetDesc(Invasion.DeployFleetToDefend(MilitaryFormation.Self))]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}

						blockoverride "onclick" {
							enabled = "[IsValid(Invasion.DeployFleetToDefend(MilitaryFormation.Self))]"
							onclick = "[Execute(Invasion.DeployFleetToDefend(MilitaryFormation.Self))]"
                        	onclick = "[RightClickMenuManager.Close]"
						}
					}

					military_formation_right_click_item_selected = {
						visible = "[Or(MilitaryFormation.IsTargetSeaNode(Invasion.GetSeaNode.Self), MilitaryFormation.IsCurrentSeaNode(Invasion.GetSeaNode.Self))]"

						blockoverride "tooltip" {
							tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                                        visible = "[Not(StringIsEmpty(GetDesc(Invasion.DeployFleetToDefend(MilitaryFormation.Self))))]"
                                        text =  "[GetDesc(Invasion.DeployFleetToDefend(MilitaryFormation.Self))]"
                                        margin_bottom = 15
                                    }
                        		}
                        	}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "add_army_invasion_right_click_menu"
	parentanchor = hcenter|bottom

	blockoverride "title_text" {
		text = "SELECT_ARMY_TO_SEND"
	}

	blockoverride "items" {
		dynamicgridbox = {
			datamodel = "[AccessPlayer.GetMilitaryFormationsArmy]"
			flipdirection = yes
			datamodel_wrap = 2

			item = {
				widget = {
					using = standard_formation_item_size

					military_formation_right_click_item = {
                        visible = "[Not(IsRedundant(Invasion.DeployArmyToDefend(MilitaryFormation.Self)))]"

                        blockoverride "tooltip" {
                        	tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(GetDesc(Invasion.DeployArmyToDefend(MilitaryFormation.Self))))]"
                                        text =  "[GetDesc(Invasion.DeployArmyToDefend(MilitaryFormation.Self))]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}

						blockoverride "onclick" {
							enabled = "[IsValid(Invasion.DeployArmyToDefend(MilitaryFormation.Self))]"
                            onclick = "[Execute(Invasion.DeployArmyToDefend(MilitaryFormation.Self))]"
                            onclick = "[RightClickMenuManager.Close]"
						}
					}

					military_formation_right_click_item_selected = {
                        visible = "[IsRedundant(Invasion.DeployArmyToDefend(MilitaryFormation.Self))]"

						blockoverride "tooltip" {
							tooltipwidget = {
                        		FancyTooltip_MilitaryFormation = {
                        			blockoverride "text_before" {
                        				visible = "[Not(StringIsEmpty(GetDesc(Invasion.DeployArmyToDefend(MilitaryFormation.Self))))]"
                                        text =  "[GetDesc(Invasion.DeployArmyToDefend(MilitaryFormation.Self))]"
                        				margin_bottom = 15
                        			}
                        		}
                        	}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "select_order_right_click_menu"

	blockoverride "title_text" {
		text = "SELECT_ORDER_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		flowcontainer = {
			direction = vertical
			spacing = 10

			### ORDERS
			dynamicgridbox = {
				datamodel = "[Character.AccessOrders]"

				item = {
					flowcontainer = {
						right_click_menu_item = {
							visible = "[And( Not( ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self) ), Not( And( Not(Character.GetNextOrderType.IsValid), Character.HasOrder( CommanderOrderType.Self ) ) ) )]"

							blockoverride "properties" {
								tooltipwidget = {
									FancyTooltip_CommanderOrderType = {
										blockoverride "text_before" {
											using = visible_if_either_current_or_next_order
											text =  "NEXT_OR_CURRENT_ORDER"
											margin_bottom = 15
										}
									}
								}
						        enabled = "[IsValid(Character.SelectOrder( CommanderOrderType.Self ))]"
						        onclick = "[Execute(Character.SelectOrder( CommanderOrderType.Self ))]"
						        onclick = "[RightClickMenuManager.Close]"
							}

							clicksound = "[CommanderOrderType.GetClickSound]"

							blockoverride "texture" {
								texture = "[CommanderOrderType.GetTexture]"
							}

							blockoverride "text" {
								text = "[CommanderOrderType.GetNameNoFormatting]"
							}

							blockoverride "size" {
								size = { 360 44 }
							}

							blockoverride "text_layoutpolicies" {
								autoresize = yes
							}

							blockoverride "rclick_item_after_label" {
								icon = {
									visible = "[Not(CommanderOrderType.IsBasicOrderType)]"
									size = { 28 28 }
									texture = "gfx/interface/icons/generic_icons/most_senior_front_commander.dds"
								}
							}

							blockoverride "right_text" {
								textbox = {
									visible = "[Character.HasOrder( CommanderOrderType.Self )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "CURRENT"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}

								expand = {}
							}
						}

						widget = {
							visible = "[And(Not(Character.GetNextOrderType.IsValid), Character.HasOrder( CommanderOrderType.Self ))]"
							size = { 360 44 }
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							background = {
		                    	using = paper_bg
		                    }

		                    flowcontainer = {
		                    	parentanchor = vcenter
		                    	position = { 10 0 }
		                    	spacing = 5

		                    	icon = {
		                    		parentanchor = vcenter
		                    		size = { 28 28 }
		                    		texture = "[CommanderOrderType.GetTexture]"
		                    	}

		                    	textbox = {
		                    		parentanchor = vcenter
		                    		align = nobaseline
		                    		autoresize = yes
		                    		text = "[CommanderOrderType.GetNameNoFormatting]"
		                    		using = fontsize_large
		                    		using = look_at_me_text_animation
		                    	}

		                    	icon = {
									visible = "[Not(CommanderOrderType.IsBasicOrderType)]"
									parentanchor = vcenter
									size = { 28 28 }
									texture = "gfx/interface/icons/generic_icons/most_senior_front_commander.dds"
								}
		                    }

		                    textbox = {
								visible = "[Character.HasOrder( CommanderOrderType.Self )]"
								parentanchor = right|vcenter
								autoresize = yes
								raw_text = "CURRENT"
								align = right|nobaseline
								fontsize_min = 12
								elide = right
								margin = { 5 0 }
								margin_right = 10
							}

		                    icon = {
		                    	using = highlighted_square_selection
		                    }
						}

						widget = {
							visible = "[ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self)]"
							size = { 360 44 }
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							background = {
		                    	using = paper_bg
		                    }

		                    flowcontainer = {
		                    	parentanchor = vcenter
		                    	position = { 10 0 }
		                    	spacing = 5

		                    	icon = {
		                    		parentanchor = vcenter
		                    		size = { 28 28 }
		                    		texture = "[Character.GetNextOrderType.GetTexture]"
		                    	}

		                    	textbox = {
		                    		parentanchor = vcenter
		                    		align = nobaseline
		                    		autoresize = yes
		                    		text = "[Character.GetNextOrderType.GetName]"
		                    		using = fontsize_large
		                    		using = look_at_me_text_animation
		                    	}

		                    	icon = {
									visible = "[Not(Character.GetNextOrderType.IsBasicOrderType)]"
									parentanchor = vcenter
									size = { 20 20 }
									texture = "gfx/interface/icons/generic_icons/most_senior_front_commander.dds"
								}
		                    }

		                    textbox = {
								parentanchor = right|vcenter
								autoresize = yes
								raw_text = "NEXT"
								align = right|nobaseline
								fontsize_min = 12
								elide = right
								margin = { 5 0 }
								margin_right = 10
							}

		                    icon = {
		                    	using = highlighted_square_selection
		                    }
						}
					}
				}
			}

			right_click_menu_dropdown = {
				blockoverride "section_header_tooltip" {
					tooltip = "UNAVAILABLE_ORDERS_TOOLTIP"
				}

				blockoverride "left_text" {
					text = "UNAVAILABLE_ORDERS"
				}

				blockoverride "section_header_right_text" {
					flowcontainer = {
						margin = { 5 0 }
						spacing = 5

						icon = {
							visible = "[Character.HasUnavailableAdvanceOrders]"
							size = { 35 35 }
							texture = "gfx/interface/backgrounds/round_button_bg.dds"
							parentanchor = vcenter

							icon = {
								size = { 75% 75% }
								texture = "gfx/interface/icons/commander_order_icons/advance.dds"
								parentanchor = center
							}
						}

						icon = {
							visible = "[Character.HasUnavailableDefendOrders]"
							size = { 35 35 }
							texture = "gfx/interface/backgrounds/round_button_bg.dds"
							parentanchor = vcenter

							icon = {
								size = { 75% 75% }
								texture = "gfx/interface/icons/commander_order_icons/defend.dds"
								parentanchor = center
							}
						}

						textbox = {
							parentanchor = vcenter
							autoresize = yes
							align = nobaseline
							default_format = "#v"
							raw_text = "[GetDataModelSize(Character.AccessUnavailableOrders)]"
						}
					}
				}

				blockoverride "onclick" {
					onclick = "[GetVariableSystem.Toggle('show_unavailable_orders')]"
				}

				blockoverride "onclick_showmore" {
					visible = "[Not(GetVariableSystem.Exists('show_unavailable_orders'))]"
				}

				blockoverride "onclick_showless" {
					visible = "[GetVariableSystem.Exists('show_unavailable_orders')]"
				}

				blockoverride "items_visibility" {
					visible = "[GetVariableSystem.Exists('show_unavailable_orders')]"
				}

				blockoverride "dropdown_datamodel" {
					datamodel = "[Character.AccessUnavailableOrders]"
				}

				blockoverride "properties" {
					tooltipwidget = {
						FancyTooltip_CommanderOrderType = {
							blockoverride "text_before" {
								using = visible_if_either_current_or_next_order
								text =  "NEXT_OR_CURRENT_ORDER"
								margin_bottom = 15
							}
						}
					}

					clicksound = "[CommanderOrderType.GetClickSound]"
			        enabled = no
			        onclick = "[Character.SelectOrder( CommanderOrderType.Self )]"
			        onclick = "[RightClickMenuManager.Close]"
				}

				blockoverride "item_margin" {
					margin_left = 35
				}

				blockoverride "texture" {
					texture = "[CommanderOrderType.GetTexture]"
				}

				blockoverride "text" {
					text = "[CommanderOrderType.GetNameNoFormatting]"
				}

				blockoverride "size" {
					size = { 360 44 }
				}

				blockoverride "item_right_text_visibility" {
					visible = "[Character.HasOrder( CommanderOrderType.Self )]"
				}

				blockoverride "item_right_text" {
					text = "CURRENT"
				}
			}
		}
	}
}

right_click_menu = {
	name = "military_formation_marker_right_click_menu"

	blockoverride "title_text" {
		text = "MILITARY_FORMATION_MARKER_SELECT_FORMATION"
	}

	blockoverride "items" {
		flowcontainer = {
			spacing = 10

			dynamicgridbox = {
				datamodel = "[FormationMarker.GetFormations]"

				item = {
					right_click_menu_item = {
						tooltipwidget = {
							FancyTooltip_MilitaryFormation = {}
						}

						blockoverride "properties" {
							onclick = "[InformationPanelBar.OpenMilitaryFormationPanelTab( MilitaryFormation.Self, 'default' )]"
						}

						blockoverride "texture" {
							texture = "[MilitaryFormation.GetFlag]"
						}

						blockoverride "text" {
							text = "MILITARY_FORMATION_MARKER_RIGHT_CLICK_ITEM_DESC"
						}

						blockoverride "size" {
							size = { 360 44 }
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "character_right_click_menu"

	blockoverride "title_text" {
		text = "CHARACTER_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {		# GO TO PANEL
			visible = "[Not(InformationPanelBar.IsPanelOpen('commander'))]"

			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenCommanderPanel(Character.AccessSelf)]"
				tooltip = "GO_TO_BUTTON_CHARACTER"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}

			blockoverride = "text" {
				text = "CHARACTER_RIGHT_CLICK_MENU_INFORMATION"
			}

			blockoverride "size" {
				size = { 360 44 }
			}
		}

		right_click_menu_item = {		# TOGGLE PIN
			blockoverride "properties" {
				visible = "[Character.GetCountry.IsLocalPlayer]"
				onclick = "[Character.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[Character.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(Character.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}

			blockoverride = "text" {
				text = "CHARACTER_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}

			blockoverride "size" {
				size = { 360 44 }
			}
		}

		flowcontainer = {
			direction = vertical

			textbox = {					# CHARACTER INTERACTIONS HEADER
				visible = "[Not(IsDataModelEmpty(Character.GetInteractions))]"
				margin_top = 5
				margin_left = 5
				autoresize = yes
				align = left|nobaseline
				text = "CHARACTER_INTERACTIONS_HEADER"
			}

			right_click_menu_item = {	# PROMOTE COMMANDER
				blockoverride "properties" {
					visible = "[And( Character.GetCountry.IsLocalPlayer, Character.IsCommander )]"
					tooltip = "MILITARY_PANEL_PROMOTE_CHARACTER_TOOLTIP"
					enabled = "[IsValid(Character.GetPromoteCommand)]"
					onclick = "[PopupManager.AskConfirmationWithSound(Character.GetPromoteCommand, 'event:/SFX/UI/Military/commander_promote')]"
				}

				blockoverride "texture" {
					texture = "[Character.GetNextCommanderRank.GetTexture]"
				}

				blockoverride = "text" {
					text = "CHARACTER_RIGHT_CLICK_MENU_PROMOTE_COMMANDER"
				}

				blockoverride "size" {
					size = { 360 44 }
				}
			}

			right_click_menu_item = {	# SPLIT INTO OWN FORMATION
				blockoverride "properties" {
					visible = "[And( Character.GetCountry.IsLocalPlayer, Character.IsCommander )]"
					tooltip = "MILITARY_PANEL_SPLIT_CHARACTER_INTO_OWN_FORMATION_TOOLTIP"
					enabled = "[IsValid(Character.SplitIntoOwnFormation)]"
					onclick = "[PopupManager.AskConfirmation(Character.SplitIntoOwnFormation)]"
				}

				blockoverride "icon" {}

				blockoverride "text" {
					text = "CHARACTER_RIGHT_CLICK_MENU_SPLIT_INTO_OWN_FORMATION"
				}

				blockoverride "size" {
					size = { 360 44 }
				}
			}

			dynamicgridbox = {			# INTERACTIONS
				datamodel = "[Character.GetInteractions]"
				item = {
					right_click_menu_item = {
						blockoverride "properties" {
							tooltip = "CHARACTER_INTERACTION_TOOLTIP"
							enabled = "[CharacterInteraction.IsCommandValid(Character.Self)]"
							onclick = "[CharacterInteraction.ExecuteCommand(Character.Self)]"
						}
						clicksound = "[CharacterInteraction.GetClickSound]"

						blockoverride "texture" {
							visible = "[CharacterInteraction.HasIcon]"
							texture = "[CharacterInteraction.GetIcon]"
						}

						blockoverride "text" {
							text = "CHARACTER_INTERACTION_NAME"
						}

						blockoverride "size" {
							size = { 360 44 }
						}
					}
				}
			}
		}

		flowcontainer = {
			direction = vertical
			visible = "[Character.GetCountry.IsLocalPlayer]"

			textbox = {					# CURRENT ORDER (TEXT)
				visible = "[And(Character.IsCommander, Not(Character.GetNextOrderType.IsValid))]"
				margin_top = 5
				margin_left = 5
				autoresize = yes
				align = left|nobaseline
				text = "COMMANDER_PANEL_CURRENT_ORDER_SHORT"
			}

			textbox = {					# NEXT ORDER (TEXT)
				visible = "[And(Character.IsCommander, Character.GetNextOrderType.IsValid)]"
				margin_top = 5
				margin_left = 5
				margin_bottom = 5
				autoresize = yes
				align = left|nobaseline
				text = "COMMANDER_PANEL_NEXT_ORDER_SHORT"
			}

			dynamicgridbox = {			# ORDERS
				datamodel = "[Character.AccessOrders]"
				item = {
					container = {
						right_click_menu_item = {
							visible = "[And( Not( ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self) ), Not( And( Not(Character.GetNextOrderType.IsValid), Character.HasOrder( CommanderOrderType.Self ) ) ) )]"

							blockoverride "properties" {
								tooltipwidget = {
									FancyTooltip_CommanderOrderType = {
										blockoverride "text_before" {
											using = visible_if_either_current_or_next_order
											text =  "NEXT_OR_CURRENT_ORDER"
											margin_bottom = 15
										}
									}
								}
						        enabled = "[IsValid(Character.SelectOrder( CommanderOrderType.Self ))]"
						        onclick = "[Execute(Character.SelectOrder( CommanderOrderType.Self ))]"
						        onclick = "[RightClickMenuManager.Close]"
							}

							clicksound = "[CommanderOrderType.GetClickSound]"

							blockoverride "texture" {
								texture = "[CommanderOrderType.GetTexture]"
							}

							blockoverride "text" {
								text = "[CommanderOrderType.GetName]"
							}

							blockoverride "size" {
								size = { 360 44 }
							}

							blockoverride "right_text" {
								textbox = {
									visible = "[Character.HasOrder( CommanderOrderType.Self )]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "CURRENT"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}
						}



						widget = {
							visible = "[And(Not(Character.GetNextOrderType.IsValid), Character.HasOrder( CommanderOrderType.Self ))]"
							size = { 360 44 }
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							background = {
		                    	using = paper_bg
		                    }

		                    flowcontainer = {
		                    	parentanchor = vcenter
		                    	position = { 10 0 }
		                    	spacing = 5

		                    	icon = {
		                    		parentanchor = vcenter
		                    		size = { 28 28 }
		                    		texture = "[CommanderOrderType.GetTexture]"
		                    	}

		                    	textbox = {
		                    		parentanchor = vcenter
		                    		align = nobaseline
		                    		autoresize = yes
		                    		text = "[CommanderOrderType.GetName]"
		                    		using = fontsize_large
		                    		using = look_at_me_text_animation
		                    	}
		                    }

		                    textbox = {
								visible = "[Character.HasOrder( CommanderOrderType.Self )]"
								parentanchor = right|vcenter
								autoresize = yes
								raw_text = "CURRENT"
								align = right|nobaseline
								fontsize_min = 12
								elide = right
								margin = { 5 0 }
								margin_right = 10
							}

		                    icon = {
		                    	using = highlighted_square_selection
		                    }
						}

						widget = {
							visible = "[ObjectsEqual(Character.GetNextOrderType.Self, CommanderOrderType.Self)]"
							size = { 360 44 }
							tooltipwidget = {
								FancyTooltip_CommanderOrderType = {
									blockoverride "text_before" {
										using = visible_if_either_current_or_next_order
										text =  "NEXT_OR_CURRENT_ORDER"
										margin_bottom = 15
									}
								}
							}

							background = {
		                    	using = paper_bg
		                    }

		                    flowcontainer = {
		                    	parentanchor = vcenter
		                    	position = { 10 0 }
		                    	spacing = 5

		                    	icon = {
		                    		parentanchor = vcenter
		                    		size = { 28 28 }
		                    		texture = "[Character.GetNextOrderType.GetTexture]"
		                    	}

		                    	textbox = {
		                    		parentanchor = vcenter
		                    		align = nobaseline
		                    		autoresize = yes
		                    		text = "[Character.GetNextOrderType.GetName]"
		                    		using = fontsize_large
		                    		using = look_at_me_text_animation
		                    	}
		                    }

		                    textbox = {
								parentanchor = right|vcenter
								autoresize = yes
								raw_text = "NEXT"
								align = right|nobaseline
								fontsize_min = 12
								elide = right
								margin = { 5 0 }
								margin_right = 10
							}

		                    icon = {
		                    	using = highlighted_square_selection
		                    }
						}
					}
				}
			}
		}

		flowcontainer = {				# HISTORICAL CHARACTER
			visible = "[And( Character.IsHistorical, Not( StringIsEmpty( Character.GetHistoricalUrl )))]"
			direction = vertical

			textbox = {
				margin_top = 5
				margin_left = 5
				autoresize = yes
				align = left|nobaseline
				text = "CHARACTER_HISTORICAL_HEADER"
			}

			right_click_menu_item = {	# OPEN HISTORICAL CHARACTER URL
				blockoverride "properties" {
					onclick = "[Character.OpenHistoricalUrl]"
					tooltip = "CHARACTER_HISTORICAL_OPEN_URL_TOOLTIP"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/historical_character_icon.dds"
				}

				blockoverride = "text" {
					text = "CHARACTER_HISTORICAL_OPEN_URL"
				}

				blockoverride "size" {
					size = { 360 44 }
				}
			}
		}
	}
}

right_click_menu = {
	name = "impose_law_right_click_menu"

	blockoverride "title_text" {
		text = "LAW_RIGHT_CLICK_MENU_TITLE"
	}


	blockoverride "items" {

		flowcontainer = {
			direction = vertical

			textbox = {					# IMPOSE LAW HEADER
				margin_top = 5
				margin_left = 5
				autoresize = yes
				align = left|nobaseline
			}

			dynamicgridbox = {			# INTERACTIONS
				datamodel = "[Law.GetLawAlternatives]"
				item = {
					container = {
						right_click_menu_item = {
							visible = "[Not(Law.IsActive)]"

							blockoverride "properties" {
								tooltip = "IMPOSE_LAW_TOOLTIP"
								enabled = "[IsValid( Law.StartImposing )]"
								onclick = "[PopupManager.AskConfirmation( Law.StartImposing )]"
							}

							blockoverride "texture" {
								texture = "[Law.GetTexture]"
							}

							blockoverride "text" {
								text = "[Law.GetNameNoFormatting]"
							}

							blockoverride "size" {
								size = { 360 44 }
							}
							blockoverride "right_text" {
								textbox = {
									visible = "[Law.IsBeingEnacted]"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "ENACTING"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}
						}

						right_click_menu_item = {
							visible = "[Law.IsActive]"

							blockoverride "onclick" {}
							blockoverride "button" {
								background = {
									using = paper_bg
								}
							}
							blockoverride "properties" {
								tooltipwidget = {
									FancyTooltip_Law = {}
								}
								icon = {
									using = highlighted_square_selection
									size = { 100% 100% }
								}
							}

							blockoverride "texture" {
								texture = "[Law.GetTexture]"
							}

							blockoverride "text" {
								text = "[Law.GetNameNoFormatting]"
							}

							blockoverride "size" {
								size = { 360 44 }
							}
							blockoverride "right_text"
							{
									textbox = {
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = expanding
									text = "CURRENT"
									align = right|nobaseline
									fontsize_min = 12
									elide = right
									margin = { 5 0 }
									margin_right = 10
								}
							}
						}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "state_right_click_menu"
	datacontext = "[State.AccessOwner]"

	blockoverride "title_text" {
		text = "STATE_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "header_text" {} #no header for state menu, handle in items instead

	blockoverride "items" {

		container = {
			minimumsize = { 460 -1 }

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5
				margin_left = 10

				tiny_flag = {
					parentanchor = vcenter
				}

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					text = "STATE_RIGHT_CLICK_MENU_COUNTRY_TITLE"
				}

				button_icon_goto = {
					parentanchor = vcenter
					size = { 28 28 }
					onclick = "[InformationPanelBar.OpenCountryPanelTab(Country.Self, 'default')]"
					tooltip = "GO_TO_BUTTON_COUNTRY"
					input_action = "go_to_details"
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				margin_right = 10
				spacing = 5

				button_icon_zoom = {
					parentanchor = vcenter
					size = { 28 28 }
					tooltip = "ZOOM_TO_CAPITAL_STATE"
					onclick = "[Country.AccessCapital.ZoomToCapital]"
					enabled = "[Not( Country.AccessCapital.IsZoomingToCapital )]"
				}

				button_icon_toggle_pin = {
					parentanchor = vcenter
					size = { 28 28 }

					blockoverride "tooltip" {
						tooltip = "COUNTRY_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
					}

					blockoverride "view_1" {
						visible = "[Not(Country.IsPinnedInOutliner)]"
					}

					blockoverride "view_2" {
						visible = "[Country.IsPinnedInOutliner]"
					}

					blockoverride "on_click" {
						onclick = "[Country.TogglePinInOutliner]"
					}
				}
			}
		}

		widget = { size = { 4 4 }} #pixelpushing tweak for flag, hack due to parentanchor and margins interacting weird

		country_right_click_menu_items = {}

		container = {
			minimumsize = { 460 -1 }

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5
				margin_left = 10
				margin_top = 20

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					text = "STATE_RIGHT_CLICK_MENU_STATE_TITLE"
				}

				button_icon_goto = {
					parentanchor = vcenter
					size = { 28 28 }
					onclick = "[InformationPanelBar.OpenStatePanel( State.AccessSelf )]"
					tooltip = "GO_TO_BUTTON_STATE"
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				margin_right = 10
				spacing = 5

				onmousehierarchyenter = "[SetCanOpenRightClickContextMenu( '(bool)no' )]"
				onmousehierarchyleave = "[SetCanOpenRightClickContextMenu( '(bool)yes' )]"

				button_icon_zoom = {
					onclick = "[State.ZoomToCapital]"
					onrightclick = "[GetVariableSystem.Toggle('zoom_close_to_capital')]"
					visible = "[Not(GetVariableSystem.Exists('zoom_close_to_capital'))]"

					tooltip = "ZOOM_TO_STATE"
					input_action = "zoom_to"
					size = { 28 28 }
				}

				button_icon_zoom = {
					onclick = "[State.ZoomExtraCloseToCapital]"
					onrightclick = "[GetVariableSystem.Toggle('zoom_close_to_capital')]"
					visible = "[GetVariableSystem.Exists('zoom_close_to_capital')]"

					tooltip = "ZOOM_CLOSE_TO_STATE"
					input_action = "zoom_to"
					size = { 28 28 }
				}

				button_icon_toggle_pin = {
					visible = "[Country.IsLocalPlayer]"
					parentanchor = vcenter
					size = { 28 28 }

					blockoverride "tooltip" {
						tooltip = "STATE_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
					}

					blockoverride "view_1" {
						visible = "[Not(State.IsPinnedInOutliner)]"
					}

					blockoverride "view_2" {
						visible = "[State.IsPinnedInOutliner]"
					}

					blockoverride "on_click" {
						onclick = "[State.TogglePinInOutliner]"
					}
				}
			}
		}

		right_click_menu_item = {
			visible = "[IsPotential( State.IncorporateState )]"
			blockoverride "properties" {
				enabled = "[IsValid( State.IncorporateState )]"
				onclick = "[Execute( State.IncorporateState )]"
				tooltip = "TOOLTIP_INCORPORATE_STATE"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/state_status_icons/incorporated_state.dds"
			}

			blockoverride "text" {
				text = "STATE_RIGHT_CLICK_MENU_INCORPORATE"
			}
		}

		right_click_menu_item = {
			visible = "[IsValid(State.UnincorporateState)]"
			blockoverride "properties" {
				onclick = "[PopupManager.AskConfirmation( State.UnincorporateState )]"
				tooltip = "TOOLTIP_CANCEL_INCORPORATION"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/state_status_icons/unincorporated_state.dds"
			}

			blockoverride = "text" {
				text = "STATE_RIGHT_CLICK_MENU_CANCEL_INCORPORATION"
			}
		}

		### SET STRATEGIC OBJECTIVE
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "STATE_SET_STRATEGIC_OBJECTIVE_TOOLTIP"
				visible = "[HasValidSelectedFormationsToSetStrategicObjective(State.Self)]"
				enabled = "[IsValid(SetStrategicObjectiveForSelectedFormations(State.Self))]"
				onclick = "[Execute(SetStrategicObjectiveForSelectedFormations(State.Self))]"
			}

			blockoverride "sound" {
				clicksound = "event:/SFX/UI/Military/strategic_objective_confirm"
			}

			blockoverride "margin" {
				margin_left = 55
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/formation_order_icons/strategic_objective.dds"
			}

			blockoverride "text" {
				text = "STATE_SET_STRATEGIC_OBJECTIVE"
			}
		}

		### CANCEL STRATEGIC OBJECTIVE
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "STATE_CANCEL_STRATEGIC_OBJECTIVE_TOOLTIP"
				visible = "[HasValidSelectedFormationsToCancelStrategicObjective(State.Self)]"
				enabled = "[IsValid(SetStrategicObjectiveForSelectedFormations(State.Self))]"
				onclick = "[Execute(SetStrategicObjectiveForSelectedFormations(State.Self))]"
			}

			blockoverride "sound" {
				clicksound = "event:/SFX/UI/Military/strategic_objective_confirm"
			}

			blockoverride "margin" {
				margin_left = 55
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/formation_order_icons/strategic_objective.dds"
			}

			blockoverride "text" {
				text = "STATE_CANCEL_STRATEGIC_OBJECTIVE"
			}
		}

        right_click_menu_item = {
            blockoverride "properties" {
                tooltip = "[State.GetPlanInvasionDesc]"
                enabled = "[State.IsValidInvasionTarget]"
                visible = "[State.GetCountry.IsAtWarWith(GetPlayer.Self)]"
                onclick = "[PopupManager.ShowInvasionPlannerPopup(State.Self)]"
            }

            blockoverride "margin" {
                margin_left = 55
            }

            blockoverride "texture" {
                texture = "gfx/interface/icons/formation_order_icons/naval_invasion.dds"
            }

            blockoverride "text" {
                text = "plan_invasion_lens_option"
            }
        }

		### COLONIZE
		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "[State.GetStateRegion.GetColonizeTooltip]"
				visible = "[IsValid( State.GetStateRegion.Colonize )]"
				onclick = "[GetLensToolbar.ActivateOption( 'establish_colony' )]"
				onclick = "[PopupManager.ExecuteOrAskConfirmationIfNeeded( State.GetStateRegion.Colonize )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/establish_colony.dds"
			}

			blockoverride "text" {
				text = "STATE_RIGHT_CLICK_MENU_COLONIZE"
			}
		}

		### DECREES
		right_click_menu_dropdown = {
			visible = "[And(Or(Not(IsDataModelEmpty(State.AccessDecrees)), Not(IsDataModelEmpty(State.GetPotentialDecrees))), State.GetCountry.IsLocalPlayer)]"

			blockoverride "section_header_tooltip" {
				tooltip = "DECREES_IN_STATE"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "concept_decrees"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [Add_int32(GetDataModelSize(State.AccessDecrees), GetDataModelSize(State.GetPotentialDecrees))]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_state_decrees_in_right_click_menus')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_state_decrees_in_right_click_menus'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_state_decrees_in_right_click_menus')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_state_decrees_in_right_click_menus')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[State.AccessDecrees]"
			}

			blockoverride "properties" {
				onclick = "[Execute(Decree.GetRemoveCommand)]"
				enabled = "[IsValid(Decree.GetRemoveCommand)]"
				tooltip = "[Decree.GetTooltip]"
				visible = "[ObjectsEqual(Decree.GetCountry.Self, GetPlayer.Self)]"
				onclick = "[GetVariableSystem.Toggle('show_state_decrees_in_right_click_menus')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "texture" {
				texture = "[Decree.GetTexture]"
			}

			blockoverride "text" {
				text = "DECREE_REMOVE"
			}

			blockoverride "item_margin" {
				margin_left = 55
			}

			blockoverride "additional_dropdown_items_after_gridbox" {
				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_state_decrees_in_right_click_menus')]"
					datamodel = "[State.GetPotentialDecrees]"

					item = {
						right_click_menu_item = {
							blockoverride "properties" {
								onclick = "[Execute(DecreeType.GetSetCommand(State.Self))]"
								enabled = "[IsValid(DecreeType.GetSetCommand(State.Self))]"
								tooltip = "[DecreeType.GetTooltipForState( State.Self )]"
								onclick = "[GetVariableSystem.Toggle('show_state_decrees_in_right_click_menus')]" # This is here in order to not close the dropdown when clicked.
							}

							blockoverride "margin" {
								margin_left = 55
							}

							blockoverride "text" {
								text = "[DecreeType.GetName]"
							}

							blockoverride "texture" {
								texture = "[DecreeType.GetTexture]"
							}
						}
					}
				}
			}
		}

		### ALL GENERAL DIPLOMATIC DEMANDS TARGETING THIS STATE
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(State.GetPotentialDiploPlays))]"

			blockoverride "section_header_tooltip" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_STATE_DIPLOMATIC_DEMANDS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "DIPLOMATIC_DEMANDS_IN_STATE_TEXT"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(State.GetPotentialDiploPlays)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_state_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_state_diplomatic_demands_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_state_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_state_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[State.GetPotentialDiploPlays]"
			}

			blockoverride "properties" {
				tooltip = "[DiplomaticPlayType.GetStartTooltipState(GetPlayer,State.Self)]"
				onclick = "[DiplomaticPlayType.ShowConfirmationState(State.Self)]"
				using = confirm_button_sound
				onclick = "[GetVariableSystem.Toggle('show_state_diplomatic_demands_right_click_menu')]" # This is here in order to not close the dropdown when clicked.
				onclick = "[RightClickMenuManager.Close]"
			}

			blockoverride "texture" {
				texture = "[DiplomaticPlayType.GetTexture]"
			}

			blockoverride "text" {
				text = "[DiplomaticPlayType.GetName]"
			}

			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		right_click_menu_item = {
			visible = "[GetMetaPlayer.IsObserver]"
			datacontext = "[State.AccessOwner]"

			blockoverride "properties" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_OBSERVE_TOOLTIP"
				onclick = "[ToggleObserveCountry(Country.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/observer_mode_icon.dds"
			}

			blockoverride "text" {
				text = "COUNTRY_RIGHT_CLICK_MENU_OBSERVE"
			}
		}

		textbox = {
			text = "STATE_RIGHT_CLICK_MENU_STRATEGIC_REGION_TITLE"
			autoresize = yes
			align = left|nobaseline
			margin_top = 15
			margin_bottom = 2
			using = right_click_menu_title_margin_left
			visible = "[IsValid( GetPlayer.DeclareInterest( State.GetStateRegion.GetStrategicRegion ) )]"
		}

		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "[SelectLocalization( GetPlayer.HasDeclaredInterest( State.GetStateRegion.GetStrategicRegion ), 'STATE_RIGHT_CLICK_MENU_REVOKE_INTEREST_TOOLTIP', 'STATE_RIGHT_CLICK_MENU_DECLARE_INTEREST_TOOLTIP' )]"
				visible = "[IsValid( GetPlayer.DeclareInterest( State.GetStateRegion.GetStrategicRegion ) )]"
				onclick = "[Execute( GetPlayer.DeclareInterest( State.GetStateRegion.GetStrategicRegion ) )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/lens_toolbar_icons/declare_interest.dds"
			}

			blockoverride "text" {
				text = "[SelectLocalization( GetPlayer.HasDeclaredInterest( State.GetStateRegion.GetStrategicRegion ), 'STATE_RIGHT_CLICK_MENU_REVOKE_INTEREST', 'STATE_RIGHT_CLICK_MENU_DECLARE_INTEREST' )]"
			}
		}
	}
}

types country_right_click_menu {
	type country_right_click_menu_items = flowcontainer {
		direction = vertical

		right_click_menu_item = {
			visible = "[Not(Country.IsLocalPlayer)]"

			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenCountryPanelTab(Country.Self, 'diplomacy')]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/main_hud/dip_btn.dds"
			}

			blockoverride = "text" {
				text = "STATE_RIGHT_CLICK_MENU_DIPLOMACY"
			}
		}

		### DRAFT A TOTALLY NEW TREATY
		right_click_menu_item = {
			visible = "[Not(Country.IsLocalPlayer)]"
			tooltip = "TREATY_CAN_SIGN_WITH"

			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenTreatyDraftPanelForNewDraft(GetPlayer.Self, Country.Self)]"
				enabled = "[GetPlayer.CanSignTreatyWith(Country.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/diplomatic_treaties.dds"
			}

			blockoverride "text" {
				text = "DRAFT_A_TREATY"
			}
		}

		### KICK BLOC MEMBER
		right_click_menu_item = {
			visible = "[Country.GetPowerBloc.IsLeader(GetPlayer.Self)]"
			tooltip = "POWER_BLOC_KICK_MEMBER_TOOLTIP"

			blockoverride "properties" {
				onclick = "[PopupManager.AskConfirmation(Country.GetPowerBloc.Kick(Country.Self))]"
				enabled = "[IsValid(Country.GetPowerBloc.Kick(Country.Self))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/kick_out.dds"
			}

			blockoverride = "text" {
				text = "POWER_BLOC_KICK_MEMBER"
			}
		}

		### SUBJECT ---> OVERLORD INTERACTIONS
		right_click_menu_dropdown = {
			visible = "[GetPlayer.IsSubjectOf(Country.Self)]"

			blockoverride "section_header_tooltip" {
				tooltip = "AVAILABLE_SUBJECT_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "SUBJECT_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllSubjectDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_subject_actions_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_subject_actions_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_subject_actions_right_click_menu')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_subject_actions_right_click_menu')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllSubjectDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_subject_actions_right_click_menu')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}

			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		### POWER BLOC LEADER INTERACTIONS
		right_click_menu_dropdown = {
			visible = "[And(GetPlayer.GetPowerBloc.IsLeader(GetPlayer.Self), Not(IsDataModelEmpty(Country.GetAllPowerBlocLeaderDiploActions)))]"

			blockoverride "section_header_tooltip" {
				tooltip = "AVAILABLE_BLOC_LEADER_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "BLOC_LEADER_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllPowerBlocLeaderDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_bloc_leader_actions_right_click_dropdown')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_bloc_leader_actions_right_click_dropdown'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_bloc_leader_actions_right_click_dropdown')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_bloc_leader_actions_right_click_dropdown')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllPowerBlocLeaderDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_bloc_leader_actions_right_click_dropdown')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}

			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		### POWER BLOC MEMBER INTERACTIONS
		right_click_menu_dropdown = {
			visible = "[And(GetPlayer.GetPowerBloc.IsMember(Country.Self), Not(IsDataModelEmpty(Country.GetAllPowerBlocMemberDiploActions)))]"

			blockoverride "section_header_tooltip" {
				tooltip = "AVAILABLE_BLOC_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "BLOC_MEMBER_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllPowerBlocMemberDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_bloc_member_actions_right_click_dropdown')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_bloc_member_actions_right_click_dropdown'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_bloc_member_actions_right_click_dropdown')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_bloc_member_actions_right_click_dropdown')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllPowerBlocMemberDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_bloc_member_actions_right_click_dropdown')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}

			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		### OVERLORD ---> SUBJECT INTERACTIONS
		right_click_menu_dropdown = {
			visible = "[Country.IsSubjectOf(GetPlayer.Self)]"

			blockoverride "section_header_tooltip" {
				tooltip = "AVAILABLE_OVERLORD_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "OVERLORD_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllOverlordDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_overlord_actions_right_click_dropdown')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_overlord_actions_right_click_dropdown'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_overlord_actions_right_click_dropdown')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_overlord_actions_right_click_dropdown')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllOverlordDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_overlord_actions_right_click_dropdown')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}

			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		### ACTIVE TREATIES
		right_click_menu_dropdown = {
			visible = "[And(Not(IsDataModelEmpty(Country.GetTreatiesWith(GetPlayer.Self))), Not(Country.IsLocalPlayer))]"

			blockoverride "section_header_tooltip" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_ACTIVE_TREATIES_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "ACTIVE_TREATIES"
			}

			blockoverride "section_header_right_text" {
				flowcontainer = {
					spacing = 5

					flowcontainer = {
						parentanchor = vcenter
						spacing = 2
						datamodel = "[Country.GetUnenforcedTreatiesWith(GetPlayer.Self)]"

						item = {
							flowcontainer = {
								datamodel = "[Treaty.GetMutualAgreements]"

								item = {
									article_icon_all_items = {
										blockoverride "article_size" {
											size = { 30 30 }
										}

										blockoverride "icon_size" {
											size = { 30 30 }
										}
									}
								}
							}
						}
					}

					flowcontainer = {
						visible = "[Not(IsDataModelEmpty(Country.GetEnforcedTreatiesWith(GetPlayer.Self)))]"
						parentanchor = vcenter
						spacing = 2
						margin_right = 10

						icon = {
							parentanchor = vcenter
							size = { 30 27 }
							texture = "gfx/interface/outliner/war_button_icon.dds"
						}

						textbox = {
							parentanchor = vcenter
							autoresize = yes
							elide = right
							alwaystransparent = yes
							fontsize_min = 12
							raw_text = "#v [GetDataModelSize(Country.GetEnforcedTreatiesWith(GetPlayer.Self))]#!"
						}
					}

					flowcontainer = {
						parentanchor = vcenter
						spacing = 2
						margin_right = 10
						alpha = "[TransparentIfTrue(IsDataModelEmpty(Country.GetUnenforcedTreatiesWith(GetPlayer.Self)))]"

						icon = {
							parentanchor = vcenter
							size = { 30 30 }
							texture = "gfx/interface/icons/generic_icons/diplomatic_treaties.dds"
						}

						textbox = {
							parentanchor = vcenter
							autoresize = yes
							elide = right
							alwaystransparent = yes
							fontsize_min = 12
							raw_text = "#v [GetDataModelSize(Country.GetUnenforcedTreatiesWith(GetPlayer.Self))]#!"
						}
					}
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_active_treaties_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_active_treaties_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_active_treaties_right_click_menu')]"
			}

			blockoverride "dropdown_items" {
				### TREATIES
				flowcontainer = {
					visible = "[GetVariableSystem.Exists('show_active_treaties_right_click_menu')]"
					direction = vertical
					spacing = 2

					### ENFORCED TREATIES WITH THIS COUNTRY - LIST
					flowcontainer = {
						visible = "[Not(IsDataModelEmpty(Country.GetEnforcedTreatiesWith(GetPlayer.Self)))]"
						parentanchor = hcenter
						direction = vertical
						spacing = 2
						datamodel = "[Country.GetEnforcedTreatiesWith(GetPlayer.Self)]"

						item = {
							container = {
								compact_treaty_item = {
									visible = "[Not(Treaty.IsEnforced)]"

									blockoverride "treaty_item_size" {
										size = { 460 35 }
									}

									blockoverride "treaty_item_minimumsize" {
										minimumsize = { 460 50 }
									}

									blockoverride "treaty_name_max_width" {
										max_width = 230
									}
								}

								compact_war_reparation_treaty_item = {
									visible = "[Treaty.IsEnforced]"

									blockoverride "treaty_item_size" {
										size = { 460 35 }
									}

									blockoverride "treaty_item_minimumsize" {
										minimumsize = { 460 50 }
									}

									blockoverride "treaty_name_max_width" {
										max_width = 230
									}
								}
							}
						}
					}

					### NOT ENFORCED TREATIES WITH THIS COUNTRY - LIST
					flowcontainer = {
						visible = "[Not(IsDataModelEmpty(Country.GetUnenforcedTreatiesWith(GetPlayer.Self)))]"
						parentanchor = hcenter
						direction = vertical
						spacing = 2
						datamodel = "[Country.GetUnenforcedTreatiesWith(GetPlayer.Self)]"

						item = {
							container = {
								compact_treaty_item = {
									visible = "[Not(Treaty.IsEnforced)]"

									blockoverride "treaty_item_size" {
										size = { 460 35 }
									}

									blockoverride "treaty_item_minimumsize" {
										minimumsize = { 460 50 }
									}

									blockoverride "treaty_name_max_width" {
										max_width = 230
									}
								}

								compact_war_reparation_treaty_item = {
									visible = "[Treaty.IsEnforced]"

									blockoverride "treaty_item_size" {
										size = { 460 35 }
									}

									blockoverride "treaty_item_minimumsize" {
										minimumsize = { 460 50 }
									}

									blockoverride "treaty_name_max_width" {
										max_width = 230
									}
								}
							}
						}
					}
				}
			}
		}

		### GENERAL DIPLOMATIC ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetAllGeneralDiploActions))]"

			blockoverride "section_header_tooltip" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_DIPLOMATIC_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "DIPLOMATIC_ACTIONS_TEXT"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetAllGeneralDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_diplomatic_actions_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_diplomatic_actions_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_diplomatic_actions_right_click_menu')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_diplomatic_actions_right_click_menu')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetAllGeneralDiploActions]"
			}

			blockoverride "properties" {
				using = diplomatic_action_button_properties
				onclick = "[GetVariableSystem.Toggle('show_potential_diplomatic_actions_right_click_menu')]" # This is here in order to not close the dropdown when clicked.
			}

			blockoverride "rclick_item_after_label" {
				using = diplomatic_action_button_after_label
			}

			blockoverride "sound" {
				using = generic_diplomatic_action_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticAction.GetType.GetTexture]"
			}

			blockoverride "text" {
				text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			}

			blockoverride "item_margin" {
				margin_left = 55
			}
		}

		### ALL GENERAL DIPLOMATIC DEMANDS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialDiploPlays))]"

			blockoverride "section_header_tooltip" {
				tooltip = "COUNTRY_RIGHT_CLICK_MENU_DIPLOMATIC_DEMANDS_TOOLTIP"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialDiploPlays)]#!"
				}
			}

			blockoverride "section_header_size" {
				size = { 460 44 }
			}

			blockoverride "left_text" {
				text = "DIPLOMATIC_DEMANDS_TEXT"
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_diplomatic_demands_right_click_menu'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_diplomatic_demands_right_click_menu')]"
			}

			blockoverride "dropdown_datamodel" {
				datamodel = "[Country.GetPotentialDiploPlays]"
			}

			blockoverride "properties" {
				tooltip = "[DiplomaticPlayType.GetStartTooltipCountry(GetPlayer, Country.Self)]"
				onclick = "[DiplomaticPlayType.ShowConfirmationCountry(Country.Self)]"
				onclick = "[GetVariableSystem.Toggle('show_potential_diplomatic_demands_right_click_menu')]" # This is here in order to not close the dropdown when clicked.
				onclick = "[RightClickMenuManager.Close]"
			}

			blockoverride "sound" {
				using = diplomatic_play_confirmation_sound
			}

			blockoverride "texture" {
				texture = "[DiplomaticPlayType.GetTexture]"
			}

			blockoverride "text" {
				text = "[DiplomaticPlayType.GetName]"
			}

			blockoverride "item_margin" {
				margin_left = 55
			}
		}
	}
}

right_click_menu = {
	name = "country_right_click_menu"

	blockoverride "title_text" {
		text = "STATE_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "header_text" {} #no header for state menu, handle in items instead

	blockoverride "items" {
		container = {
			minimumsize = { 460 -1 }

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5
				margin_left = 10

				tiny_flag = {
					parentanchor = vcenter
				}

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = left|nobaseline
					text = "STATE_RIGHT_CLICK_MENU_COUNTRY_TITLE"
				}

				button_icon_goto = {
					parentanchor = vcenter
					size = { 28 28 }
					onclick = "[InformationPanelBar.OpenCountryPanelTab(Country.Self, 'default')]"
					tooltip = "GO_TO_BUTTON_COUNTRY"
					input_action = "go_to_details"
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				margin_right = 10
				spacing = 5

				button_icon_zoom = {
					parentanchor = vcenter
					size = { 28 28 }
					tooltip = "ZOOM_TO_CAPITAL_STATE"
					onclick = "[Country.AccessCapital.ZoomToCapital]"
					enabled = "[Not( Country.AccessCapital.IsZoomingToCapital )]"
				}

				button_icon_toggle_pin = {
					parentanchor = vcenter
					size = { 28 28 }

					blockoverride "tooltip" {
						tooltip = "COUNTRY_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
					}

					blockoverride "view_1" {
						visible = "[Not(Country.IsPinnedInOutliner)]"
					}

					blockoverride "view_2" {
						visible = "[Country.IsPinnedInOutliner]"
					}

					blockoverride "on_click" {
						onclick = "[Country.TogglePinInOutliner]"
					}
				}
			}
		}

		widget = { size = { 4 4 }} #pixelpushing tweak for flag, hack due to parentanchor and margins interacting weird

		country_right_click_menu_items = {}

		widget = { size = { 10 10 }}

		right_click_menu_item = {
			visible = "[GetMetaPlayer.IsObserver]"
			blockoverride "properties" {

				tooltip = "COUNTRY_RIGHT_CLICK_MENU_OBSERVE_TOOLTIP"
				onclick = "[ToggleObserveCountry(Country.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/observer_mode_icon.dds"
			}

			blockoverride "text" {
				text = "COUNTRY_RIGHT_CLICK_MENU_OBSERVE"
			}
		}
	}
}

right_click_menu = {
	name = "political_movement_right_click_menu"

	blockoverride "title_text" {
		text = "[PoliticalMovement.GetName]"
	}

	blockoverride "header_text" {} #no header for political movement menu, handle in items instead

	blockoverride "items" {
		container = {
			minimumsize = { 460 -1 }

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5
				margin_left = 10

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					text = "[PoliticalMovement.GetName]"
				}

				button_icon_goto = {
					parentanchor = vcenter
					size = { 28 28 }
					onclick = "[InformationPanelBar.OpenPoliticalMovementPanel(PoliticalMovement.AccessSelf)]"
					tooltip = "GO_TO_BUTTON_MOVEMENT"
					input_action = "go_to_details"
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				margin_right = 10
				spacing = 5

				button_icon_toggle_pin = {
					parentanchor = vcenter
					size = { 28 28 }

					blockoverride "tooltip" {
						tooltip = "POLITICAL_MOVEMENT_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
					}

					blockoverride "view_1" {
						visible = "[Not(PoliticalMovement.IsPinnedInOutliner)]"
					}

					blockoverride "view_2" {
						visible = "[PoliticalMovement.IsPinnedInOutliner]"
					}

					blockoverride "on_click" {
						onclick = "[PoliticalMovement.TogglePinInOutliner]"
					}
				}
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "TOOLTIP_SUPPRESS"
				visible = "[Not( PoliticalMovement.IsSuppressed )]"
				enabled = "[IsValid( PoliticalMovement.ToggleSuppression )]"
				onclick = "[Execute( PoliticalMovement.ToggleSuppression )]"
				using = suppress_button_sound
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
			}

			blockoverride = "text" {
				text = "RIGHT_CLICK_MENU_SUPPRESS"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "TOOLTIP_SUPPRESS_NOT"
				visible = "[PoliticalMovement.IsSuppressed]"
				enabled = "[IsValid( PoliticalMovement.ToggleSuppression )]"
				onclick = "[Execute( PoliticalMovement.ToggleSuppression )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/ig_suppress.dds"
			}

			blockoverride = "text" {
				text = "RIGHT_CLICK_MENU_SUPPRESS_NOT"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "TOOLTIP_BOLSTER"
				visible = "[Not( PoliticalMovement.IsBolstered )]"
				enabled = "[IsValid( PoliticalMovement.ToggleBolstering )]"
				onclick = "[Execute( PoliticalMovement.ToggleBolstering )]"
				using = bolster_button_sound
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
			}

			blockoverride = "text" {
				text = "RIGHT_CLICK_MENU_BOLSTER"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				tooltip = "TOOLTIP_BOLSTER_NOT"
				visible = "[PoliticalMovement.IsBolstered]"
				enabled = "[IsValid( PoliticalMovement.ToggleBolstering )]"
				onclick = "[Execute( PoliticalMovement.ToggleBolstering )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/ig_bolster.dds"
			}

			blockoverride = "text" {
				text = "RIGHT_CLICK_MENU_BOLSTER_NOT"
			}
		}
	}
}

right_click_menu = {
	name = "power_bloc_right_click_menu"

	blockoverride "title_text" {
		text = "[PowerBloc.GetName]"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenPowerBlocPanel(PowerBloc.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}

			blockoverride "text" {
				text = "INFORMATION"
			}
		}
	}
}

right_click_menu = {
	name = "diplomatic_play_right_click_menu"

	blockoverride "title_text" {
		text = "[DiplomaticPlay.GetName]"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenDiplomaticPlayPanelTab( DiplomaticPlay.AccessSelf, 'default' )]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}

			blockoverride "text" {
				text = "INFORMATION"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[DiplomaticPlay.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[DiplomaticPlay.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(DiplomaticPlay.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}

			blockoverride = "text" {
				text = "DIPLOMATIC_PLAY_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}
		}

		flowcontainer = {
			margin_top = 10
			direction = vertical

			# INITIATOR ACTIONS
			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
					enabled = "[DiplomaticPlay.CanSupportInitiator(GetPlayer)]"
					tooltip = "SUPPORT_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
					onclick = "[Execute(DiplomaticPlay.SupportInitiator(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
					mirror = horizontal
				}

				blockoverride = "text" {
					text = "SUPPORT_INITIATOR"
				}
			}

			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
					enabled = "[DiplomaticPlay.CanSupportInitiator(GetPlayer)]"
					tooltip = "SUPPORT_INITIATOR_DIPLOMATIC_PLAY_TOOLTIP"
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.SupportInitiator(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
					mirror = horizontal
				}

				blockoverride = "text" {
					text = "SUPPORT_INITIATOR"
				}
			}

			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))]"
					enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, DiplomaticPlay.GetInitiator)]"
					onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, DiplomaticPlay.GetInitiator )]"
					tooltip = "[DiplomaticPlay.GetCanSwayCountryDesc(GetPlayer.Self, DiplomaticPlay.GetInitiator)]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/information.dds"
				}

				blockoverride = "text" {
					text = "REVERSE_SWAY_INITIATOR"
				}
			}


			# TARGET ACTIONS
			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[DiplomaticPlay.IsUndecidedParticipant(GetPlayer)]"
					enabled = "[DiplomaticPlay.CanSupportTarget(GetPlayer)]"
					tooltip = "SUPPORT_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
					onclick = "[Execute(DiplomaticPlay.SupportTarget(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
				}

				blockoverride = "text" {
					text = "SUPPORT_TARGET"
				}
			}

			right_click_menu_item = {
				blockoverride "properties" {
					visible = "[DiplomaticPlay.IsBacker(GetPlayer)]"
					enabled = "[DiplomaticPlay.CanSupportTarget(GetPlayer)]"
					tooltip = "SUPPORT_TARGET_DIPLOMATIC_PLAY_TOOLTIP"
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.SupportTarget(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_supports.dds"
				}

				blockoverride = "text" {
					text = "SUPPORT_TARGET"
				}
			}

			right_click_menu_item = {
				blockoverride "properties" {
					enabled = "[DiplomaticPlay.CanSwayCountry(GetPlayer.Self, DiplomaticPlay.GetTarget)]"
					onclick = "[InformationPanelBar.OpenSwayCountryPanel( DiplomaticPlay.Self, DiplomaticPlay.GetTarget )]"
					tooltip = "[DiplomaticPlay.GetCanSwayCountryDesc(GetPlayer.Self, DiplomaticPlay.GetTarget)]"
					visible = "[Or(DiplomaticPlay.IsUndecidedParticipant(GetPlayer),DiplomaticPlay.IsBacker(GetPlayer))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/information.dds"
				}

				blockoverride = "text" {
					text = "REVERSE_SWAY_TARGET"
				}
			}
		}

		### ACTION BUTTONS
		flowcontainer = {
			visible = "[DiplomaticPlay.IsInvolved(GetPlayer)]"
			direction = vertical

			right_click_menu_item = {
				visible = "[And( DiplomaticPlay.IsInitiator(GetPlayer), Not( IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))))]"
				blockoverride "properties" {
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.Yield(GetPlayer))]"
					tooltip = "YIELD_DIPLOMATIC_PLAY_TOOLTIP"
					enabled = "[DiplomaticPlay.CanYield(GetPlayer)]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/capitulate.dds"
				}

				blockoverride = "text" {
					text = "DIPLO_PLAY_BACK_DOWN"
				}
			}

			right_click_menu_item = {
				visible = "[And( DiplomaticPlay.IsTarget(GetPlayer), Not( IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))))]"
				blockoverride "properties" {
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.Yield(GetPlayer))]"
					tooltip = "YIELD_DIPLOMATIC_PLAY_TOOLTIP"
					enabled = "[DiplomaticPlay.CanYield(GetPlayer)]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/capitulate.dds"
				}

				blockoverride = "text" {
					text = "DIPLO_PLAY_GIVE_IN"
				}
			}

			right_click_menu_item = {
				visible = "[IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))]"
				blockoverride "properties" {
					onclick = "[Execute( DiplomaticPlay.SwitchSide( GetPlayer ))]"
					tooltip = "DIPLOMATIC_PLAY_SWITCH_COUNTRY_TOOLTIP"
					enabled = "[IsValid( DiplomaticPlay.SwitchSide( GetPlayer ))]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/generic_icons/toggle.dds"
				}

				blockoverride = "text" {
					text = "DIPLOMATIC_PLAY_SWITCH_COUNTRY"
				}
			}

			right_click_menu_item = {
				visible = "[And( Not( DiplomaticPlay.IsInitiator(GetPlayer) ), Not( DiplomaticPlay.IsTarget(GetPlayer) ))]"
				blockoverride "properties" {
					onclick = "[PopupManager.AskConfirmation(DiplomaticPlay.DeclareNeutrality(GetPlayer))]"
					tooltip = "DECLARE_NEUTRALITY_DIPLOMATIC_PLAY_TOOLTIP"
					enabled = "[DiplomaticPlay.CanDeclareNeutrality(GetPlayer)]"
				}

				blockoverride "texture" {
					texture = "gfx/interface/icons/diplo_play_icons/stance_on_the_fence.dds"
				}

				blockoverride = "text" {
					text = "DIPLO_PLAY_DECLARE_NEUTRALITY"
				}
			}
		}
	}
}

right_click_menu = {
	name = "overlord_actions_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "OVERLORD_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		widget = {
			size = { 5 5 }
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.GetAllOverlordDiploActions)]"
			}
			blockoverride "text" {
				text = "NO_AVAILABLE_ACTIONS"
			}
		}

		dynamicgridbox = {
			datamodel = "[Country.GetAvailableOverlordDiploActions]"
			datamodel_wrap = 6
			flipdirection = yes

			item = {
				diplomatic_action_grid_button = {}
			}
		}

		widget = {
			size = { 10 10 }
		}

		### POTENTIAL OVERLORD ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialOverlordDiploActions))]"

			blockoverride "section_header_tooltip" {
				tooltip = "POTENTIAL_OVERLORD_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 600 44 }
			}

			blockoverride "left_text" {
				text = "POTENTIAL_OVERLORD_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialOverlordDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_overlord_actions')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_overlord_actions'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_overlord_actions')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_overlord_actions')]"
			}

			blockoverride "properties" {
				enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
				using = diplomatic_action_tooltip
			}

			blockoverride "dropdown_items" {

				widget = {
					size = { 5 5 }
				}

				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_potential_overlord_actions')]"
					datamodel = "[Country.GetPotentialOverlordDiploActions]"
					datamodel_wrap = 6
					flipdirection = yes

					item = {
						diplomatic_action_grid_button = {}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "subject_actions_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "SUBJECT_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.GetAllSubjectDiploActions)]"
			}
			blockoverride "text" {
				text = "NO_AVAILABLE_ACTIONS"
			}
		}

		dynamicgridbox = {
			visible = "[Not(IsDataModelEmpty(Country.GetAllSubjectDiploActions))]"
			datamodel = "[Country.GetAvailableSubjectDiploActions]"
			datamodel_wrap = 6
			flipdirection = yes

			item = {
				diplomatic_action_grid_button = {}
			}
		}

		widget = {
			size = { 10 10 }
		}

		### POTENTIAL SUBJECT ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialSubjectDiploActions))]"

			blockoverride "section_header_tooltip" {
				tooltip = "POTENTIAL_SUBJECT_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 600 44 }
			}

			blockoverride "left_text" {
				text = "POTENTIAL_SUBJECT_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialSubjectDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_subject_actions')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_subject_actions'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_subject_actions')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_subject_actions')]"
			}

			blockoverride "properties" {
				enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
				using = diplomatic_action_tooltip
			}

			blockoverride "dropdown_items" {

				widget = {
					size = { 5 5 }
				}

				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_potential_subject_actions')]"
					datamodel = "[Country.GetPotentialSubjectDiploActions]"
					datamodel_wrap = 6
					flipdirection = yes

					item = {
						diplomatic_action_grid_button = {}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "bloc_leader_actions_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "BLOC_LEADER_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.GetAllPowerBlocLeaderDiploActions)]"
			}
			blockoverride "text" {
				text = "NO_AVAILABLE_ACTIONS"
			}
		}

		dynamicgridbox = {
			datamodel = "[Country.GetAvailablePowerBlocLeaderDiploActions]"
			datamodel_wrap = 6
			flipdirection = yes

			item = {
				diplomatic_action_grid_button = {}
			}
		}

		widget = {
			size = { 10 10 }
		}

		### UNAVAILABLE BLOC LEADER ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialPowerBlocLeaderDiploActions))]"

			blockoverride "section_header_tooltip" {
				tooltip = "POTENTIAL_BLOC_LEADER_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 600 44 }
			}

			blockoverride "left_text" {
				text = "POTENTIAL_BLOC_LEADER_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialPowerBlocLeaderDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_bloc_actions')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_bloc_actions'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
			}

			blockoverride "properties" {
				enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
				using = diplomatic_action_tooltip
			}

			blockoverride "dropdown_items" {

				widget = {
					size = { 5 5 }
				}

				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
					datamodel = "[Country.GetPotentialPowerBlocLeaderDiploActions]"
					datamodel_wrap = 6
					flipdirection = yes

					item = {
						diplomatic_action_grid_button = {}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "treaty_draft_reset_menu"
	parentanchor = vcenter|right
	widgetanchor = vcenter

	blockoverride "title_text" {
		text = "RESET"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[TreatyDraft.ResetAll]"
				using = ui_notification_dismiss
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/reset.dds"
			}

			blockoverride "text" {
				text = "TREATY_RESET_ALL"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[TreatyDraft.ResetLeftSide]"
				using = ui_notification_dismiss
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/reset.dds"
			}

			blockoverride "text" {
				text = "TREATY_RESET_LEFT_SIDE"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[TreatyDraft.ResetRightSide]"
				using = ui_notification_dismiss
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/reset.dds"
			}

			blockoverride "text" {
				text = "TREATY_RESET_RIGHT_SIDE"
			}
		}
	}
}

right_click_menu = {
	name = "treaty_draft_bind_period_menu"
	parentanchor = bottom

	blockoverride "title_text" {
		text = "SELECT_BINDING_PERIOD"
	}

	blockoverride "items" {
		flowcontainer = {
			wrap_count = 3
			spacing = 5

			### 5 YEARS
			binding_period_button = {
				blockoverride "binding_button_onclick" {
					onclick = "[TreatyDraft.SetBindingDays('(int32)1825')]"
				}

				blockoverride "binding_button_visibility" {
					visible = "[Not(EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)1825'))]"
				}

				blockoverride "binding_active_visibility" {
					visible = "[EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)1825')]"
				}

				blockoverride "binding_button_text" {
					text = "BINDING_PERIOD_BUTTON_TEXT_5_YEARS"
				}
			}

			### 10 YEARS
			binding_period_button = {
				blockoverride "binding_button_onclick" {
					onclick = "[TreatyDraft.SetBindingDays('(int32)3650')]"
				}

				blockoverride "binding_button_visibility" {
					visible = "[Not(EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)3650'))]"
				}

				blockoverride "binding_active_visibility" {
					visible = "[EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)3650')]"
				}

				blockoverride "binding_button_text" {
					text = "BINDING_PERIOD_BUTTON_TEXT_10_YEARS"
				}
			}

			### 15 YEARS
			binding_period_button = {
				blockoverride "binding_button_onclick" {
					onclick = "[TreatyDraft.SetBindingDays('(int32)5475')]"
				}

				blockoverride "binding_button_visibility" {
					visible = "[Not(EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)5475'))]"
				}

				blockoverride "binding_active_visibility" {
					visible = "[EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)5475')]"
				}

				blockoverride "binding_button_text" {
					text = "BINDING_PERIOD_BUTTON_TEXT_15_YEARS"
				}
			}

			### 25 YEARS
			binding_period_button = {
				blockoverride "binding_button_onclick" {
					onclick = "[TreatyDraft.SetBindingDays('(int32)9125')]"
				}

				blockoverride "binding_button_visibility" {
					visible = "[Not(EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)9125'))]"
				}

				blockoverride "binding_active_visibility" {
					visible = "[EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)9125')]"
				}

				blockoverride "binding_button_text" {
					text = "BINDING_PERIOD_BUTTON_TEXT_25_YEARS"
				}
			}

			### 50 YEARS
			binding_period_button = {
				blockoverride "binding_button_onclick" {
					onclick = "[TreatyDraft.SetBindingDays('(int32)18250')]"
				}

				blockoverride "binding_button_visibility" {
					visible = "[Not(EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)18250'))]"
				}

				blockoverride "binding_active_visibility" {
					visible = "[EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)18250')]"
				}

				blockoverride "binding_button_text" {
					text = "BINDING_PERIOD_BUTTON_TEXT_50_YEARS"
				}
			}

			### 99 YEARS
			binding_period_button = {
				blockoverride "binding_button_onclick" {
					onclick = "[TreatyDraft.SetBindingDays('(int32)36135')]"
				}

				blockoverride "binding_button_visibility" {
					visible = "[Not(EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)36135'))]"
				}

				blockoverride "binding_active_visibility" {
					visible = "[EqualTo_int32(TreatyDraft.GetBindingDays, '(int32)36135')]"
				}

				blockoverride "binding_button_text" {
					text = "BINDING_PERIOD_BUTTON_TEXT_99_YEARS"
				}
			}
		}
	}
}

types treaty_binding_types {
	type binding_period_button = widget {
		size = { 90 40 }

		button = {
			block "binding_button_visibility" {}
			size = { 100% 100% }
			parentanchor = center
			using = default_button_action
			using = ui_notification_dismiss
			block "binding_button_onclick" {}
			onclick = "[RightClickMenuManager.Close]"

			textbox = {
				parentanchor = center
				align = nobaseline
				autoresize = yes
				using = elide_fontsize_min

				block "binding_button_text_max_width" {
					max_width = 70
				}

				block "binding_button_text" {
					raw_text = "999 years"
				}
			}
		}

		widget = {
			block "binding_active_visibility" {}
			size = { 100% 100% }
			parentanchor = center

			background = {
				using = paper_bg
			}

			textbox = {
				parentanchor = center
				align = nobaseline
				autoresize = yes
				using = elide_fontsize_min

				block "binding_button_text_max_width" {
					max_width = 70
				}

				block "binding_button_text" {
					raw_text = "999 years"
				}
			}

			icon = {
				using = highlighted_square_selection
			}
		}
	}
}

right_click_menu = {
	name = "article_input_right_click_menu_left"
	parentanchor = vcenter
	widgetanchor = vcenter|right
	close_on_click_outside = no

	blockoverride "header_text" {}

	blockoverride "fixed_top" {
		using = article_input_fixed_top
	}

	blockoverride "items" {
		using = article_input_items
	}

	blockoverride "resizeparent_without_fixed_bottom" {}

	blockoverride "scrollarea_maximumsize" {
		maximumsize = { -1 500 }
	}

	blockoverride "scrollarea_margins" {
		margin = { 8 0 }
		margin_top = 15
	}

	blockoverride "fixed_bottom" {
		using = article_input_fixed_bottom
	}
}

right_click_menu = {
	name = "article_input_right_click_menu_right"
	parentanchor = vcenter|right
	widgetanchor = vcenter
	close_on_click_outside = no

	blockoverride "header_text" {}

	blockoverride "fixed_top" {
		using = article_input_fixed_top
	}

	blockoverride "items" {
		using = article_input_items
	}

	blockoverride "resizeparent_without_fixed_bottom" {}

	blockoverride "scrollarea_maximumsize" {
		maximumsize = { -1 500 }
		minimumsize = { 500 -1 }
	}

	blockoverride "scrollarea_margins" {
		margin = { 8 0 }
		margin_top = 15
	}

	blockoverride "fixed_bottom" {
		using = article_input_fixed_bottom
	}
}

template article_input_fixed_top {
	default_header_clean_faded = {
		size = { 100% 44 }

		blockoverride "text" {
			text = "TREATY_ARTICLE_TYPE_TITLE"
		}
	}
}

template article_input_items {
	margin_bottom = 10
	datacontext = "[ArticleDraft.GetArticleType]"

	### STATE LIST
	article_input_state_list = {
		visible = "[ArticleDraft.RequiresInput('state')]"
		datamodel = "[ArticleDraft.GetValidStates]"
	}

	### STRATEGIC REGION LIST
	article_input_strategic_region_list = {
		visible = "[ArticleDraft.RequiresInput('strategic_region')]"
		datamodel = "[ArticleDraft.GetValidStrategicRegions]"
	}

	### GOODS LIST
	article_input_goods_list = {
		visible = "[ArticleDraft.RequiresInput('goods')]"
		datamodel = "[ArticleDraft.GetValidGoods]"
	}

	### COMPANY MONOPOLY
	article_input_company_monopoly = {
		visible = "[ArticleDraft.HasType('acquire_monopoly_for_company')]"
	}

	### LAW LIST
	article_input_law_list = {
		visible = "[ArticleDraft.HasType('law_commitment')]"
	}
}

template article_input_fixed_bottom {
	flowcontainer = {
		parentanchor = hcenter
		direction = vertical
		margin = { 8 0 }
		margin_bottom = 20
		spacing = 5
		minimumsize = { 400 -1 }
		datacontext = "[ArticleDraft.GetArticleType]"	

		divider_clean = {
			visible = "[Not(Or(ArticleDraft.HasType('bankroll'), ArticleDraft.HasType('money_transfer')))]"
			parentanchor = hcenter
		}

		flowcontainer = {
			parentanchor = hcenter
			direction = vertical

			### MONEY TRANSFER
			article_input_select_money = {
				visible = "[Or(ArticleDraft.HasType('bankroll'), ArticleDraft.HasType('money_transfer'))]"
			}

			### STATE
			selected_state = {
				visible = "[ArticleDraft.RequiresInput('state')]"
			}

			### STRATEGIC REGION
			selected_strategic_region = {
				visible = "[ArticleDraft.RequiresInput('strategic_region')]"
			}

			### PROHIBIT IMPORT/EXPORT WITH GLOBAL MARKET
			### NO TARIFFS
			### NO SUBVENTIONS
			selected_goods_generic = {
				visible = "[And(ArticleDraft.RequiresInput('goods'), Not(ArticleDraft.HasType('goods_transfer')))]"
			}

			### TRANSFER GOODS
			selected_goods_and_amount = {
				visible = "[ArticleDraft.HasType('goods_transfer')]"
			}

			### COMPANY MONOPOLY
			selected_company_and_building_type = {
				visible = "[ArticleDraft.HasType('acquire_monopoly_for_company')]"
			}

			### LAW
			selected_law = {
				visible = "[ArticleDraft.RequiresInput('law_type')]"
			}
		}

		divider_decorative = {
			parentanchor = hcenter
		}

		widget = {
			size = { 5 5 }
		}

		### ADD & CANCEL BUTTONS
		widget = {
			parentanchor = hcenter
			size = { 100% 50 }

			button = {
				parentanchor = vcenter
				size = { 140 50 }
				position = { 10 0 }
				using = default_button_action
				onclick = "[RightClickMenuManager.Close]"

				textbox = {
					parentanchor = center
					autoresize = yes
					align = nobaseline
					using = elide_fontsize_min
					max_width = 140
					text = "CANCEL"
				}
			}

			button = {
				visible = "[And( Not( PdxGuiWidget.HasContext( 'SwayOffer' ) ), WarGoal.IsValidDataContext )]"
				parentanchor = vcenter|right
				size = { 140 50 }
				position = { -10 0 }
				using = default_button_action
				using = tooltip_se
				enabled = "[And(And(ArticleDraft.IsPossible, ArticleDraft.CanAddWarGoal(GetPlayer.Self, WarGoal.GetDiplomaticPlay.Self)), ArticleDraft.HasAllRequiredInputsSet)]"
				onclick = "[WarGoal.SetArticleInputsFromDraft(ArticleDraft.Self)]"
				onclick = "[Execute(WarGoal.GetDiplomaticPlay.AddWarGoal(WarGoal.Self))]"
				onclick = "[InformationPanelBar.OpenPreviousPanel]"
				onclick = "[RightClickMenuManager.Close]"

				tooltipwidget = {
					RegularTooltip_WarGoalArticle = {
						blockoverride "primary_secondary_demand_text_visibility" {
							visible = no
						}
					}
				}

				textbox = {
					parentanchor = center
					position = { -15 0 }
					autoresize = yes
					align = nobaseline
					using = elide_fontsize_min
					max_width = 80
					text = "ADD"
				}

				flowcontainer = {
					parentanchor = vcenter|right
					direction = vertical
					position = { -10 0 }

					textbox = {
						visible = "[GreaterThan_CFixedPoint(ArticleDraft.GetWarGoalInfamyValue(GetPlayer.Self),'(CFixedPoint)0')]"
						parentanchor = right
						autoresize = yes
						align = nobaseline
						using = fontsize_small
						raw_text = "@infamy![ArticleDraft.GetWarGoalInfamyValue(GetPlayer.Self)|-1]"
					}

					textbox = {
						parentanchor = right
						autoresize = yes
						align = nobaseline
						using = fontsize_small
						text = "ADD_WARGOAL_MANEUVERS_COST"
					}
				}
			}

			button = {
				visible = "[And( TreatyDraft.IsValidDataContext, Not( WarGoal.IsValidDataContext ) )]"
				parentanchor = vcenter|right
				size = { 140 50 }
				position = { -10 0 }
				using = default_button_action
				using = tooltip_se
				tooltip = "ARTICLE_ADD_BUTTON_TOOLTIP"
				input_action = "confirm"
				enabled = "[TreatyDraft.CanIncludeArticleDraft(ArticleDraft.Self)]"
				onclick = "[TreatyDraft.AddArticleDraft(ArticleDraft.Self)]"
				onclick = "[RightClickMenuManager.Close]"

				textbox = {
					parentanchor = center
					autoresize = yes
					align = nobaseline
					using = elide_fontsize_min
					max_width = 140
					text = "ADD"
				}
			}

			button = {
				visible = "[And( PdxGuiWidget.HasContext( 'SwayOffer' ), WarGoal.IsValidDataContext )]"
				parentanchor = vcenter|right
				size = { 140 50 }
				position = { -10 0 }
				using = default_button_action
				using = tooltip_se
				enabled = "[And(And(ArticleDraft.IsPossible, ArticleDraft.CanAddWarGoal(GetPlayer.Self, WarGoal.GetDiplomaticPlay.Self)), ArticleDraft.HasAllRequiredInputsSet)]"
				onclick = "[SwayOffer.SetArticleInputsFromDraft(ArticleDraft.Self)]"
				onclick = "[Execute( SwayCountryPanel.AccessDiplomaticPlay.CreateSway( GetPlayer.Self, SwayCountryPanel.GetCountry, SwayOffer.Self ))]"
				onclick = "[InformationPanelBar.OpenDiplomaticPlayPanelTab( SwayCountryPanel.AccessDiplomaticPlay, 'default' )]"
				onclick = "[RightClickMenuManager.Close]"

				tooltipwidget = {
					RegularTooltip_WarGoalArticle = {
						blockoverride "primary_secondary_demand_text_visibility" {
							visible = no
						}
					}
				}

				textbox = {
					parentanchor = center
					autoresize = yes
					align = nobaseline
					using = elide_fontsize_min
					max_width = 140
					text = "ADD"
				}
			}

			flowcontainer = {
				visible = "[And(TreatyDraft.IsValidDataContext, ArticleDraft.HasAllRequiredInputsSet)]"
				parentanchor = center
				spacing = 5
				margin = { 10 10 }
				using = tooltip_se
				tooltip = "[ArticleDraft.GetAcceptanceBreakdown(TreatyDraft.GetRightCountry.Self)]"

				background = {
					using = simple_frame
				}

				treaty_draft_input_acceptance_icon = {}

				textbox = {
					parentanchor = vcenter
					autoresize = yes
					align = nobaseline
					max_width = 40
					using = elide_fontsize_min
					text = "[ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self)|+=0]"
				}
			}
		}
	}
}

types article_input_types
{
	type treaty_draft_input_acceptance_icon = icon {
		size = { 22 22 }

		icon = {
			block "approval_visibility" {
				visible = "[GreaterThan_int32(ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self), '(int32)0')]"
			}

			size = { 100% 100% }
			texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
		}

		icon = {
			block "disapproval_visibility" {
				visible = "[LessThan_int32(ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self), '(int32)0')]"
			}

			size = { 100% 100% }
			texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
		}

		icon = {
			block "undecided_visibility" {
				visible = "[EqualTo_int32(ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self), '(int32)0')]"
			}

			size = { 100% 100% }
			texture = "gfx/interface/icons/generic_icons/undecided_icon.dds"
		}
	}

	type treaty_draft_input_acceptance_button_icon = button {
		size = { 22 22 }
		alwaystransparent = yes

		button = {
			block "approval_visibility" {
				visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithGood(ArticleType.Self, Country.Self, Goods.Self), '(int32)0')]"
			}

			size = { 100% 100% }
			alwaystransparent = yes
			texture = "gfx/interface/icons/generic_icons/approval_icon.dds"
		}

		button = {
			block "disapproval_visibility" {
				visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithGood(ArticleType.Self, Country.Self, Goods.Self), '(int32)0')]"
			}
			
			size = { 100% 100% }
			alwaystransparent = yes
			texture = "gfx/interface/icons/generic_icons/disapproval_icon.dds"
		}

		button = {
			block "undecided_visibility" {
				visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithGood(ArticleType.Self, Country.Self, Goods.Self), '(int32)0')]"
			}

			size = { 100% 100% }
			alwaystransparent = yes
			texture = "gfx/interface/icons/generic_icons/undecided_icon.dds"
		}
	}

	### STATE LIST
	type article_input_state_list = dynamicgridbox {
		datamodel_wrap = 2
		flipdirection = yes

		item = {
			flowcontainer = {
				margin = { 2 2 }

				button = {
					visible = "[Not(ObjectsEqual(ArticleDraft.GetState.Self, State.Self))]"
					size = { 235 40 }
					using = default_button
					onclick = "[ArticleDraft.SetState(State.Self)]"

					tooltipwidget = {
						FancyTooltip_State = {
							blockoverride "tooltip_content_before" {
								flowcontainer = {
									spacing = 5
									tooltip = "[TreatyDraft.GetArticleTypeAcceptanceBreakdownWithState(ArticleType.Self, Country.Self, State.Self)]"

									treaty_draft_input_acceptance_icon = {
										blockoverride "approval_visibility" {
											visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithState(ArticleType.Self, Country.Self, State.Self), '(int32)0')]"
										}

										blockoverride "disapproval_visibility" {
											visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithState(ArticleType.Self, Country.Self, State.Self), '(int32)0')]"
										}

										blockoverride "undecided_visibility" {
											visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithState(ArticleType.Self, Country.Self, State.Self), '(int32)0')]"
										}
									}

									custom_tooltip_textbox = {
										parentanchor = vcenter
										max_width = 500
										default_format = "#tooltippable"
										text = "[TreatyDraft.GetArticleTypeAcceptanceWithState(ArticleType.Self, Country.Self, State.Self)|+=0]"
									}
								}
							}
						}
					}

					### ACCEPTANCE ICON - STATE - NOT SELECTED
					treaty_draft_input_acceptance_button_icon = {
						parentanchor = vcenter|right
						position = { -10 0 }

						blockoverride "approval_visibility" {
							visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithState(ArticleType.Self, Country.Self, State.Self), '(int32)0')]"
						}

						blockoverride "disapproval_visibility" {
							visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithState(ArticleType.Self, Country.Self, State.Self), '(int32)0')]"
						}

						blockoverride "undecided_visibility" {
							visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithState(ArticleType.Self, Country.Self, State.Self), '(int32)0')]"
						}
					}

					flowcontainer = {
						parentanchor = vcenter
						margin = { 10 0 }
						spacing = 10

						tiny_flag_no_interact = {
							parentanchor = vcenter
							datacontext = "[State.GetCountry]"
						}

						textbox = {
							parentanchor = vcenter
							align = nobaseline
							autoresize = yes
							using = elide_fontsize_min
							max_width = 140
							text = "[State.GetNameNoFormatting]"
						}
					}
				}

				widget = {
					visible = "[ObjectsEqual(ArticleDraft.GetState.Self, State.Self)]"
					size = { 235 40 }

					tooltipwidget = {
						FancyTooltip_State = {
							blockoverride "text_before" {
								text = "ARTICLE_SELECTED"
							}

							blockoverride "tooltip_content_before_before" {
								flowcontainer = {
									spacing = 5
									tooltip = "[ArticleDraft.GetAcceptanceBreakdown(TreatyDraft.GetRightCountry.Self)]"

									treaty_draft_input_acceptance_icon = {}

									custom_tooltip_textbox = {
										parentanchor = vcenter
										max_width = 500
										default_format = "#tooltippable"
										text = "[ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self)|+=0]"
									}
								}
							}
						}
					}

					background = {
						using = paper_bg
					}

					flowcontainer = {
						parentanchor = vcenter
						margin = { 10 0 }
						spacing = 10

						tiny_flag_no_interact = {
							parentanchor = vcenter
							datacontext = "[State.GetCountry]"
						}

						textbox = {
							parentanchor = vcenter
							align = nobaseline
							autoresize = yes
							using = elide_fontsize_min
							max_width = 140
							text = "[State.GetNameNoFormatting]"
						}
					}

					### ACCEPTANCE ICON - STATE - SELECTED
					treaty_draft_input_acceptance_icon = {
						parentanchor = vcenter|right
						position = { -10 0 }
					}

					icon = {
						using = highlighted_square_selection
					}
				}
			}
		}
	}

	### STRATEGIC REGION LIST
	type article_input_strategic_region_list = dynamicgridbox {
		datamodel_wrap = 2
		flipdirection = yes

		item = {
			flowcontainer = {
				margin = { 2 2 }

				button = {
					visible = "[Not(ObjectsEqual(ArticleDraft.GetStrategicRegion.Self, StrategicRegion.Self))]"
					size = { 200 40 }
					using = default_button
					onclick = "[ArticleDraft.SetStrategicRegion(StrategicRegion.Self)]"

					tooltipwidget = {
						FancyTooltip_StrategicRegion = {
							blockoverride "tooltip_content_before" {
								flowcontainer = {
									spacing = 5
									tooltip = "[TreatyDraft.GetArticleTypeAcceptanceBreakdownWithRegion(ArticleType.Self, Country.Self, StrategicRegion.Self)]"

									treaty_draft_input_acceptance_icon = {
										blockoverride "approval_visibility" {
											visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithRegion(ArticleType.Self, Country.Self, StrategicRegion.Self), '(int32)0')]"
										}

										blockoverride "disapproval_visibility" {
											visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithRegion(ArticleType.Self, Country.Self, StrategicRegion.Self), '(int32)0')]"
										}

										blockoverride "undecided_visibility" {
											visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithRegion(ArticleType.Self, Country.Self, StrategicRegion.Self), '(int32)0')]"
										}
									}

									custom_tooltip_textbox = {
										parentanchor = vcenter
										max_width = 500
										default_format = "#tooltippable"
										text = "[TreatyDraft.GetArticleTypeAcceptanceWithRegion(ArticleType.Self, Country.Self, StrategicRegion.Self)|+=0]"
									}
								}
							}
						}
					}

					### ACCEPTANCE ICON - STRATEGIC REGION - NOT SELECTED
					treaty_draft_input_acceptance_button_icon = {
						parentanchor = vcenter|right
						position = { -10 0 }

						blockoverride "approval_visibility" {
							visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithRegion(ArticleType.Self, Country.Self, StrategicRegion.Self), '(int32)0')]"
						}

						blockoverride "disapproval_visibility" {
							visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithRegion(ArticleType.Self, Country.Self, StrategicRegion.Self), '(int32)0')]"
						}

						blockoverride "undecided_visibility" {
							visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithRegion(ArticleType.Self, Country.Self, StrategicRegion.Self), '(int32)0')]"
						}
					}

					flowcontainer = {
						parentanchor = vcenter
						margin = { 10 0 }
						spacing = 10

						textbox = {
							parentanchor = vcenter
							align = nobaseline
							autoresize = yes
							using = elide_fontsize_min
							max_width = 140
							text = "[StrategicRegion.GetNameNoFormatting]"
						}
					}
				}

				widget = {
					visible = "[ObjectsEqual(ArticleDraft.GetStrategicRegion.Self, StrategicRegion.Self)]"
					size = { 200 40 }

					tooltipwidget = {
						FancyTooltip_StrategicRegion = {
							blockoverride "text_before" {
								text = "ARTICLE_SELECTED"
							}

							blockoverride "tooltip_content_before_before" {
								flowcontainer = {
									spacing = 5
									tooltip = "[ArticleDraft.GetAcceptanceBreakdown(TreatyDraft.GetRightCountry.Self)]"

									treaty_draft_input_acceptance_icon = {}

									custom_tooltip_textbox = {
										parentanchor = vcenter
										max_width = 500
										default_format = "#tooltippable"
										text = "[ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self)|+=0]"
									}
								}
							}
						}
					}

					background = {
						using = paper_bg
					}

					flowcontainer = {
						parentanchor = vcenter
						margin = { 10 0 }
						spacing = 10

						textbox = {
							parentanchor = vcenter
							align = nobaseline
							autoresize = yes
							using = elide_fontsize_min
							max_width = 140
							text = "[StrategicRegion.GetNameNoFormatting]"
						}
					}

					### ACCEPTANCE ICON - STRATEGIC REGION - SELECTED
					treaty_draft_input_acceptance_icon = {
						parentanchor = vcenter|right
						position = { -10 0 }
					}

					icon = {
						using = highlighted_square_selection
					}
				}
			}
		}
	}

	### GOODS LIST
	type article_input_goods_list = dynamicgridbox {
		datamodel_wrap = 4
		flipdirection = yes

		item = {
			container = {
				grid_button = {
					visible = "[Not(ObjectsEqual(ArticleDraft.GetGoods.Self, Goods.Self))]"
					using = tooltip_ne
					datacontext = "[ArticleDraft.GetArticleType]"

					tooltipwidget = {
						FancyTooltip_Goods = {
							blockoverride "goods_interactions" {}
							blockoverride "goods_trend" {}

							blockoverride "tooltip_content_before_before" {
								flowcontainer = {
									spacing = 5
									tooltip = "[TreatyDraft.GetArticleTypeAcceptanceBreakdownWithGood(ArticleType.Self, Country.Self, Goods.Self)]"

									treaty_draft_input_acceptance_button_icon = {}

									custom_tooltip_textbox = {
										parentanchor = vcenter
										max_width = 500
										default_format = "#tooltippable"
										text = "[TreatyDraft.GetArticleTypeAcceptanceWithGood(ArticleType.Self, Country.Self, Goods.Self)|+=0]"
									}
								}
							}

							### The below two blockoverrides is to always show the local player's market on the left
							blockoverride "state_price_card" {
								container = {
									visible = "[Not(WarGoal.IsValidDataContext)]"

									market_price_card = {
										visible = "[Country.IsLocalPlayer]"
									}

									market_price_card = {
										visible = "[Not(Country.IsLocalPlayer)]"
										datacontext = "[Goods.WithMarketContext(TreatyDraft.GetOtherCountry(Country.Self).GetMarket.Self)]"
									}
								}

								container = {
									visible = "[WarGoal.IsValidDataContext]"

									market_price_card = {
										datacontext = "[Goods.WithMarketContext(WarGoal.GetHolder.GetMarket.Self)]"
									}
								}
							}

							blockoverride "market_price_card" {
								container = {
									visible = "[Not(WarGoal.IsValidDataContext)]"

									market_price_card = {
										visible = "[Not(Country.IsLocalPlayer)]"
									}

									market_price_card = {
										visible = "[Country.IsLocalPlayer]"
										datacontext = "[Goods.WithMarketContext(TreatyDraft.GetOtherCountry(Country.Self).GetMarket.Self)]"
									}
								}

								container = {
									visible = "[WarGoal.IsValidDataContext]"

									market_price_card = {
										datacontext = "[Goods.WithMarketContext(WarGoal.GetTarget.GetMarket.Self)]"
									}
								}
							}
						}
					}

					blockoverride "min_width" {
						min_width = 100
					}

					blockoverride "properties" {
						onclick = "[ArticleDraft.SetGood(Goods.Self)]"
					}

					blockoverride "texture" {
						texture = "[Goods.GetTexture]"
					}

					blockoverride "text_middle" {
						text = "[Goods.GetNameNoFormatting]"
					}

					blockoverride "text_bottom" {
						widget = {
							size = { 100% 20 }
							parentanchor = bottom
							position = { 0 -3 }

							article_market_goods_numbers = {
								visible = "[Not(WarGoal.IsValidDataContext)]"
							}

							article_market_goods_numbers = {
								visible = "[WarGoal.IsValidDataContext]"

								blockoverride "left_market_number" {
									article_market_goods_balance_number = {
										datacontext = "[Goods.WithMarketContext(WarGoal.GetHolder.GetMarket.Self)]"
									}
								}

								blockoverride "right_market_number" {
									article_market_goods_balance_number = {
										datacontext = "[Goods.WithMarketContext(WarGoal.GetTarget.GetMarket.Self)]"
									}
								}
							}
						}
					}

					blockoverride "additional_widgets" {
						treaty_draft_input_acceptance_button_icon = {
							parentanchor = right
							position = { -5 5 }
						}
					}

					blockoverride "default_button" {
						using = default_button
					}
				}

				widget = {
					visible = "[ObjectsEqual(ArticleDraft.GetGoods.Self, Goods.Self)]"
					size = { -1 120 }
					min_width = 100
					using = tooltip_ne

					tooltipwidget = {
						FancyTooltip_Goods = {
							blockoverride "goods_interactions" {}
							blockoverride "goods_trend" {}

							blockoverride "goods_name" {
								text = "GOODS_NAME_ARTICLE_SELECTED"
							}

							blockoverride "tooltip_content_before_before" {
								flowcontainer = {
									spacing = 5
									tooltip = "[ArticleDraft.GetAcceptanceBreakdown(TreatyDraft.GetRightCountry.Self)]"

									treaty_draft_input_acceptance_icon = {}

									custom_tooltip_textbox = {
										parentanchor = vcenter
										max_width = 500
										default_format = "#tooltippable"
										text = "[ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self)|+=0]"
									}
								}
							}

							### The below two blockoverrides is to always show the local player's market on the left
							blockoverride "state_price_card" {
								container = {
									visible = "[Not(WarGoal.IsValidDataContext)]"

									market_price_card = {
										visible = "[Country.IsLocalPlayer]"
									}

									market_price_card = {
										visible = "[Not(Country.IsLocalPlayer)]"
										datacontext = "[Goods.WithMarketContext(TreatyDraft.GetOtherCountry(Country.Self).GetMarket.Self)]"
									}
								}

								container = {
									visible = "[WarGoal.IsValidDataContext]"

									market_price_card = {
										datacontext = "[Goods.WithMarketContext(WarGoal.GetHolder.GetMarket.Self)]"
									}
								}
							}

							blockoverride "market_price_card" {
								container = {
									visible = "[Not(WarGoal.IsValidDataContext)]"

									market_price_card = {
										visible = "[Not(Country.IsLocalPlayer)]"
									}

									market_price_card = {
										visible = "[Country.IsLocalPlayer]"
										datacontext = "[Goods.WithMarketContext(TreatyDraft.GetOtherCountry(Country.Self).GetMarket.Self)]"
									}
								}

								container = {
									visible = "[WarGoal.IsValidDataContext]"

									market_price_card = {
										datacontext = "[Goods.WithMarketContext(WarGoal.GetTarget.GetMarket.Self)]"
									}
								}
							}
						}
					}

					state = {
						name = _show
						alpha = 1
						duration = 0.1
						on_start = "[PdxGuiWidget.FindChild('goods_icon').InterruptThenTriggerAnimation('hide','show')]"
					}

					state = {
						name = _hide
						alpha = 0
						duration = 0.1
						using = Animation_Curve_Default
						on_start = "[PdxGuiWidget.FindChild('goods_icon').InterruptThenTriggerAnimation('show','hide')]"
					}


					background = {
						using = paper_bg
					}

					widget = {
						name = "goods_icon"
						parentanchor = hcenter
						size = { 50 50 }
						position = { 0 5 }

						state = {
							name = show
							size = { 60 60 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						state = {
							name = hide
							size = { 50 50 }
							duration = 0.2
							using = Animation_Curve_Default
						}

						icon = {
							parentanchor = center
							size = { 200% 200% }
							using = rotate_glow_animation_02
						}

						icon = {
							size = { 100% 100% }
							parentanchor = center
							texture = "[Goods.GetTexture]"
						}
					}

					textbox = {
						align = hcenter|nobaseline
						position = { 0 -16 }
						size = { 100% 50 }
						parentanchor = hcenter|bottom
						using = fontsize_small
						multiline = yes
						margin_left = 5
						margin_right = 5
						text = "[Goods.GetNameNoFormatting]"
					}

					widget = {
						size = { 100% 20 }
						parentanchor = bottom
						position = { 0 -5 }

						article_market_goods_numbers = {
								visible = "[Not(WarGoal.IsValidDataContext)]"
							}

						article_market_goods_numbers = {
							visible = "[WarGoal.IsValidDataContext]"

							blockoverride "left_market_number" {
								article_market_goods_balance_number = {
									datacontext = "[Goods.WithMarketContext(WarGoal.GetHolder.GetMarket.Self)]"
								}
							}

							blockoverride "right_market_number" {
								article_market_goods_balance_number = {
									datacontext = "[Goods.WithMarketContext(WarGoal.GetTarget.GetMarket.Self)]"
								}
							}
						}
					}

					### ACCEPTANCE ICON - GOODS - SELECTED
					treaty_draft_input_acceptance_icon = {
						parentanchor = right
						position = { -5 5 }
					}

					icon = {
						using = highlighted_square_selection
					}
				}
			}
		}
	}

	type article_market_goods_numbers = hbox {
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		margin = { 2 0 }

		### LOCAL PLAYER'S MARKET BALANCE - Should always be on the left
		block "left_market_number" {
			article_market_goods_balance_number = {
				visible = "[Country.IsLocalPlayer]"
			}

			article_market_goods_balance_number = {
				visible = "[Not(Country.IsLocalPlayer)]"
				datacontext = "[Goods.WithMarketContext(TreatyDraft.GetOtherCountry(Country.Self).GetMarket.Self)]"
				alpha = "[TransparentIfFalse(Or(GreaterThan_int32(FixedPointToInt(Goods.GetMarketSellOrders), '(int32)0'), GreaterThan_int32(FixedPointToInt(Goods.GetMarketBuyOrders), '(int32)0')))]"
			}
		}

		vertical_divider = {
			blockoverride "size" {
				layoutpolicy_vertical = expanding
				size = { 2 0 }
			}
		}

		### OTHER COUNTRY's MARKET BALANCE
		block "right_market_number" {
			article_market_goods_balance_number = {
				visible = "[Not(Country.IsLocalPlayer)]"
			}

			article_market_goods_balance_number = {
				visible = "[Country.IsLocalPlayer]"
				datacontext = "[Goods.WithMarketContext(TreatyDraft.GetOtherCountry(Country.Self).GetMarket.Self)]"
				alpha = "[TransparentIfFalse(Or(GreaterThan_int32(FixedPointToInt(Goods.GetMarketSellOrders), '(int32)0'), GreaterThan_int32(FixedPointToInt(Goods.GetMarketBuyOrders), '(int32)0')))]"
			}
		}
	}

	type article_market_goods_balance_number = hbox {
		layoutpolicy_horizontal = preferred
		layoutpolicy_vertical = expanding

		textbox = {
			visible = "[GreaterThan_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
			align = hcenter|nobaseline
			using = elide_fontsize_min
			alpha = 0.75
			text = "MARKET_PANEL_BALANCE_GOLD"

			state = {
				name = show
				alpha = 1
				duration = 0.15
				using = Animation_Curve_Default
			}

			state = {
				name = hide
				alpha = 0.75
				duration = 0.3
				using = Animation_Curve_Default
			}
		}

		textbox = {
			visible = "[EqualTo_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
			align = hcenter|nobaseline
			using = elide_fontsize_min
			alpha = 0.75
			text = "MARKET_PANEL_BALANCE"

			state = {
				name = show
				alpha = 1
				duration = 0.15
				using = Animation_Curve_Default
			}

			state = {
				name = hide
				alpha = 0.75
				duration = 0.3
				using = Animation_Curve_Default
			}
		}

		textbox = {
			visible = "[LessThan_int32(FixedPointToInt(Goods.GetMarketBuyAndSellOrdersBalance), '(int32)0')]"
			layoutpolicy_horizontal = preferred
			layoutpolicy_vertical = expanding
			align = hcenter|nobaseline
			using = elide_fontsize_min
			alpha = 0.75
			text = "MARKET_PANEL_BALANCE_BLUE"

			state = {
				name = show
				alpha = 1
				duration = 0.15
				using = Animation_Curve_Default
			}

			state = {
				name = hide
				alpha = 0.75
				duration = 0.3
				using = Animation_Curve_Default
			}
		}
	}

	### COMPANY LIST
	type article_input_company_list = dynamicgridbox {
		datamodel_wrap = 3
		flipdirection = yes

		item = {
			container = {
				grid_button = {
					visible = "[Not(ObjectsEqual(ArticleDraft.GetCompany.Self, Company.Self))]"

					tooltipwidget = {
						FancyTooltip_Company = {}
					}

					blockoverride "min_width" {
						min_width = 100
					}

					blockoverride "properties" {
						onclick = "[ArticleDraft.SetCompany(Company.Self)]"
					}

					blockoverride "texture" {
						texture = "[Company.GetCompanyType.GetIcon]"
					}

					blockoverride "text_middle" {
						text = "[Company.GetNameNoFormatting]"
					}

					blockoverride "text_bottom" {
						raw_text = "[GetPlayer.GetCustom('currency_symbol')][Company.GetFormattedProductivity]"
					}

					blockoverride "default_button" {
						using = default_button
					}
				}

				widget = {
					visible = "[ObjectsEqual(ArticleDraft.GetCompany.Self, Company.Self)]"
					size = { -1 120 }
					min_width = 100

					background = {
						using = paper_bg
					}

					widget = {
						parentanchor = hcenter
						size = { 50 50 }
						position = { 0 5 }

						icon = {
							parentanchor = center
							size = { 200% 200% }
							using = rotate_glow_animation_02
						}

						icon = {
							size = { 100% 100% }
							parentanchor = center
							texture = "[Company.GetCompanyType.GetIcon]"
						}
					}

					textbox = {
						align = hcenter|nobaseline
						position = { 0 -16 }
						size = { 95% 50 }
						parentanchor = hcenter|bottom
						multiline = yes
						margin_left = 5
						margin_right = 5
						using = fontsize_small
						text = "[Company.GetNameNoFormatting]"
					}

					textbox = {
						align = hcenter|nobaseline
						position = { 0 -3 }
						size = { 100% 20 }
						parentanchor = hcenter|bottom
						using = fontsize_small
						margin_left = 5
						margin_right = 5
						raw_text = "[GetPlayer.GetCustom('currency_symbol')][Company.GetFormattedProductivity]"
					}

					icon = {
						using = highlighted_square_selection
					}
				}
			}
		}
	}

	### BUILDING TYPE LIST
	type article_input_building_type_list = dynamicgridbox {
		datamodel_wrap = 3
		flipdirection = yes

		item = {
			container = {
				# Switch to country that owns buildings
				grid_button = {
					visible = "[Not(ObjectsEqual(ArticleDraft.GetBuildingType.Self, BuildingType.Self))]"

					tooltipwidget = {
						FancyTooltip_BuildingType = {
							blockoverride "tooltip_content_before" {
								flowcontainer = {
									spacing = 5
									tooltip = "[TreatyDraft.GetArticleTypeAcceptanceBreakdownWithCompanyAndBuilding(ArticleType.Self, Country.Self, ArticleDraft.GetCompany.Self, BuildingType.Self)]"

									treaty_draft_input_acceptance_icon = {
										blockoverride "approval_visibility" {
											visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithCompanyAndBuilding(ArticleType.Self, Country.Self, ArticleDraft.GetCompany.Self, BuildingType.Self), '(int32)0')]"
										}

										blockoverride "disapproval_visibility" {
											visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithCompanyAndBuilding(ArticleType.Self, Country.Self, ArticleDraft.GetCompany.Self, BuildingType.Self), '(int32)0')]"
										}

										blockoverride "undecided_visibility" {
											visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithCompanyAndBuilding(ArticleType.Self, Country.Self, ArticleDraft.GetCompany.Self, BuildingType.Self), '(int32)0')]"
										}
									}

									custom_tooltip_textbox = {
										parentanchor = vcenter
										max_width = 500
										default_format = "#tooltippable"
										text = "[TreatyDraft.GetArticleTypeAcceptanceWithCompanyAndBuilding(ArticleType.Self, Country.Self, ArticleDraft.GetCompany.Self, BuildingType.Self)|+=0]"
									}
								}
							}
						}
					}

					blockoverride "min_width" {
						min_width = 100
					}

					blockoverride "properties" {
						enabled = "[ArticleDraft.GetFirstOrSource.CanBuildingTypeBeMonopolized(BuildingType.Self)]"
						tooltip = "[ArticleDraft.GetFirstOrSource.GetCanBuildingTypeBeMonopolizedDesc(BuildingType.Self)]"
						onclick = "[ArticleDraft.SetBuildingType(BuildingType.Self)]"
					}

					blockoverride "texture" {
						texture = "[BuildingType.GetIcon]"
					}

					blockoverride "text_middle" {
						text = "[BuildingType.GetNameNoFormatting]"
					}

					blockoverride "text_bottom_alpha" {
						alpha = "[Select_float(GreaterThan_int32(BuildingType.GetNumLevelsInCountryRaw(ArticleDraft.GetFirstOrSource.Self),'(int32)0'),'(float)1.0','(float)0.5')]"
					}

					blockoverride "text_bottom" {
						raw_text = "[SelectLocalization(GreaterThan_int32(BuildingType.GetNumLevelsInCountryRaw(ArticleDraft.GetFirstOrSource.Self),'(int32)0'),BuildingType.GetProductivitySpanDesc(ArticleDraft.GetFirstOrSource.Self),'NO_LEVELS')]"
					}

					blockoverride "default_button" {
						using = default_button
					}

					blockoverride "additional_widgets" {
						### ACCEPTANCE ICON - COMPANY & BUILDING TYPE - NOT SELECTED
						treaty_draft_input_acceptance_button_icon = {
							parentanchor = right
							position = { -5 5 }

							blockoverride "approval_visibility" {
								visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithCompanyAndBuilding(ArticleType.Self, Country.Self, ArticleDraft.GetCompany.Self, BuildingType.Self), '(int32)0')]"
							}

							blockoverride "disapproval_visibility" {
								visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithCompanyAndBuilding(ArticleType.Self, Country.Self, ArticleDraft.GetCompany.Self, BuildingType.Self), '(int32)0')]"
							}

							blockoverride "undecided_visibility" {
								visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithCompanyAndBuilding(ArticleType.Self, Country.Self, ArticleDraft.GetCompany.Self, BuildingType.Self), '(int32)0')]"
							}
						}
					}
				}

				widget = {
					visible = "[ObjectsEqual(ArticleDraft.GetBuildingType.Self, BuildingType.Self)]"
					size = { -1 120 }
					min_width = 100

					tooltipwidget = {
						FancyTooltip_BuildingType = {
							blockoverride "tooltip_content_before" {
								flowcontainer = {
									spacing = 5
									tooltip = "[ArticleDraft.GetAcceptanceBreakdown(TreatyDraft.GetRightCountry.Self)]"

									treaty_draft_input_acceptance_icon = {}

									custom_tooltip_textbox = {
										parentanchor = vcenter
										max_width = 500
										default_format = "#tooltippable"
										text = "[ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self)|+=0]"
									}
								}
							}
						}
					}

					background = {
						using = paper_bg
					}

					widget = {
						parentanchor = hcenter
						size = { 50 50 }
						position = { 0 5 }

						icon = {
							parentanchor = center
							size = { 200% 200% }
							using = rotate_glow_animation_02
						}

						icon = {
							size = { 100% 100% }
							parentanchor = center
							texture = "[BuildingType.GetIcon]"
						}
					}

					textbox = {
						align = hcenter|nobaseline
						position = { 0 -16 }
						size = { 95% 50 }
						parentanchor = hcenter|bottom
						using = fontsize_small
						multiline = yes
						margin_left = 5
						margin_right = 5
						text = "[BuildingType.GetNameNoFormatting]"
					}

					textbox = {
						align = hcenter|nobaseline
						position = { 0 -3 }
						size = { 100% 20 }
						parentanchor = hcenter|bottom
						using = fontsize_small
						elide = right
						margin_left = 5
						margin_right = 5
						alpha = "[Select_float(GreaterThan_int32(BuildingType.GetNumLevelsInCountryRaw(ArticleDraft.GetFirstOrSource.Self), '(int32)0'), '(float)1.0', '(float)0.5')]"
						raw_text = "[SelectLocalization(GreaterThan_int32(BuildingType.GetNumLevelsInCountryRaw(ArticleDraft.GetFirstOrSource.Self),'(int32)0'), BuildingType.GetProductivitySpanDesc(ArticleDraft.GetFirstOrSource.Self),'NO_LEVELS')]"
					}

					### ACCEPTANCE ICON - COMPANY & BUILDING TYPE - SELECTED
					treaty_draft_input_acceptance_icon = {
						parentanchor = right
						position = { -5 5 }
					}

					icon = {
						using = highlighted_square_selection
					}
				}

				tiny_flag_no_interact = {
					visible = "[Not(ArticleDraft.GetFirstOrSource.CanBuildingTypeBeMonopolized(BuildingType.Self))]"
					datacontext = "[ArticleDraft.GetFirstOrSource.GetMonopolyCountryOnBuildingType(BuildingType.Self)]"
				}
			}
		}
	}

	type article_input_law_list = flowcontainer {
		parentanchor = hcenter
		spacing = 5

		flowcontainer = {
			#visible = "[GetVariableSystem.HasValue('power_structure', 'true')]"
			parentanchor = hcenter
			direction = vertical
			spacing = 5

			textbox = {
				parentanchor = hcenter
				autoresize = yes
				align = nobaseline
				using = elide_fontsize_min
				max_width = 200
				text = "POWER_STRUCTURE"
			}

			article_input_law_group_list = {
				parentanchor = hcenter
				datamodel = "[Country.AccessActivePowerStructureLaws]"
			}
		}

		flowcontainer = {
			#visible = "[GetVariableSystem.HasValue('economy', 'true')]"
			parentanchor = hcenter
			direction = vertical
			spacing = 5

			textbox = {
				parentanchor = hcenter
				autoresize = yes
				align = nobaseline
				using = elide_fontsize_min
				max_width = 200
				text = "ECONOMY"
			}

			article_input_law_group_list = {
				parentanchor = hcenter
				datamodel = "[Country.AccessActiveEconomyLaws]"
			}
		}

		flowcontainer = {
			#visible = "[GetVariableSystem.HasValue('human_rights', 'true')]"
			parentanchor = hcenter
			direction = vertical
			spacing = 5

			textbox = {
				parentanchor = hcenter
				autoresize = yes
				align = nobaseline
				using = elide_fontsize_min
				max_width = 200
				text = "HUMAN_RIGHTS"
			}

			article_input_law_group_list = {
				parentanchor = hcenter
				datamodel = "[Country.AccessActiveHumanRightsLaws]"
			}
		}
	}

	type article_input_law_group_list = flowcontainer {
		direction = vertical
		spacing = 5

		item = {
          	flowcontainer = {
          		direction = vertical

		   		country_panel_law_item = {
		   			visible = "[Not(Law.IsBeingEnacted)]"
		   			size = { 220 65 }

		   			blockoverride "law_onclick" {
						onclick = "[GetVariableSystem.Toggle(Concatenate(Law.GetFullName, '_law_article_input'))]"
					}

					blockoverride "law_highlighting" {
						icon = {
	             			visible = "[GetVariableSystem.Exists(Concatenate(Law.GetFullName, '_law_article_input'))]"
							using = highlighted_square_selection
							size = { 100% 100% }
						}
					}

					blockoverride "law_item_tooltip" {
						tooltipwidget = {
							FancyTooltip_Law = {
								blockoverride "active_status" {}
							}
						}
					}

					blockoverride "impose_number_visibility" {
						visible = "[GreaterThan_int32(GetDataModelSize(ArticleDraft.GetValidLaws(Law.GetLawType.Self)), '(int32)0')]"
					}

					blockoverride "impose_number_text" {
						raw_text = "#b [GetDataModelSize(ArticleDraft.GetValidLaws(Law.GetLawType.Self))]#!"
					}
             	}

             	country_panel_law_item_is_enacting = {
             		visible = "[Law.IsBeingEnacted]"
             		size = { 220 65 }
             	}

             	flowcontainer = {
             		visible = "[GetVariableSystem.Exists(Concatenate(Law.GetFullName, '_law_article_input'))]"
             		parentanchor = hcenter
             		direction = vertical

             		dynamicgridbox = {
             			parentanchor = hcenter
						datamodel = "[ArticleDraft.GetValidLaws(Law.GetLawType.Self)]"
						flipdirection = yes
						datamodel_wrap = 2

						item = {
							container = {
								grid_button = {
									visible = "[And(Not(ObjectsEqual(ArticleDraft.GetLawType.Self, Law.GetLawType.Self)), Not(Law.IsActive))]"
									datacontext = "[Law.GetLawType]"

									tooltipwidget = {
										FancyTooltip_LawWithCountryContext = {
											blockoverride "tooltip_content_before" {
												flowcontainer = {
													spacing = 5
													tooltip = "[TreatyDraft.GetArticleTypeAcceptanceBreakdownWithLaw(ArticleType.Self, Country.Self, LawType.Self)]"

													treaty_draft_input_acceptance_icon = {
														blockoverride "approval_visibility" {
															visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
														}

														blockoverride "disapproval_visibility" {
															visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
														}

														blockoverride "undecided_visibility" {
															visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
														}
													}

													custom_tooltip_textbox = {
														parentanchor = vcenter
														max_width = 500
														default_format = "#tooltippable"
														text = "[TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self)|+=0]"
													}
												}
											}
										}
									}

									blockoverride "min_width" {
										min_width = 100
									}

									blockoverride "properties" {
										enabled = "[ArticleDraft.IsLawTypeValidInput(Law.GetLawType.Self)]"
										onclick = "[ArticleDraft.SetLaw(Law.GetLawType.Self)]"
									}

									blockoverride "texture" {
										texture = "[Law.GetTexture]"
									}

									blockoverride "text_middle" {
										text = "[Law.GetNameNoFormatting]"
									}

									blockoverride "text_bottom" {
										widget = {
											size = { 100% 20 }
											parentanchor = bottom
											position = { 0 -3 }

											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												margin = { 2 0 }

												textbox = {
													visible = "[Law.IsBeingEnacted]"
													layoutpolicy_horizontal = preferred
													layoutpolicy_vertical = expanding
													align = hcenter|nobaseline
													using = elide_fontsize_min
													alpha = 0.75
													text = "ENACTING"

													state = {
														name = show
														alpha = 1
														duration = 0.15
														using = Animation_Curve_Default
													}

													state = {
														name = hide
														alpha = 0.75
														duration = 0.3
														using = Animation_Curve_Default
													}
												}

												textbox = {
													visible = "[Not(Law.IsBeingEnacted)]"
													layoutpolicy_horizontal = preferred
													layoutpolicy_vertical = expanding
													align = hcenter|nobaseline
													using = fontsize_small
													elide = right
													text = "ENACT_LAW_SUCCESS_CHANCE"
												}

												vertical_divider = {
													visible = "[Not(Law.IsBeingEnacted)]"

													blockoverride "size" {
														layoutpolicy_vertical = expanding
														size = { 2 0 }
													}
												}

												textbox = {
													visible = "[Not(Law.IsBeingEnacted)]"
													layoutpolicy_horizontal = preferred
													layoutpolicy_vertical = expanding
													align = hcenter|nobaseline
													using = fontsize_small
													elide = right
													text = "ENACT_LAW_STALL_CHANCE"
												}
											}
										}
									}

									blockoverride "additional_widgets" {
										### ACCEPTANCE ICON - LAW - NOT SELECTED
										treaty_draft_input_acceptance_button_icon = {
											parentanchor = right
											position = { -5 5 }

											blockoverride "approval_visibility" {
												visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
											}

											blockoverride "disapproval_visibility" {
												visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
											}

											blockoverride "undecided_visibility" {
												visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
											}
										}
									}

									blockoverride "default_button" {
										using = default_button
									}
								}

								grid_button = {
									visible = "[And(Law.IsActive, Not(ObjectsEqual(ArticleDraft.GetLawType.Self, Law.GetLawType.Self)))]"
									enabled = "[ArticleDraft.IsLawTypeValidInput(Law.GetLawType.Self)]"
									datacontext = "[Law.GetLawType]"

									tooltipwidget = {
										FancyTooltip_LawWithCountryContext = {
											blockoverride "tooltip_content_before" {
												flowcontainer = {
													spacing = 5
													tooltip = "[TreatyDraft.GetArticleTypeAcceptanceBreakdownWithLaw(ArticleType.Self, Country.Self, LawType.Self)]"

													treaty_draft_input_acceptance_icon = {
														blockoverride "approval_visibility" {
															visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
														}

														blockoverride "disapproval_visibility" {
															visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
														}

														blockoverride "undecided_visibility" {
															visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
														}
													}

													custom_tooltip_textbox = {
														parentanchor = vcenter
														max_width = 500
														default_format = "#tooltippable"
														text = "[TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self)|+=0]"
													}
												}
											}
										}
									}

									blockoverride "min_width" {
										min_width = 100
									}

									blockoverride "properties" {
										onclick = "[ArticleDraft.SetLaw(Law.GetLawType.Self)]"
									}

									blockoverride "texture" {
										texture = "[Law.GetTexture]"
									}

									blockoverride "text_middle" {
										text = "[Law.GetNameNoFormatting]"
									}

									blockoverride "text_bottom" {
										widget = {
											size = { 100% 20 }
											parentanchor = bottom
											position = { 0 -3 }

											hbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding
												margin = { 2 0 }

												textbox = {
													layoutpolicy_horizontal = preferred
													layoutpolicy_vertical = expanding
													align = hcenter|nobaseline
													using = fontsize_small
													elide = right
													alpha = 0.75
													text = "CURRENT"

													state = {
														name = show
														alpha = 1
														duration = 0.15
														using = Animation_Curve_Default
													}

													state = {
														name = hide
														alpha = 0.75
														duration = 0.3
														using = Animation_Curve_Default
													}
												}
											}
										}
									}

									blockoverride "additional_widgets" {
										### ACCEPTANCE ICON - LAW - NOT SELECTED
										treaty_draft_input_acceptance_button_icon = {
											parentanchor = right
											position = { -5 5 }

											blockoverride "approval_visibility" {
												visible = "[GreaterThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
											}

											blockoverride "disapproval_visibility" {
												visible = "[LessThan_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
											}

											blockoverride "undecided_visibility" {
												visible = "[EqualTo_int32(TreatyDraft.GetArticleTypeAcceptanceWithLaw(ArticleType.Self, Country.Self, LawType.Self), '(int32)0')]"
											}
										}
									}

									blockoverride "default_button" {
										using = default_button
									}
								}

								widget = {
									visible = "[ObjectsEqual(ArticleDraft.GetLawType.Self, Law.GetLawType.Self)]"
									size = { -1 120 }
									min_width = 100

									tooltipwidget = {
										FancyTooltip_LawWithCountryContext = {
											blockoverride "tooltip_content_before" {
												flowcontainer = {
													spacing = 5
													tooltip = "[ArticleDraft.GetAcceptanceBreakdown(TreatyDraft.GetRightCountry.Self)]"

													treaty_draft_input_acceptance_icon = {}

													custom_tooltip_textbox = {
														parentanchor = vcenter
														max_width = 500
														default_format = "#tooltippable"
														text = "[ArticleDraft.GetAcceptance(TreatyDraft.GetRightCountry.Self)|+=0]"
													}
												}
											}
										}
									}

									state = {
										name = _show
										alpha = 1
										duration = 0.1
										on_start = "[PdxGuiWidget.FindChild('law_type_icon').InterruptThenTriggerAnimation('hide','show')]"
									}

									state = {
										name = _hide
										alpha = 0
										duration = 0.1
										using = Animation_Curve_Default
										on_start = "[PdxGuiWidget.FindChild('law_type_icon').InterruptThenTriggerAnimation('show','hide')]"
									}


									background = {
										using = paper_bg
									}

									widget = {
										name = "law_type_icon"
										parentanchor = hcenter
										size = { 50 50 }
										position = { 0 5 }

										state = {
											name = show
											size = { 60 60 }
											duration = 0.2
											using = Animation_Curve_Default
										}

										state = {
											name = hide
											size = { 50 50 }
											duration = 0.2
											using = Animation_Curve_Default
										}

										icon = {
											parentanchor = center
											size = { 200% 200% }
											using = rotate_glow_animation_02
										}

										icon = {
											size = { 100% 100% }
											parentanchor = center
											texture = "[Law.GetTexture]"
										}
									}

									textbox = {
										align = hcenter|nobaseline
										position = { 0 -16 }
										size = { 100% 50 }
										parentanchor = hcenter|bottom
										using = fontsize_small
										multiline = yes
										margin_left = 5
										margin_right = 5
										text = "[Law.GetNameNoFormatting]"
									}

									widget = {
										size = { 100% 20 }
										parentanchor = bottom
										position = { 0 -5 }

										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding
											margin = { 2 0 }

											textbox = {
												visible = "[Law.IsBeingEnacted]"
												layoutpolicy_horizontal = preferred
												layoutpolicy_vertical = expanding
												align = hcenter|nobaseline
												using = elide_fontsize_min
												alpha = 0.75
												text = "ENACTING"

												state = {
													name = show
													alpha = 1
													duration = 0.15
													using = Animation_Curve_Default
												}

												state = {
													name = hide
													alpha = 0.75
													duration = 0.3
													using = Animation_Curve_Default
												}
											}

											textbox = {
												visible = "[Law.IsActive]"
												layoutpolicy_horizontal = preferred
												layoutpolicy_vertical = expanding
												align = hcenter|nobaseline
												using = fontsize_small
												elide = right
												alpha = 0.75
												text = "CURRENT"

												state = {
													name = show
													alpha = 1
													duration = 0.15
													using = Animation_Curve_Default
												}

												state = {
													name = hide
													alpha = 0.75
													duration = 0.3
													using = Animation_Curve_Default
												}
											}

											textbox = {
												visible = "[And(Not(Law.IsBeingEnacted), Not(Law.IsActive))]"
												layoutpolicy_horizontal = preferred
												layoutpolicy_vertical = expanding
												align = hcenter|nobaseline
												using = fontsize_small
												elide = right
												text = "ENACT_LAW_SUCCESS_CHANCE"
											}

											vertical_divider = {
												visible = "[And(Not(Law.IsBeingEnacted), Not(Law.IsActive))]"

												blockoverride "size" {
													layoutpolicy_vertical = expanding
													size = { 2 0 }
												}
											}

											textbox = {
												visible = "[And(Not(Law.IsBeingEnacted), Not(Law.IsActive))]"
												layoutpolicy_horizontal = preferred
												layoutpolicy_vertical = expanding
												align = hcenter|nobaseline
												using = fontsize_small
												elide = right
												text = "ENACT_LAW_STALL_CHANCE"
											}
										}
									}

									### ACCEPTANCE ICON - LAW - SELECTED
									treaty_draft_input_acceptance_icon = {
										parentanchor = right
										position = { -5 5 }
									}

									icon = {
										using = highlighted_square_selection
									}
								}
							}
						}
					}
             	}
          	}
		}

		background = {
			using = light_bg
			alpha = 0.5
			margin = { 5 0 }

			modify_texture = {
				texture = "gfx/interface/masks/fade_vertical_center.dds"
				spriteType = Corneredstretched
				blend_mode = alphamultiply
			}
		}
	}

	### COMPANY MONOPOLY
	type article_input_company_monopoly = flowcontainer {
		parentanchor = hcenter
		spacing = 10

		flowcontainer = {
			direction = vertical

			default_header_clean_faded = {
				layoutpolicy_horizontal = expanding
				size = { 300 44 }

				blockoverride "text" {
					text = "ARTICLE_INPUT_SELECT_COMPANY_HEADER"
				}
			}

			article_input_company_list = {
				visible = "[WarGoal.IsValidDataContext]"
				parentanchor = hcenter
				datamodel = "[WarGoal.GetHolder.GetCompanies]"
			}

			article_input_company_list = {
				visible = "[Not(WarGoal.IsValidDataContext)]"
				parentanchor = hcenter
				datamodel = "[ArticleDraft.GetValidCompanies]"
			}
		}

		vertical_divider_stronger_full = {}

		flowcontainer = {
			direction = vertical

			default_header_clean_faded = {
				layoutpolicy_horizontal = expanding
				size = { 300 44 }

				blockoverride "text" {
					text = "ARTICLE_INPUT_SELECT_BUILDING_TYPE_HEADER"
				}
			}

			empty_state = {
				blockoverride "visible" {
					visible = "[Not(ArticleDraft.GetCompany.IsValid)]"
				}

				blockoverride "text" {
					text = "SELECT_A_COMPANY_FIRST"
				}

				blockoverride "size" {
					minimumsize = { 300 -1 }
					maximumsize = { 300 -1 }
				}
			}

			empty_state = {
				blockoverride "visible" {
					visible = "[And(ArticleDraft.GetCompany.IsValid,IsDataModelEmpty(ArticleDraft.GetCompany.GetBuildingTypes))]"
				}

				blockoverride "text" {
					text = "NO_BUILDING_TYPES_TO_MONOPOLIZE"
				}

				blockoverride "size" {
					minimumsize = { 300 -1 }
					maximumsize = { 300 -1 }
				}
			}

			article_input_building_type_list = {
				parentanchor = hcenter
				datacontext = "[ArticleDraft.GetCompany]"
				visible = "[And(Company.IsValid,Not(IsDataModelEmpty(Company.GetBuildingTypes)))]"
				datamodel = "[ArticleDraft.GetValidBuildingTypes]"
			}
		}
	}

	type article_input_select_money = container {
		minimumsize = { 300 50 }

		flowcontainer = {
			parentanchor = center
			direction = vertical
			spacing = 5

			scrollbar = {
				parentanchor = hcenter
				direction = horizontal
				size = { 240 20 }
				value = "[ArticleDraft.GetQuantity]"

				min = "[ArticleDraft.GetMinValidQuantity]"
				max = "[ArticleDraft.GetMaxValidQuantity]"
				step = 1.0
				wheelstep = 1.0

				onvaluechanged = "[ArticleDraft.OnQuantityChangedSlider]"

				track = {
					using = SettingsValueTrack
				}

				slider = {
					using = SettingsValueSlider
				}

				dec_button = {
					using = SettingsValueDecButton
				}

				inc_button = {
					using = SettingsValueIncButton
				}
			}

			flowcontainer = {
				parentanchor = hcenter

				icon = {
					parentanchor = vcenter
					size = { 40 40 }
					texture = "gfx/interface/icons/generic_icons/money.dds"
				}

				# Set the amount
				editbox = {
					name = "treaty_money_edit"
					parentanchor = vcenter
					maxcharacters = 30
					size = { 150 40 }
					alwaystransparent = no
					focuspolicy = click
					focus_on_visible = no
					align = nobaseline
					margin_left = 10

					background = {
						using = text_edit_bg
					}

					text = "[ArticleDraft.GetQuantity]"
					ontextedited = "[ArticleDraft.OnInputTextChanged]"
					text_validator = "[ArticleDraft.GetQuantityValidator]"
					oneditingfinished = "[ArticleDraft.OnQuantityChanged]"

					textbox = {
						parentanchor = right|vcenter
						position = { -10 0 }
						align = nobaseline
						autoresize = yes
						using = elide_fontsize_min
						max_width = 70
						raw_text = "[ArticleDraft.GetQuantityPercentage|0%]"
					}
				}

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 100
					text = "SLASH_PER_WEEK"
				}
			}
		}
	}

	type selected_state = container {
		minimumsize = { 400 50 }

		flowcontainer = {
			parentanchor = center
			spacing = 5

			textbox = {
				visible = "[Not(ArticleDraft.HasInputValue('state'))]"
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				using = elide_fontsize_min
				max_width = 380
				text = "SELECT_A_STATE"
			}

			flowcontainer = {
				visible = "[ArticleDraft.HasInputValue('state')]"
				parentanchor = vcenter
				spacing = 5
				datacontext = "[ArticleDraft.GetState]"

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 150
					text = "TREATY_TRANSFER"
				}

				tiny_flag_no_interact = {
					parentanchor = vcenter
					datacontext = "[State.GetCountry]"
				}

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 200
					text = "[State.GetName]"
				}
			}
		}
	}

	### SELECTED STRATEGIC REGION
	type selected_strategic_region = container {
		minimumsize = { 400 50 }

		flowcontainer = {
			parentanchor = center
			spacing = 5

			textbox = {
				visible = "[Not(ArticleDraft.HasInputValue('strategic_region'))]"
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				using = elide_fontsize_min
				max_width = 380
				text = "SELECT_A_STRATEGIC_REGION"
			}

			flowcontainer = {
				visible = "[ArticleDraft.HasInputValue('strategic_region')]"
				parentanchor = vcenter
				spacing = 5
				datacontext = "[ArticleDraft.GetStrategicRegion]"

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 380
					text = "ARTICLE_COUNTRY_WILL_NOT_COLONIZE"
				}
			}
		}
	}

	### SELECTED LAW
	type selected_law = container {
		minimumsize = { 530 50 }

		flowcontainer = {
			parentanchor = center
			spacing = 5

			textbox = {
				visible = "[Not(ArticleDraft.HasInputValue('law_type'))]"
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				using = elide_fontsize_min
				max_width = 500
				text = "SELECT_A_LAW"
			}

			flowcontainer = {
				visible = "[ArticleDraft.HasInputValue('law_type')]"
				parentanchor = vcenter
				spacing = 5
				datacontext = "[ArticleDraft.GetLawType]"

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 500
					multiline = yes
					text = "ARTICLE_SELECTED_LAW_COMMITMENT"
				}
			}
		}
	}

	### SELECTED COMPANY AND BUILDING TYPE
	type selected_company_and_building_type = container {
		minimumsize = { 620 50 }

		flowcontainer = {
			parentanchor = center
			spacing = 5

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5

				icon = {
					visible = "[ArticleDraft.HasInputValue('company')]"
					parentanchor = vcenter
					size = { 40 40 }
					texture = "[ArticleDraft.GetCompany.GetCompanyType.GetIcon]"
				}

				textbox = {
					visible = "[ArticleDraft.HasInputValue('company')]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 160
					text = "[ArticleDraft.GetCompany.GetNameNoIcon]"
				}

				textbox = {
					visible = "[Not(ArticleDraft.HasInputValue('company'))]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 160
					alpha = 0.3
					text = "NONE"
				}
			}

			textbox = {
				#visible = "[ArticleType.IsOffer]" #todo PRCAL-38358
				parentanchor = vcenter
				autoresize = yes
				align = nobaseline
				max_width = 210
				text = "WILL_COMPANY_MONOPOLIZE"
			}

			flowcontainer = {
				parentanchor = vcenter
				spacing = 5

				icon = {
					visible = "[ArticleDraft.HasInputValue('building_type')]"
					parentanchor = vcenter
					size = { 40 40 }
					texture = "[ArticleDraft.GetBuildingType.GetIcon]"
				}

				textbox = {
					visible = "[ArticleDraft.HasInputValue('building_type')]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 160
					text = "[ArticleDraft.GetBuildingType.GetName]"
				}

				textbox = {
					visible = "[Not(ArticleDraft.HasInputValue('building_type'))]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 160
					alpha = 0.3
					text = "NONE"
				}
			}
		}
	}

	### SELECTED GOOD GENERIC
	type selected_goods_generic = container {
		minimumsize = { 400 50 }

		flowcontainer = {
			parentanchor = center
			spacing = 5

			flowcontainer = {
				visible = "[ArticleDraft.HasInputValue('goods')]"
				parentanchor = vcenter
				spacing = 5

				textbox = {
					visible = "[ArticleType.HasType('prohibit_trade_with_global_market')]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 240
					text = "PROHIBIT_TRADE"
				}

				textbox = {
					visible = "[ArticleType.HasType('no_tariffs')]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 240
					text = "ARTICLE_INPUT_NO_TARIFFS"
				}

				textbox = {
					visible = "[ArticleType.HasType('no_subventions')]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 240
					text = "ARTICLE_INPUT_NO_SUBVENTIONS"
				}

				icon = {
					parentanchor = vcenter
					size = { 40 40 }
					texture = "[ArticleDraft.GetGoods.GetTexture]"
				}

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 100
					text = "[ArticleDraft.GetGoods.GetName]"
				}
			}

			textbox = {
				visible = "[Not(ArticleDraft.HasInputValue('goods'))]"
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				using = elide_fontsize_min
				max_width = 350
				text = "SELECT_A_GOOD"
			}
		}
	}

	### SELECTED GOOD TO TRANSFER AND AMOUNT
	type selected_goods_and_amount = widget {
		parentanchor = hcenter
		size = { 400 70 }

		container = {
			parentanchor = vcenter
			minimumsize = { 150 -1 }

			flowcontainer = {
				parentanchor = center
				spacing = 5

				icon = {
					visible = "[ArticleDraft.HasInputValue('goods')]"
					parentanchor = vcenter
					size = { 40 40 }
					texture = "[ArticleDraft.GetGoods.GetTexture]"
				}

				textbox = {
					visible = "[ArticleDraft.HasInputValue('goods')]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 100
					multiline = yes
					text = "[ArticleDraft.GetGoods.GetName]"
				}

				textbox = {
					visible = "[Not(ArticleDraft.HasInputValue('goods'))]"
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 145
					text = "SELECT_A_GOOD"
				}
			}
		}

		flowcontainer = {
			direction = vertical
			parentanchor = vcenter|right
			spacing = 5

			scrollbar = {
				visible = "[ArticleDraft.HasInputValue('goods')]"
				parentanchor = hcenter
				direction = horizontal
				size = { 240 20 }
				value = "[ArticleDraft.GetQuantity]"
				enabled = "[NotEqualTo_int32(ArticleDraft.GetMinValidQuantity, ArticleDraft.GetMaxValidQuantity)]"

				min = "[ArticleDraft.GetMinValidQuantity]"
				max = "[ArticleDraft.GetMaxValidQuantity]"
				step = 1.0
				wheelstep = 1.0

				onvaluechanged = "[ArticleDraft.OnQuantityChangedSlider]"

				track = {
					using = SettingsValueTrack
				}

				slider = {
					using = SettingsValueSlider
				}

				dec_button = {
					using = SettingsValueDecButton
				}

				inc_button = {
					using = SettingsValueIncButton
				}
			}

			scrollbar = {
				visible = "[Not(ArticleDraft.HasInputValue('goods'))]"
				enabled = no
				parentanchor = hcenter
				direction = horizontal
				size = { 240 20 }
				value = 0

				min = 0.0
				max = 1.0
				step = 1.0
				wheelstep = 1.0

				track = {
					using = SettingsValueTrack
				}

				slider = {
					using = SettingsValueSlider
				}

				dec_button = {
					using = SettingsValueDecButton
				}

				inc_button = {
					using = SettingsValueIncButton
				}
			}

			flowcontainer = {
				parentanchor = hcenter

				# Set the amount
				editbox = {
					visible = "[ArticleDraft.HasInputValue('goods')]"
					name = "treaty_amount_edit"
					parentanchor = vcenter
					maxcharacters = 30
					size = { 150 40 }
					alwaystransparent = no
					focuspolicy = click
					focus_on_visible = no
					align = nobaseline
					margin_left = 10

					background = {
						using = text_edit_bg
					}

					text = "[ArticleDraft.GetQuantity]"
					ontextchanged = "[ArticleDraft.OnQuantityChanged]"
					text_validator = "[ArticleDraft.GetQuantityValidator]"

					textbox = {
						parentanchor = right|vcenter
						position = { -10 0 }
						align = nobaseline
						autoresize = yes
						using = elide_fontsize_min
						max_width = 70
						raw_text = "[ArticleDraft.GetQuantityPercentage|0%]"
					}
				}

				editbox = {
					visible = "[Not(ArticleDraft.HasInputValue('goods'))]"
					name = "treaty_amount_edit_no_good"
					enabled = no
					parentanchor = vcenter
					maxcharacters = 30
					size = { 150 40 }
					alwaystransparent = no
					focuspolicy = click
					focus_on_visible = no
					align = nobaseline
					margin_left = 10
					raw_text = "0"

					background = {
						using = text_edit_bg
					}

					textbox = {
						parentanchor = right|vcenter
						position = { -10 0 }
						align = nobaseline
						autoresize = yes
						using = elide_fontsize_min
						max_width = 70
						raw_text = "0%"
					}
				}

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 100
					text = "SLASH_PER_WEEK"
				}
			}
		}
	}

	### SELECTED MARKET TO PROHIBIT TRADE WITH
	type selected_market_no_trade = container {
		minimumsize = { 380 50 }

		flowcontainer = {
			parentanchor = center
			spacing = 5

			flowcontainer = {
				#visible = "[ArticleType.HasMarketSelected]" #todo PRCAL-38358
				#visible = no
				parentanchor = vcenter
				spacing = 5

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 200
					text = "TREATY_NO_TRADE"
				}

				tiny_flag_no_interact = {
					parentanchor = vcenter
					#datacontext = "[ArticleType.GetSelectedMarket.GetOwner]" #todo PRCAL-38358
					datacontext = "[GetPlayer]"
				}

				textbox = {
					parentanchor = vcenter
					align = nobaseline
					autoresize = yes
					using = elide_fontsize_min
					max_width = 100
					#text = "[ArticleType.GetSelectedMarket.GetName]" #todo PRCAL-38358
					raw_text = "[GetPlayer.GetMarket.GetName]"
				}
			}

			textbox = {
				#visible = "[Not(ArticleType.HasMarketSelected)]" #todo PRCAL-38358
				visible = no
				parentanchor = vcenter
				align = nobaseline
				autoresize = yes
				using = elide_fontsize_min
				max_width = 350
				text = "SELECT_A_MARKET"
			}
		}
	}
}

right_click_menu = {
	name = "bloc_actions_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "BLOC_ACTIONS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		empty_state = {
			blockoverride "visible" {
				visible = "[IsDataModelEmpty(Country.GetAllPowerBlocMemberDiploActions)]"
			}
			blockoverride "text" {
				text = "NO_AVAILABLE_ACTIONS"
			}
		}

		dynamicgridbox = {
			datamodel = "[Country.GetAvailablePowerBlocMemberDiploActions]"
			datamodel_wrap = 6
			flipdirection = yes

			item = {
				diplomatic_action_grid_button = {}
			}
		}

		widget = {
			size = { 10 10 }
		}

		### UNAVAILABLE BLOC MEMBER ACTIONS
		right_click_menu_dropdown = {
			visible = "[Not(IsDataModelEmpty(Country.GetPotentialPowerBlocMemberDiploActions))]"

			blockoverride "section_header_tooltip" {
				tooltip = "POTENTIAL_BLOC_ACTIONS_TOOLTIP"
			}

			blockoverride "section_header_size" {
				size = { 600 44 }
			}

			blockoverride "left_text" {
				text = "POTENTIAL_BLOC_ACTIONS"
			}

			blockoverride "section_header_right_text" {
				section_header_right_text = {
					raw_text = "#v [GetDataModelSize(Country.GetPotentialPowerBlocMemberDiploActions)]#!"
				}
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('show_potential_bloc_actions')]"
			}

			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('show_potential_bloc_actions'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
			}

			blockoverride "items_visibility" {
				visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
			}

			blockoverride "properties" {
				enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
				using = diplomatic_action_tooltip
			}

			blockoverride "dropdown_items" {

				widget = {
					size = { 5 5 }
				}

				dynamicgridbox = {
					visible = "[GetVariableSystem.Exists('show_potential_bloc_actions')]"
					datamodel = "[Country.GetPotentialPowerBlocMemberDiploActions]"
					datamodel_wrap = 6
					flipdirection = yes

					item = {
						diplomatic_action_grid_button = {}
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "customization_option_items_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		raw_text = "Select a #v Statue Pattern#!" # TODO PRCAL-32207: statue customization
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		dynamicgridbox = {
			datamodel = "[DataModelRepeatedItem('(int32)12')]" # TODO PRCAL-32207: statue customization
			datamodel_wrap = 5
			flipdirection = yes

			item = {
				customization_option_item = {}
			}
		}

		widget = {
			size = { 10 10 }
		}
	}
}

right_click_menu = {
	name = "power_bloc_coa_pieces_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "POWER_BLOC_COA_SELECT_ITEM"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		dynamicgridbox = {
			datamodel = "[PowerBlocCoaPieceSelector.GetItems]"
			datamodel_wrap = 4
			flipdirection = yes

			item = {
				power_bloc_coa_piece_item = {}
			}
		}

		widget = {
			size = { 10 10 }
		}
	}
}

right_click_menu = {
	name = "power_bloc_map_texture_right_click_menu"
	parentanchor = vcenter|right

	blockoverride "title_text" {
		text = "POWER_BLOC_MAP_TEXTURE_SELECT_ITEM"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		dynamicgridbox = {
			datamodel = "[PowerBlocMapTextureSelector.GetItems]"
			datamodel_wrap = 4
			flipdirection = yes

			item = {
				power_bloc_map_texture_item = {}
			}
		}

		widget = {
			size = { 10 10 }
		}
	}
}

right_click_menu = {
	name = "color_picker_right_click_menu"
	widgetanchor = bottom|left

	blockoverride "title_text" {
		text = "COLOR_PICKER_HEADER"
	}

	blockoverride "items" {

		widget = {
			size = { 5 5 }
		}

		colorpicker_simple = {
			color = "[DataColorPicker.GetColor]"
			oncoloredited = "[DataColorPicker.OnColorEdited]"
		}

		button = {
			parentanchor = hcenter
			size = { 300 50 }
			using = default_button_action
			onclick = "[RightClickMenuManager.Close]"
			text = "DONE"
		}

		widget = {
			size = { 10 10 }
		}
	}
}

right_click_menu = {
	name = "map_modes_right_click_menu"
	parentanchor = bottom
	widgetanchor = top|left

	blockoverride "title_text" {
		text = "PANEL_MAP_MODES_TITLE"
	}

	blockoverride "list" {
		dynamicgridbox = {
			datamodel = "[MapModeList.GetMapModes]"

			item = {
				widget = {
					size = { 350 45 }

					map_mode_right_click_menu_item = {
						visible = "[Not(MapModeList.IsSelected(MapMode.Self))]"
						onclick = "[MapModeList.Select(MapMode.Self)]"
						onclick = "[GetVariableSystem.Set(Concatenate('map_mode_name_', MapMode.GetName), 'true')]"
						using = maplens_generic_sound #todo Robert - Generic select a map mode sound
					}

					map_mode_right_click_menu_item_selected = {
						visible = "[MapModeList.IsSelected(MapMode.Self)]"
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "market_starvation_countries_filter_right_click_menu"
	parentanchor = top|right
	widgetanchor = top|left
	datacontext = "[Market.GetFoodSecurityFilter]"

	blockoverride "title_text" {
		text = "MARKET_COUNTRIES_FILTER_TITLE"
	}

	blockoverride "list" {
		market_starvation_countries_filter_right_click_menu_item = {
			visible = "[FoodSecurityFilter.HasSpecificCountry]"
			size = { 350 45 }
			onclick = "[FoodSecurityFilter.ResetCountryFilter]"
			onclick = "[RightClickMenuManager.Close]"

			blockoverride "button_text" {
				text = "FOOD_SECURITY_FILTER_ALL_COUNTRIES"
			}
		}

		market_starvation_countries_filter_right_click_menu_item_selected = {
			visible = "[Not(FoodSecurityFilter.HasSpecificCountry)]"
			size = { 350 45 }

			blockoverride "button_text" {
				text = "FOOD_SECURITY_FILTER_ALL_COUNTRIES"
			}
		}

		dynamicgridbox = {
			datamodel = "[Market.AccessParticipants]"

			item = {
				widget = {
					size = { 350 45 }

					market_starvation_countries_filter_right_click_menu_item = {
						visible = "[Not(FoodSecurityFilter.IsCountrySelected(Country.Self))]"
						onclick = "[FoodSecurityFilter.SetCountryFilter(Country.Self)]"
						onclick = "[RightClickMenuManager.Close]"
					}

					market_starvation_countries_filter_right_click_menu_item_selected = {
						visible = "[FoodSecurityFilter.IsCountrySelected(Country.Self)]"
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "market_starvation_states_filter_right_click_menu"
	parentanchor = top|right
	widgetanchor = top|left
	datacontext = "[Market.GetFoodSecurityFilter]"

	blockoverride "title_text" {
		text = "MARKET_STATES_FILTER_TITLE"
	}

	blockoverride "list" {
		### ALL - filter option
		market_starvation_states_filter_right_click_menu_item = {
			visible = "[FoodSecurityFilter.HasSpecificState]"
			datacontext = "[FoodSecurityFilter.GetFoodSecurityCountryOrMarket]"
			size = { 450 45 }
			onclick = "[FoodSecurityFilter.ResetStateFilter]"
			onclick = "[RightClickMenuManager.Close]"

			blockoverride "tooltip" {
				tooltip = "ALL_STATES_FOOD_SECURITY_FILTER_TOOLTIP"
			}

			blockoverride "button_text" {
				text = "FOOD_SECURITY_FILTER_ALL_STATES"
			}

			blockoverride "starvation_mild_text" {
				raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsMild|0%]#!"
			}

			blockoverride "starvation_severe_text" {
				raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsSevere|0%]#!"
			}

			blockoverride "starvation_famine_text" {
				text = "[FoodSecurity.GetNumStatesWithFamineRaw|v]"
			}
		}

		### ALL - filter option selected
		market_starvation_states_filter_right_click_menu_item_selected = {
			visible = "[Not(FoodSecurityFilter.HasSpecificState)]"
			datacontext = "[FoodSecurityFilter.GetFoodSecurityCountryOrMarket]"
			size = { 450 45 }

			blockoverride "tooltip" {
				tooltip = "ALL_STATES_FOOD_SECURITY_FILTER_TOOLTIP_SELECTED"
			}

			blockoverride "button_text" {
				text = "FOOD_SECURITY_FILTER_ALL_STATES"
			}

			blockoverride "starvation_mild_text" {
				raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsMild|0%]#!"
			}

			blockoverride "starvation_severe_text" {
				raw_text = "#r [FoodSecurity.GetPercentageStarvingPopsSevere|0%]#!"
			}

			blockoverride "starvation_famine_text" {
				text = "[FoodSecurity.GetNumStatesWithFamineRaw|v]"
			}
		}

		### List of filterable States
		dynamicgridbox = {
			datamodel = "[FoodSecurityFilter.GetStates]"

			item = {
				widget = {
					size = { 450 45 }

					market_starvation_states_filter_right_click_menu_item = {
						datacontext = "[State.GetFoodSecurity]"

						visible = "[Not(FoodSecurityFilter.IsStateSelected(State.Self))]"
						onclick = "[FoodSecurityFilter.SetStateFilter(State.Self)]"
						onclick = "[RightClickMenuManager.Close]"
					}

					market_starvation_states_filter_right_click_menu_item_selected = {
						datacontext = "[State.GetFoodSecurity]"

						visible = "[FoodSecurityFilter.IsStateSelected(State.Self)]"
					}
				}
			}
		}
	}
}

right_click_menu = {
	name = "market_right_click_menu"

	blockoverride "title_text" {
		text = "MARKET_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				onclick = "[Market.AccessMarketCapital.ZoomToCapital]"
				using = zoom_button_sound
			}

			blockoverride "texture" {
				texture = "gfx/interface/buttons/button_icons/location_finder.dds"
			}

			blockoverride "text" {
				text = "ZOOM_TO_MARKET_CAPITAL"
			}
		}

		right_click_menu_item = {
			visible = "[Market.GetOwner.IsLocalPlayer]"
			blockoverride "properties" {
				onclick = "[Market.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[Market.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(Market.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}

			blockoverride "text" {
				text = "MARKET_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}
		}
	}
}

right_click_menu = {
	name = "goods_right_click_menu"

	blockoverride "title_text" {
		text = "GOODS_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
				onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
				tooltip = "[Goods.GetTaxDesc(GetPlayer)]"
				visible = "[Not(Goods.IsTaxed(GetPlayer))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/consumption_tax_not.dds"
			}

			blockoverride "text" {
				text = "TAX_GOODS"
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
				onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
				tooltip = "[Goods.GetTaxDesc(GetPlayer)]"
				visible = "[Goods.IsTaxed(GetPlayer)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/consumption_tax.dds"
			}

			blockoverride "text" {
				text = "UNTAX_GOODS"
			}
		}

		goods_interactions = {}
	}
}

right_click_menu = {
	name = "goods_in_market_right_click_menu"

	blockoverride "title_text" {
		text = "GOODS_IN_MARKET_RIGHT_CLICK_MENU_TITLE"
	}

	blockoverride "items" {
		right_click_menu_item = {
			visible = "[Goods.HasMarketContext]"
			blockoverride "properties" {
				onclick = "[InformationPanelBar.OpenGoodsPanel(Goods.GetMarket, Goods.Self)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/generic_icons/information.dds"
			}

			blockoverride = "text" {
				text = "INFORMATION"
			}
		}

		right_click_menu_item = {
			visible = "[And(Goods.HasMarketContext, Goods.GetMarket.GetOwner.IsLocalPlayer)]"

			blockoverride "properties" {
				onclick = "[Goods.TogglePinInOutliner]"
			}

			blockoverride "icon" {
				icon = {
					visible = "[Goods.IsPinnedInOutliner]"
					texture = "gfx/interface/outliner/pinned_icon.dds"
					size = { 28 28 }
				}

				icon = {
					visible = "[Not(Goods.IsPinnedInOutliner)]"
					texture = "gfx/interface/outliner/unpinned_icon.dds"
					size = { 28 28 }
				}
			}

			blockoverride = "text" {
				text = "GOODS_RIGHT_CLICK_MENU_PIN_IN_OUTLINER"
			}
		}

		textbox = {
			text = "GOODS_IN_COUNTRY"
			autoresize = yes
			align = left|nobaseline
			margin_top = 15
			margin_bottom = 2
			using = right_click_menu_title_margin_left
			default_format = "#title"
			visible = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
		}

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
				onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
				tooltip = "[Goods.GetTaxDesc(GetPlayer)]"
				visible = "[Not(Goods.IsTaxed(GetPlayer))]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/consumption_tax_not.dds"
			}

			blockoverride "text" {
				text = "TAX_GOODS"
			}
		}

		flowcontainer = {
			visible = "[Goods.IsTradeable]"
			direction = vertical

			textbox = {
				text = "[concept_tariffs]"
				autoresize = yes
				align = nobaseline
				margin_top = 10
				margin_bottom = 2
				using = right_click_menu_title_margin_left
				default_format = "#title"
			}

			flowcontainer = {
				spacing = 5
				direction = vertical
				margin_left = 3

				flowcontainer = {
					spacing = 5

					icon = {
						texture = "gfx/interface/icons/trade_icons/imports.dds"
						size = { 23 23 }
						parentanchor = vcenter
					}

					set_level_bar_import_tariffs = {}
				}

				flowcontainer = {
					spacing = 5

					icon = {
						texture = "gfx/interface/icons/trade_icons/exports.dds"
						size = { 23 23 }
						parentanchor = vcenter
					}

					set_level_bar_export_tariffs = {}
				}
			}
		}

		right_click_menu_item = {
			blockoverride "properties" {
				enabled = "[IsValid( Goods.ToggleTaxation(GetPlayer) )]"
				onclick = "[Execute( Goods.ToggleTaxation(GetPlayer) )]"
				tooltip = "[Goods.GetTaxDesc(GetPlayer)]"
				visible = "[Goods.IsTaxed(GetPlayer)]"
			}

			blockoverride "texture" {
				texture = "gfx/interface/icons/trade_icons/consumption_tax.dds"
			}

			blockoverride "text" {
				text = "UNTAX_GOODS"
			}
		}

		goods_interactions = {}
	}
}

types right_click_menu {
	type goods_interactions = flowcontainer {
		direction = vertical

		textbox = {
			text = "PRODUCED_IN"
			autoresize = yes
			align = left|nobaseline
			margin_top = 15
			margin_bottom = 2
			using = right_click_menu_title_margin_left
			default_format = "#title"
			visible = "[Not(IsDataModelEmpty(Goods.AccessBuildingsProducingThis))]"
		}

		flowcontainer = {
			datamodel = "[Goods.AccessBuildingsProducingThis]"
			direction = vertical

			item = {
				right_click_menu_item = {
					blockoverride "properties" {
						tooltipwidget = {
							FancyTooltip_BuildingType = {}
						}
						tooltip = "[SelectLocalization( GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' ), 'DATA_BUILDING_TYPE_NAME_TOOLTIP', 'DATA_BUILDING_TYPE_NAME_TOOLTIP_NO_STATES' )]"
						visible = "[BuildingType.IsExpandable]"
						onclick = "[BuildingType.ActivateExpansionLens]"
						enabled = "[GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' )]"
					}

					blockoverride "margin" {
						margin_left = 55
					}

					blockoverride "texture" {
						texture = "[BuildingType.GetIcon]"

						small_building_type_targets_indicator = {
							blockoverride "position" {
								position = { 2 0 }
							}
						}
					}

					blockoverride "text" {
						text = "EXPAND_BUILDING_TYPE"
					}

					blockoverride "right_text" {
						textbox = {
							text = "EXPAND_BUILDING_TYPE_RIGHT_TEXT"
							size = { 100 23 }
							align = right|nobaseline
							fontsize_min = 12
							elide = right
							margin = { 5 0 }
							margin_right = 10
						}
					}
				}
			}
		}

		textbox = {
			text = "CONSUMED_IN"
			autoresize = yes
			align = left|nobaseline
			margin_top = 15
			margin_bottom = 2
			using = right_click_menu_title_margin_left
			default_format = "#title"
			visible = "[Not(IsDataModelEmpty(Goods.AccessBuildingsUsingThis))]"
		}

		flowcontainer = {
			datamodel = "[Goods.AccessBuildingsUsingThis]"
			direction = vertical

			item = {
				right_click_menu_item = {
					blockoverride "properties" {
						tooltipwidget = {
							FancyTooltip_BuildingType = {}
						}
						tooltip = "[SelectLocalization( GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' ), 'DATA_BUILDING_TYPE_NAME_TOOLTIP', 'DATA_BUILDING_TYPE_NAME_TOOLTIP_NO_STATES' )]"
						visible = "[BuildingType.IsExpandable]"
						enabled = "[GreaterThan_int32( BuildingType.GetNumAvailableStatesForBuilding, '(int32)0' )]"
						onclick = "[BuildingType.ActivateExpansionLens]"
					}

					blockoverride "margin" {
						margin_left = 55
					}

					blockoverride "texture" {
						texture = "[BuildingType.GetIcon]"

						small_building_type_targets_indicator = {
							blockoverride "position" {
								position = { 0 0 }
							}
						}
					}

					blockoverride "text" {
						text = "EXPAND_BUILDING_TYPE"
					}

					blockoverride "right_text" {
						textbox = {
							text = "EXPAND_BUILDING_TYPE_RIGHT_TEXT"
							size = { 100 23 }
							align = right|nobaseline
							fontsize_min = 12
							elide = right
							margin = { 5 0 }
							margin_right = 10
						}
					}
				}
			}
		}
	}

	type grid_button = widget {
		size = { -1 120 }
		alwaystransparent = no

		block "min_width" {
			min_width = "[GetDefine('NGUI', 'LENS_TOOLBAR_ITEM_WIDTH')]"
		}

		button = {
			name = grid_button
			size = { -1 115 }
			parentanchor = bottom|hcenter
			using = tooltip_above

			block "min_width" {
				min_width = "[GetDefine('NGUI', 'LENS_TOOLBAR_ITEM_WIDTH')]"
			}

			block "default_button" {
				using = default_button_action
			}

			#mouse enter position animation
			onmousehierarchyenter = "[PdxGuiWidget.InterruptThenTriggerAnimation('action_button_mouse_leave','action_button_mouse_enter')]"
			onmousehierarchyleave = "[PdxGuiWidget.InterruptThenTriggerAnimation('action_button_mouse_enter','action_button_mouse_leave')]"

			block "properties" {
				onclick = "[RightClickMenuManager.Close]"
			}

			#mouse enter position
			state = {
				name = action_button_mouse_enter
				duration = 0.15
				position = { 0 -5 }
				using = Animation_Curve_Default
				on_start = "[PdxGuiWidget.FindChild('title').TriggerAnimation('show')]"
				on_start = "[PdxGuiWidget.FindChild('cost').TriggerAnimation('show')]"
			}
			state = {
				name = action_button_mouse_leave
				duration = 0.3
				position = { 0 0 }
				using = Animation_Curve_Default
				on_start = "[PdxGuiWidget.FindChild('title').TriggerAnimation('hide')]"
				on_start = "[PdxGuiWidget.FindChild('cost').TriggerAnimation('hide')]"
			}

			block "entire_icon_button" {
				button = {
					name = "interaction_icon"
					size = { 60 60 }
					position = { 0 5 }
					gfxtype = buttongfx
					parentanchor = hcenter
					alwaystransparent = yes

					block "highlight_glow" {}

					icon = {
						size = { 50 50 }
						parentanchor = hcenter

						block "texture" {
							texture = "gfx/interface/icons/generic_icons/generic_concept_icon.dds"
						}
					}
				}
			}

			textbox = {
				name = "title"
				align = hcenter|nobaseline
				position = { 0 -16 }
				size = { 100% 50 }
				parentanchor = hcenter|bottom
				using = fontsize_small
				multiline = yes
				margin_left = 5
				margin_right = 5
				alpha = 0.75

				block "text_middle" {
					raw_text = "#v Name of Interaction#!"
				}

				state = {
					name = show
					alpha = 1
					duration = 0.15
					using = Animation_Curve_Default
				}
				state = {
					name = hide
					alpha = 0.75
					duration = 0.3
					using = Animation_Curve_Default
				}
			}

			block "full_text_bottom" {
				textbox = {
					name = "cost"
					align = hcenter|nobaseline
					position = { 0 -3 }
					size = { 100% 20 }
					parentanchor = hcenter|bottom
					using = fontsize_small
					elide = right
					margin_left = 5
					margin_right = 5

					block "text_bottom_alpha" {
						alpha = 0.75
					}

					block "text_bottom_visibility" {}

					block "text_bottom" {}

					state = {
						name = show
						alpha = 1
						duration = 0.15
						using = Animation_Curve_Default
					}
					state = {
						name = hide
						alpha = 0.75
						duration = 0.3
						using = Animation_Curve_Default
					}
				}
			}

			block "additional_widgets" {}

			icon = {
				block "highlight_visibility" {
					visible = no
				}

				using = highlighted_square_selection
			}
		}
	}

	type diplomatic_action_grid_button = grid_button {
		blockoverride "default_button" {
			using = default_button
		}

		blockoverride "properties" {
			enabled = "[IsValid(DiplomaticAction.ExecuteAction)]"
			onclick = "[DiplomaticAction.ExecuteWithConfirmation]"
			onclick = "[RightClickMenuManager.Close]"
			using = diplomatic_action_tooltip

			block "clicksound" {
				using = generic_diplomatic_action_sound
			}
		}

		blockoverride "highlight_glow" {
			icon = {
				visible = "[DiplomaticAction.IsActivePact]"
				parentanchor = center
				size = { 200% 200% }
				using = rotate_glow_animation_02
			}
		}

		blockoverride "texture" {
			texture = "[DiplomaticAction.GetType.GetTexture]"
		}

		blockoverride "text_middle" {
			text = "DIPLOMATIC_ACTION_ACTIVE_AND_NON_ACTIVE_NAME"
			default_format = "#v"
		}

		blockoverride "text_bottom_visibility" {
			visible = "[GreaterThan_CFixedPoint(DiplomaticAction.GetMaintenanceCost, '(CFixedPoint)0')]"
		}

		blockoverride "text_bottom" {
			raw_text = "#v [DiplomaticAction.GetMaintenanceCostFormatted]#!"
		}

		blockoverride "highlight_visibility" {
			visible = "[DiplomaticAction.IsActivePact]"
		}
	}
}

template standard_formation_item_size {
	size = { 345 80 }
}

template right_click_menu_title_margin_left {
	margin_left = 3
}

