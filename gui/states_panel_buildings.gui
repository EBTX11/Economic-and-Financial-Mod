# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types state_panel_types {
	### WORKFORCE
	type state_panel_buildings_fixed_bottom = flowcontainer {
		direction = vertical
		margin = { 10 5 }
		minimumsize = { @panel_width -1 }
		spacing = 4

		background = {
			using = entry_bg_simple
		}

		container = {
			tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
			minimumsize = { 520 -1 }
			
			flowcontainer = {
				direction = vertical

				flowcontainer = {
					spacing = 7
					tooltip = "[State.GetJobseekersDesc]"
				
					textbox = {
						text = "JOBSEEKERS"
						autoresize = yes
						align = nobaseline
						elide = right
						maximumsize = { 130 -1 }
					}

					textbox = {
						raw_text = "#variable [State.GetNumJobseekers|D]#!"
						autoresize = yes
						align = nobaseline
					}
				}

				flowcontainer = {
					spacing = 7
					parentanchor = right|vcenter
					margin_right = 10

					textbox = {
						raw_text = "[concept_pop_qualifications]: "
						autoresize = yes
						align = nobaseline
						elide = right
						maximumsize = { 130 -1 }
					}
					
					textbox = {
						visible = "[Not(State.HasInsufficientQualificationsForAvailablePositions)]"
						raw_text = "@green_checkmark!"
						autoresize = yes
						align = nobaseline
						maximumsize = { 130 -1 }
						tooltip = "[State.GetPotentialQualificationsDesc]"
					}
					
					textbox = {
						visible = "[State.HasInsufficientQualificationsForAvailablePositions]"
						raw_text = "@red_cross!"
						autoresize = yes
						align = nobaseline
						maximumsize = { 130 -1 }
						tooltip = "[State.GetPotentialQualificationsDesc]"
					}
				}
			}

			flowcontainer = {
				direction = vertical
				parentanchor = right|vcenter

				flowcontainer = {
					spacing = 7
					parentanchor = right
					textbox = {
						raw_text = "[GetPopType('peasants').GetName]:"
						autoresize = yes
						align = nobaseline
						elide = right
					}

					textbox = {
						text = "[State.GetNumSubsistenceWorkingAdults|Dv]"
						autoresize = yes
						align = nobaseline
					}
				}

				flowcontainer = {
					spacing = 7
					parentanchor = right
					textbox = {
						raw_text = "[concept_unemployed]:"
						autoresize = yes
						align = nobaseline
						elide = right
					}

					textbox = {
						text = "[State.GetNumUnemployedWorkingAdults|Dv]"
						autoresize = yes
						align = nobaseline
					}
				}
			}
		}

		divider_clean = {
			maximumsize = { 520 -1 }
		}

		flowcontainer = {
			parentanchor = hcenter
			datamodel = "[StatesPanel.AccessLocalGoods]"

			item = {
				textbox = {
					minimumsize = { 170 -1 }
					visible = "[Goods.IsLocal]"
					raw_text = "STATE_BUILDING_TAB_LOCAL_GOODS_INFO"
					autoresize = yes
					align = center|nobaseline

					tooltipwidget = {
						FancyTooltip_Goods = {}
					}
				}
			}
		}
	}

	type state_panel_buildings_content = flowcontainer {
		ignoreinvisible = yes
		direction = vertical
		using = default_list_position
		spacing = 10


		default_header_2texts = {
			visible = no
			blockoverride "text1" {
				text = "BUILDINGS"
			}
		}

		default_header = {
			blockoverride "text" {
				text = "URBAN_PART_OF_STATE"
			}
			
			# grid/list toggle
			button_icon_round_toggle = {
				size = { 29 29 }
				parentanchor = right|vcenter
				position = { -10 0 }
				
				blockoverride "on_click" {
					onclick = "[GetVariableSystem.Toggle('buildings_list')]"
				}
				blockoverride "view_1" {
					visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
				}
				blockoverride "view_2" {
					visible = "[GetVariableSystem.Exists('buildings_list')]"
				}
				blockoverride "icon_1" {
					texture = "gfx/interface/buttons/button_icons/grid.dds"
				}
				blockoverride "icon_2" {
					texture = "gfx/interface/buttons/button_icons/list.dds"
				}
				blockoverride "tooltip_1" {
					tooltip = "TOOLTIP_VIEW_LIST"
				}
				blockoverride "tooltip_2" {
					tooltip = "TOOLTIP_VIEW_GRID"
				}
			}
		}

		### URBAN BUILDINGS
		flowcontainer = {
			parentanchor = hcenter
			direction = vertical
			visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
			using = default_content_fade
			spacing = 10

			flowcontainer = {
				parentanchor = hcenter
				direction = vertical

				divider_clean = {}
			
				header_building_item = {
					datacontext = "[StatesPanel.AccessBuilding('building_urban_center')]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "TOTAL_URBAN_CENTERS"
					}					
				}

				divider_clean = {
					visible = "[GreaterThan_int32(StatesPanel.AccessBuilding('building_trade_center').GetExpansionLevel, '(int32)0')]"
				}

				header_building_item = {
					visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
					datacontext = "[StatesPanel.AccessBuilding('building_trade_center')]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "TOTAL_TRADE_CENTER"
					}					
				}

				divider_clean = {
					visible = "[GreaterThan_int32(StatesPanel.AccessBuilding('building_manor_house').GetExpansionLevel, '(int32)0')]"
				}

				header_building_item = {
					visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
					datacontext = "[StatesPanel.AccessBuilding('building_manor_house')]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "TOTAL_MANOR_HOUSE"
					}					
				}

				divider_clean = {
					visible = "[GreaterThan_int32(StatesPanel.AccessBuilding('building_financial_district').GetExpansionLevel, '(int32)0')]"
				}

				header_building_item = {
					visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
					datacontext = "[StatesPanel.AccessBuilding('building_financial_district')]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "TOTAL_FINANCIAL_DISTRICT"
					}					
				}

				divider_clean = {}
			}

			### URBAN BUILDINGS
			container = {
				datamodel = "[State.AccessCappedRuralBuildings]"

				dynamicgridbox = {
					name = "urban_building_list"
					datamodel = "[State.AccessUrbanBuildings]"
					datamodel_wrap = 4
					flipdirection = yes

					item = {
						building_item = {}
					}
				}

				widget = {
					size = { 135 180 }
					visible = "[GetPlayer.HasForeignInvestmentRights(State.GetOwner)]"
					enabled = "[GreaterThan_int32( StatesPanel.AccessState.GetNumConstructableUrbanBuildings,'(int32)0')]"
					position = "[StatesPanel.CalcBuildUrbanBuildingsButtonPosition]"
					
					button_icon_plus_square = {
						enabled = "[Not(IsDataModelEmpty(StatesPanel.GetState.GetPotentialUrbanBuildings))]"
						size = { 135 170 }
						tooltip = "BUILD_URBAN_BUILDING"
						onclick = "[StatesPanel.ToggleBuildUrbanBuildingsMenu(PdxGuiWidget.AccessSelf)]"

						
						blockoverride "icon_size" {
							size = { 80 80 }
						}
					}

					textbox = {
						using = fontsize_mega
						raw_text = "#BOLD [StatesPanel.AccessState.GetNumConstructableUrbanBuildings|+]#!"
						parentanchor = right
						align = hcenter|nobaseline
						autoresize = yes
						position = { -12 4 }

						background = {
							using = blurry_dark_background
						}
					}
				}
			}
		}
		
		### URBAN BUILDINGS LIST VERSION
		flowcontainer = {
			visible = "[GetVariableSystem.Exists('buildings_list')]"
			parentanchor = hcenter
			direction = vertical
			using = default_content_fade

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessBuilding('building_urban_center')]"
			}

			buildings_list_item = {
				visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
				datacontext = "[StatesPanel.AccessBuilding('building_trade_center')]"
			}

			buildings_list_item = {
				visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
				datacontext = "[StatesPanel.AccessBuilding('building_manor_house')]"
			}

			buildings_list_item = {
				visible = "[GreaterThan_int32(Building.GetExpansionLevel, '(int32)0')]"
				datacontext = "[StatesPanel.AccessBuilding('building_financial_district')]"
			}

			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessUrbanBuildings]"
				}
			}

			button_icon_plus_square = {
				visible = "[State.GetCountry.IsLocalPlayer]"
				enabled = "[GreaterThan_int32( StatesPanel.AccessState.GetNumConstructableUrbanBuildings,'(int32)0')]"
				size = { @panel_width 45 }
				tooltip = "BUILD_URBAN_BUILDING"
				onclick = "[StatesPanel.ToggleBuildUrbanBuildingsMenu(PdxGuiWidget.AccessSelf)]"
				blockoverride "icon_size" {
					size = { 45 100% }
				}

				textbox = {
					using = fontsize_large
					raw_text = "#BOLD [StatesPanel.AccessState.GetNumConstructableUrbanBuildings|+]#!"
					parentanchor = right
					align = hcenter|nobaseline
					autoresize = yes
					position = { -10 2 }

					background = {
						using = blurry_dark_background
					}
				}
			}
		}

		### RESOURCE BUILDINGS
		default_header = {
			visible = "[Not(IsDataModelEmpty( State.AccessCappedRuralBuildings ))]"
			blockoverride "text" {
				text = "RESOURCE"
			}
		}
		
		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
			parentanchor = hcenter
			minimumsize = { @panel_width -1 }
			direction = vertical
			using = default_content_fade

			fixedgridbox = {
				datamodel = "[State.AccessCappedRuralBuildings]"
				addcolumn = 135
				addrow = 210
				datamodel_wrap = 4
				flipdirection = yes

				item = {
					building_item = {}
				}
			}
		}
		
		### RESOURCE LIST VERSION
		flowcontainer = {
			visible = "[And( GetVariableSystem.Exists('buildings_list'), Not(IsDataModelEmpty(State.AccessCappedRuralBuildings)))]"
			using = default_content_fade
			parentanchor = hcenter
			direction = vertical
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessCappedRuralBuildings]"
				}
			}
		}

		### AGRICULTURE
		default_header = {
			blockoverride "text" {
				text = "AGRICULTURE"
			}
		}

		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
			using = default_content_fade
			minimumsize = { @panel_width -1 }
			using = default_list_position
			direction = vertical
			spacing = 10
				
			flowcontainer = {
				parentanchor = hcenter
				direction = vertical

				divider_clean = {}

				### UNUSED ARABLE LAND
				header_building_item = {
					datacontext = "[StatesPanel.AccessSubsistenceBuilding]"

					tooltipwidget = {
						FancyTooltip_Building = {}
					}

					blockoverride "text" {
						text = "UNUSED_ARABLE"
					}					
				}

				divider_clean = {}
			}

			fixedgridbox = {
				datamodel = "[State.AccessUncappedRuralBuildings]"
				addcolumn = 135
				addrow = 210
				datamodel_wrap = 4
				flipdirection = yes

				item = {
					building_item = {}
				}
			}
		}

		### AGRICULTURE LIST VERSION
		flowcontainer = {
			direction = vertical
			using = default_list_position
			visible = "[GetVariableSystem.Exists('buildings_list')]"
			using = default_content_fade
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessUncappedRuralBuildings]"
				}
			}

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessSubsistenceBuilding]"
			}
		}
		
		### DEVELOPMENT
		default_header = {
			blockoverride "text" {
				text = "INFRA_PART_OF_STATE"
			}
		}

		state_panel_button_unclickable = {
			visible = "[Not(GetVariableSystem.Exists('buildings_list'))]"
			using = default_list_position
			using = default_content_fade

			container = {
				minimumsize = { @panel_width -1 }
				resizeparent = yes

				flowcontainer = {
					direction = vertical
					spacing = 10

					flowcontainer = {
						parentanchor = hcenter
						direction = vertical

						divider_clean = {
							visible = no
						}

						header_building_item = {
							visible = no
							datacontext = "[StatesPanel.AccessBuilding('building_barracks')]"

							tooltipwidget = {
								FancyTooltip_Building = {}
							}

							blockoverride "text" {
								text = "TOTAL_BARRACKS"
							}					
						}

						divider_clean = {}

						header_building_item = {
							datacontext = "[StatesPanel.AccessBuilding('building_conscription_center')]"

							tooltipwidget = {
								FancyTooltip_Building = {}
							}

							blockoverride "text" {
								text = "TOTAL_CONSCRIPTION_CENTER"
							}					
						}

						divider_clean = {}

						header_building_item = {
							visible = no
							datacontext = "[StatesPanel.AccessBuilding('building_naval_base')]"

							tooltipwidget = {
								FancyTooltip_Building = {}
							}

							blockoverride "text" {
								text = "TOTAL_NAVAL_BASE"
							}					
						}

						divider_clean = {
							visible = no
						}
					}

					fixedgridbox = {
						datamodel = "[State.AccessDevelopmentBuildings]"
						addcolumn = 135
						addrow = 210
						datamodel_wrap = 4
						flipdirection = yes

						item = {
							building_item = {}
						}
					}
				}
			}
		}
		
		### DEVELOPMENT LIST VERSION
		flowcontainer = {
			visible = "[GetVariableSystem.Exists('buildings_list')]"
			using = default_content_fade
			margin_top = 5
			margin_bottom = 10
			direction = vertical
			parentanchor = hcenter

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessBuilding('building_barracks')]"
			}

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessBuilding('building_conscription_center')]"
			}

			buildings_list_item = {
				datacontext = "[StatesPanel.AccessBuilding('building_naval_base')]"
			}
			
			buildings_list = {
				blockoverride "datamodel" {
					datamodel = "[State.AccessDevelopmentBuildings]"
				}
			}
		}
	}
}

types state_buildings 
{
	type buildings_list = flowcontainer {
		parentanchor = hcenter
		minimumsize = { @panel_width -1 }
		direction = vertical

		dynamicgridbox = {
			block "datamodel" {}

			item = {
				buildings_list_item = {}
			}
		}
	}

	type buildings_list_item = flowcontainer {

		minimumsize = { @panel_width 40 }
		background = {
			using = light_bg
		}	

		button = {
			using = default_button
			onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
			onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
			onmousehierarchyenter = "[AccessHighlightManager.HighlightBuilding(Building.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			parentanchor = vcenter
			size = { 220 40 }

			tooltipwidget = {
				FancyTooltip_Building = {}
			}

			hbox = {
				resizeparent = yes
				margin_right = 5
				icon = {
					alpha = "[TransparentIfFalse(Building.IsActive)]"
					size = { 40 40 }
					texture = "[Building.GetIcon]"
				}

				spacing = 3
				textbox = {
					layoutstretchfactor_horizontal = 10
					layoutpolicy_horizontal = expanding
					alpha = "[TransparentIfFalse(Building.IsActive)]"
					text = "[Building.GetNameNoFormatting]"
					elide = right
					fontsize_min = 14
					align = nobaseline
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					expand = {
						layoutstretchfactor_horizontal = 1
					}

					### INPUT WARNING
					icon = {
						visible = "[Building.HasAnyInputShortage]"
						size = { 30 30 }
						texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
						tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
					}

					employment_indicator_icon = {}
				}
			}
		}

		widget = {
			size = { 315 40 }

			hbox = {
				margin = { 5 0 }
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 7

				building_auto_expand_toggle = {
					size = { 30 30 }
				}

				widget = {
					visible = "[Not(IsPotential( Building.ToggleAutoExpand ))]"
					size = { 30 30 }
				}

				widget = {
					size = { 160 40 }

					hbox = {
						spacing = 5

						textbox = {
							visible = "[Building.IsActive]"
							layoutpolicy_horizontal = expanding
							text = "BUILDING_SIZE"
							using = building_size_tooltip_with_ownership
							using = tooltip_above
							fontsize_min = 10
							elide = right
							align = nobaseline
						}

						textbox = {
							visible = "[Not(Building.IsActive)]"
							layoutpolicy_horizontal = expanding
							alpha = 0.5
							text = "BUILDING_SIZE"
							using = building_size_tooltip_with_ownership
							using = tooltip_above
							fontsize_min = 10
							elide = right
							align = nobaseline
						}

						textbox = {
							visible = "[And(And(And(Not(Building.IsGovernmentFunded), Building.IsActive), Not(Building.IsSubsidized)), Not(Building.IsSubsistenceBuilding))]"
							layoutpolicy_horizontal = expanding
							alpha = "[TransparentIfFalse(Building.IsActive)]"
							raw_text = "#v [Building.GetAverageAnnualEarningsPerEmployeeFormatted|1+]#!"
							tooltip = "TOOLTIP_BUILDING_PRODUCTIVITY"
							using = tooltip_above
							align = nobaseline

							tooltipwidget = {
								GraphTooltip_Productivity = {}
							}
						}

						widget = {
							size = { 50 23 }
							visible = "[And(Building.IsGovernmentFunded, Building.IsActive)]"

							icon = {
								visible = "[And(Building.IsGovernmentFunded, Building.IsActive)]"
								texture = "gfx/interface/icons/generic_icons/government_building_icon.dds"
								size = { 23 23 }
								tooltip = "TOOLTIP_BUILDINGS_BUDGET"
								using = tooltip_above
							}
						}

						widget = {
							size = { 20 20 }
						}
					}

					### subsidize + productivity
					widget = {
						parentanchor = right|vcenter
						size = { 80 30 }
						
						textbox = {
							visible = "[And(Building.GetBuildingType.CanBeSubsidized, Building.IsSubsidized)]"
							datacontext = "[Building]"
							raw_text = "#N #bold -[Building.GetSubsidies|D]#!"
							tooltip = "[Building.GetSubsidiesDesc]"
							autoresize = yes
							position = { 0 0 }
							align = nobaseline
							parentanchor = right|vcenter
							alpha = 0
							
							state = {
								name = _show
								position_x = -34
								alpha = 1
								duration = 0.2
								using = Animation_Curve_Default
							}
							state = {
								name = _hide
								alpha = 0
								duration = 0.4
								position_x = 0
								using = Animation_Curve_Default
							}
						}
						
						widget = {
							size = { 30 30 }
							parentanchor = right
							
							icon = {
								visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
								size = { 130% 130% }
								using = rotate_glow_blue
								alwaystransparent = yes
								parentanchor = center
								using = default_fade_in_out
							}

							button_icon_round_action = {
								visible = "[And(Building.GetBuildingType.CanBeSubsidized,Building.IsSubsidized)]"
								size = { 100% 100% }
								enabled = "[IsValid( Building.ToggleSubsidies )]"
								onclick = "[Execute( Building.ToggleSubsidies )]" 
								tooltip = SUBSIDIZED_YES
								
								blockoverride "icon" {
									texture = "gfx/interface/production_methods/subsidized.dds"
								}

								blockoverride "icon_size" {
									size = { 80% 80% }
								}
							}
							
							button_icon_round_action = {
								visible = "[And(Building.GetBuildingType.CanBeSubsidized,Not(Building.IsSubsidized))]"
								size = { 100% 100% }							
								enabled = "[IsValid( Building.ToggleSubsidies )]"
								onclick = "[Execute( Building.ToggleSubsidies )]" 
								tooltip = SUBSIDIZED_NO
								
								blockoverride "icon" {
									texture = "gfx/interface/production_methods/subsidized_not.dds"
								}

								blockoverride "icon_size" {
									size = { 80% 80% }
								}
							}
						}
					}
				}

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					widget = {
						size = { 40 10 }
						alpha = "[TransparentIfFalse(Building.IsActive)]"
						visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"
						using = cash_reserves_tooltip_with_graph

						gold_progressbar_horizontal = {
							size = { 100% 100% }
							alpha = "[TransparentIfFalse(Building.IsActive)]"
							visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"

							blockoverride "glow_size" {
								size = { 40 100% }
							}

							blockoverride "values" {
								min = 0
								max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
								value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
							}
						}

						changed_value_decreased_progressbar_horizontal = {
							size = { 100% 100% }
							visible = "[GreaterThan_CFixedPoint(GetPrevTrendValue(Building.GetCashReservesTrend), GetTrendValue(Building.GetCashReservesTrend))]"

							blockoverride "second_progressbar" {}

							blockoverride "values" {
								min = 0
								max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
								value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
							}
							blockoverride "glow_size" {
								size = { 40 100% }
							}
							blockoverride "arrow_texture_density" {
								texture_density = 13 #use to match height of progressbar
							}
						}

						changed_value_increased_progressbar_horizontal = {
							size = { 100% 100% }
							visible = "[GreaterThan_CFixedPoint(GetTrendValue(Building.GetCashReservesTrend), GetPrevTrendValue(Building.GetCashReservesTrend))]"

							blockoverride "second_progressbar" {}

							blockoverride "values" {
								min = 0
								max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
								value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
							}
							blockoverride "glow_size" {
								size = { 40 100% }
							}
							blockoverride "arrow_texture_density" {
								texture_density = 13 #use to match height of progressbar
							}
						}

						progressbar_highlight = {
							visible = "[GreaterThanOrEqualTo_CFixedPoint(Building.GetCurrentCashReserves, Building.GetMaxCashReserves)]"
						}
					}

					widget = {
						visible = "[Not(And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive))]"
						size = { 40 10 }
					}
				}

				widget = {
					size = { 60 40 }

					### CANCEL CONSTRUCTION
					button_icon_minus_action = {
						parentanchor = left|vcenter
						size = { 30 30 }
						tooltip = "[Building.GetCancelConstructionTooltip]"
						visible = "[And(IsValid( Building.CancelConstruction ), Not(Building.IsMilitaryBuilding))]"
						onclick = "[Execute( Building.CancelConstruction )]"
						using = tooltip_below
					}

					### EXPAND BUTTON
					expand_building_button = {
						parentanchor = right|vcenter
						blockoverride "button_size" {
							size = { 30 30 }
						}
					}
				}
			}
		}
	}
}
