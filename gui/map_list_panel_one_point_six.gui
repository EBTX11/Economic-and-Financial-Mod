# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types map_list_panel_types {
	
	### BUILD BUILDINGS
	type build_building_map_list_panel = map_list_panel {
		name = "build_building_map_list_panel"

		blockoverride "headers" {
			direction = vertical
			
			flowcontainer = {
				direction = vertical
				parentanchor = hcenter

				construction_filters = {}
				construction_headers_condensed = {
					visible = "[Not(GetVariableSystem.Exists('construction_list_condensed'))]"
				}
				construction_headers_full = {
					visible = "[GetVariableSystem.Exists('construction_list_condensed')]"
				}
			}
		}

		blockoverride "item" {
			item = {
				flowcontainer = {
					construction_interaction_item_condensed = {
						visible = "[Not(GetVariableSystem.Exists('construction_list_condensed'))]"
					}
					construction_interaction_item_full = {
						visible = "[GetVariableSystem.Exists('construction_list_condensed')]"
					}
				}
			}
		}
	}

	type construction_interaction_item_condensed = map_list_panel_item_interaction {
		blockoverride "name_button_visibility" {
			visible = yes
		}

		blockoverride "name_button_size" {
			size = { 120 40 }
		}

		blockoverride "name_button_properties" {

			datacontext = "[MapListOption.GetBuildingData.GetState]"

			onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

			datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
			onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
			enabled = "[Building.IsValid]"
			onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
			
			tooltipwidget = {
				FancyTooltip_Building = {}
			}

			textbox = {
				visible = "[Not(And(State.IsUnincorporated, Not(State.IsIncorporating)))]"
				margin = { 10 0 }
				size = { 120 25 }
				align = left|nobaseline
				text = "[State.GetNameNoFormatting]"
				parentanchor = vcenter
				elide = right
				fontsize_min = 12
			}

			textbox = {
				visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
				margin = { 10 0 }
				size = { 95 25 }
				align = left|nobaseline
				text = "[State.GetNameNoFormatting]"
				parentanchor = vcenter
				elide = right
				fontsize_min = 12
			}

			icon = {
				visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
				parentanchor = right|vcenter
				position = { -5 0 }
				size = { 25 25 }
				texture = "gfx/interface/icons/state_status_icons/unincorporated_state.dds"
			}
		}

		blockoverride "values" {

			textbox = {
				datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
				margin = { 5 0 }
				size = { 70 25 }
				align = right|nobaseline
				text = "[Building.GetExpansionLevelDesc]"
				parentanchor = vcenter
				elide = right
				using = tooltip_above
				alpha = "[TransparentIfFalse( Or( GreaterThan_int32(Building.GetExpansionLevel, '(int32)0'), Building.HasConstructionQueued ))]"
				fontsize_min = 12
			}

			textbox = {
				margin = { 5 0 }
				margin_right = 5
				size = { 60 25 }
				align = right|nobaseline
				datacontext = "[MapListOption.GetBuildingData.GetState]"
				raw_text = "#v [State.GetInfrastructureBalance|0+=]#!"
				tooltip = "STATE_INFRASTRUCTURE_DESC"
				parentanchor = vcenter
				elide = right
				visible = "[Not(MapListOption.GetBuildingData.GetBuilding.GetBuildingType.IsMilitaryBuilding)]"
			}

			widget = {
				size = { 105 25 }
				visible = "[MapListOption.GetBuildingData.GetBuilding.GetBuildingType.IsMilitaryBuilding]"
				parentanchor = vcenter
				textbox = {
					margin = { 5 0 }
					size = { 105 25 }
					align = right|nobaseline
					datacontext = "[MapListOption.AccessBuildingData.AccessBuilding]"
					datacontext = "[MapListOption.AccessBuildingData.GetMilitaryFormation]"
					text = "UNITS_PROVIDED_FROM_BUILDING"
					tooltip = "UNITS_PROVIDED_FROM_BUILDING_TOOLTIP"
					parentanchor = vcenter
					elide = right
					visible = "[NotZero(Building.GetExpansionLevel)]"
					alpha = "[TransparentIfZero_int32(Building.GetNumCombatUnitsProvidedToFormation(MilitaryFormation.Self))]"
				}

				textbox = {
					margin = { 5 0 }
					size = { 105 25 }
					align = right|nobaseline
					datacontext = "[MapListOption.AccessBuildingData.AccessBuilding]"
					datacontext = "[MapListOption.AccessBuildingData.GetMilitaryFormation]"
					text = "NOT_AVAILABLE"
					parentanchor = vcenter
					elide = right
					visible = "[IsZero(Building.GetExpansionLevel)]"
					alpha = "[TransparentIfTrue('(bool)yes')]"
				}
			}

			### SETTING - JOBSEEKERS
			textbox = {
				datacontext = "[MapListOption.GetBuildingData.GetState]"
				margin = { 5 0 }
				size = { 85 25 }
				align = right|nobaseline
				text = "MAP_LIST_STATE_AVAILABLE_LABOR"
				parentanchor = vcenter
				elide = right
				tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
				visible = "[Not(GetVariableSystem.HasValue('hide_jobseekers', 'true'))]"
			}

			### SETTING - PEASANTS
			textbox = {
				datacontext = "[MapListOption.GetBuildingData.GetState]"
				margin = { 5 0 }
				size = { 85 25 }
				align = right|nobaseline
				text = "[State.GetNumSubsistenceWorkingAdults|Dv] [SelectLocalization(State.HasInsufficientQualificationsForAvailablePositions, '@red_cross!', '@green_checkmark!')]"
				parentanchor = vcenter
				elide = right
				tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
				visible = "[GetVariableSystem.HasValue('show_peasants', 'true')]"
			}

			### SETTING - UNEMPLOYED
			textbox = {
				datacontext = "[MapListOption.GetBuildingData.GetState]"
				margin = { 5 0 }
				size = { 85 25 }
				align = right|nobaseline
				raw_text = "#variable [State.GetNumUnemployedWorkingAdults|D]#! [SelectLocalization(State.HasInsufficientQualificationsForAvailablePositions, '@red_cross!', '@green_checkmark!')]"
				parentanchor = vcenter
				elide = right
				tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
				visible = "[GetVariableSystem.HasValue('show_unemployed', 'true')]"
			}

			flowcontainer = {
				visible = "[Not(MapListOption.GetBuildingData.GetBuilding.GetBuildingType.IsMilitaryBuilding)]"
				parentanchor = vcenter
				
				productivity_or_other_information = {
					blockoverride "productivity_info_datacontext" {
						datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
						datacontext = "[Building.GetState]"
					}

					blockoverride "productivity_info_text_style" {
						size = { 70 25 }
						margin = { 5 0 }
						margin_right = 10
						align = right|nobaseline
						parentanchor = vcenter
					}
				}

				textbox = {
					margin = { 5 0 }
					margin_right = 10
					size = { 80 25 }
					align = right|nobaseline
					datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
					raw_text = "#v [Building.GetBuildingType.GetExpansionRevenueImpact(Building.Self, Building.GetState)|K+=]#!"
					tooltip = "[Building.GetBuildingType.GetExpansionRevenueImpactDesc(Building.Self, Building.GetState)]"
					parentanchor = vcenter
					elide = right
				}							
			}	

			textbox = {
				margin = { 5 0 }
				margin_right = 5
				size = { 105 25 }
				align = right|nobaseline
				datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
				raw_text = "#v [Building.GetState.GetStateRegion.GetStrategicRegion.GetName]#!"
				parentanchor = vcenter
				elide = right
				visible = "[MapListOption.GetBuildingData.GetBuilding.GetBuildingType.IsMilitaryBuilding]"
			}	
		}
	}

	type construction_interaction_item_full = flowcontainer {
		margin_bottom = 5
		flowcontainer = {
			direction = vertical
			
			background = {
				using = entry_bg_simple
			}

			datacontext = "[MapListOption.AccessBuildingData.AccessState]"
			datacontext = "[MapListOption.AccessBuildingData.AccessBuilding]"

			onmousehierarchyenter = "[AccessHighlightManager.HighlightState(State.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			onmousehierarchyenter = "[PdxGuiWidget.FindChild('building_goto').InterruptThenTriggerAnimation('hide_building_goto','show_building_goto')]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('building_goto').InterruptThenTriggerAnimation('show_building_goto','hide_building_goto')]"
			alwaystransparent = no

			onmousehierarchyenter = "[MapListOption.OnMouseEnter]"
			onmousehierarchyleave = "[MapListOption.OnMouseLeave]"

						
			tooltipwidget = {
				FancyTooltip_Building = {}
			}

			icon = {
				using = highlighted_square_selection
				visible = "[MapListOption.IsMapTargetHighlighted]"
			}

			container = {
				minimumsize = { @panel_width 40 }

				block "background" {
					background = {
						name = "map_list_status_bg"
						texture = "gfx/interface/map_list/map_list_status_bg.dds"
						framesize = { 600 80 }
						size = { 600 40 }
						alpha = "[TransparentIfFalse(Building.IsActive)]"
						position = { -5 0 }
						frame = "[MapListOption.GetBackgroundStatusFrame]"
						parentanchor = vcenter
						alwaystransparent = yes
					}
				}

				flowcontainer = {
					parentanchor = vcenter

					textbox = {
						text = "[Building.GetState.GetName]"
						autoresize = yes
						parentanchor = vcenter
						align = nobaseline
						margin_left = 10
						margin_right = 7
					}

					button_icon_goto = {
						alpha = 0
						name = building_goto

						state = {
							name = show_building_goto
							delay = 0.15
							alpha = 1
							duration = 0.15
							using = Animation_Curve_Default
						}

						state = {
							name = hide_building_goto
							alpha = 0
							duration = 0
							using = Animation_Curve_Default
						}

						size = { 25 25 }
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
						visible = "[Building.IsValid]"
						tooltip = "GO_TO_BUTTON_BUILDING"
						parentanchor = vcenter
					}
				}


				### ACTION BUTTONS
				flowcontainer = {
					parentanchor = right|vcenter
					spacing = 5
					margin_right = 5

					### TIMED MODIFIERS
					flowcontainer = {
						parentanchor = vcenter
						margin = { 5 0 }
						visible = "[Not(IsDataModelEmpty(Building.GetTimedModifiers))]"

						datamodel = "[Building.GetTimedModifiers]"
						spacing = 5

						item = {
							icon = {
								tooltip = "[TimedModifier.GetTooltip]"
								texture = "[TimedModifier.GetIcon]"
								size = { 30 30 }
							}
						}
					}

					flowcontainer = {
						visible = "[Not(IsDataModelEmpty(State.AccessStateRegion.AccessTraits))]"
						datamodel = "[State.AccessStateRegion.AccessTraits]"
						parentanchor = vcenter
						spacing = 5
						righttoleft = yes

						item = {
							icon = {
								size = { 30 30 }
								tooltip = TOOLTIP_STATE_TRAIT
								onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
								onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
								alwaystransparent = no
								texture = "[StateTrait.GetTexture]"
							}
						}
					}

					icon = {
						visible = "[And(State.IsUnincorporated, Not(State.IsIncorporating))]"
						parentanchor = vcenter
						size = { 30 30 }
						texture = "gfx/interface/icons/state_status_icons/unincorporated_state.dds"
					}

					building_level_controls = {
						parentanchor = vcenter
						minimumsize = { -1 -1 }

						blockoverride "controller_size" {
							size = { 184 30 }
						}

						blockoverride "button_size" {
							size = { 30 30 }
						}

						blockoverride "expand_button_visibility" {
							visible = "[And(Building.GetOwner.IsLocalPlayer, Building.IsExpandable)]"
						}
					}
				}
			}

			widget = {
				size = { @panel_width 40 }

				alpha = "[TransparentIfFalse(Building.IsActive)]"

				state = {
					name = _mouse_enter
					on_start = "[PdxGuiWidget.FindChild('map_list_status_bg').TriggerAnimation('map_list_status_mouse_enter')]"
				}

				state = {
					name = _mouse_release
					on_start = "[PdxGuiWidget.FindChild('map_list_status_bg').TriggerAnimation('map_list_status_mouse_release')]"
				}


				flowcontainer = {
					parentanchor = vcenter
					margin_left = 10

					textbox = {
						margin = { 5 0 }
						margin_right = 10
						size = { 70 25 }
						align = right|nobaseline
						text = "[State.GetConstructionEfficiency|%1+=]"
						tooltip = "[State.GetConstructionEfficiencyTooltip]"
						parentanchor = vcenter
						elide = right
					}

					vertical_divider = {}

					textbox = {
						margin = { 5 0 }
						margin_right = 10
						size = { 60 25 }
						align = right|nobaseline
						datacontext = "[MapListOption.GetBuildingData.GetState]"
						raw_text = "#v [State.GetInfrastructureBalance|0+=]#!"
						tooltip = "STATE_INFRASTRUCTURE_DESC"
						parentanchor = vcenter
						elide = right
						visible = "[Not(MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding)]"
					}

					vertical_divider = {
						visible = "[Not(MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding)]"
					}

					### SETTING - JOBSEEKERS
					textbox = {
						datacontext = "[MapListOption.GetBuildingData.GetState]"
						margin = { 5 0 }
						margin_right = 10
						size = { 95 25 }
						align = right|nobaseline
						text = "MAP_LIST_STATE_AVAILABLE_LABOR"
						parentanchor = vcenter
						elide = right
						tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
						visible = "[Not(GetVariableSystem.HasValue('hide_jobseekers', 'true'))]"
					}

					### SETTING - PEASANTS
					textbox = {
						datacontext = "[MapListOption.GetBuildingData.GetState]"
						margin = { 5 0 }
						margin_right = 10
						size = { 95 25 }
						align = right|nobaseline
						text = "[State.GetNumSubsistenceWorkingAdults|Dv] [SelectLocalization(State.HasInsufficientQualificationsForAvailablePositions, '@red_cross!', '@green_checkmark!')]"
						parentanchor = vcenter
						elide = right
						tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
						visible = "[GetVariableSystem.HasValue('show_peasants', 'true')]"
					}

					### SETTING - UNEMPLOYED
					textbox = {
						datacontext = "[MapListOption.GetBuildingData.GetState]"
						margin = { 5 0 }
						margin_right = 10
						size = { 95 25 }
						align = right|nobaseline
						raw_text = "#variable [State.GetNumUnemployedWorkingAdults|D]#! [SelectLocalization(State.HasInsufficientQualificationsForAvailablePositions, '@red_cross!', '@green_checkmark!')]"
						parentanchor = vcenter
						elide = right
						tooltip = "STATE_AVAILABLE_LABOR_TOOLTIP"
						visible = "[GetVariableSystem.HasValue('show_unemployed', 'true')]"
					}

					vertical_divider = {}

					flowcontainer = {
						visible = "[Not(MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding)]"
						parentanchor = vcenter

						productivity_or_other_information = {
							blockoverride "productivity_info_datacontext" {
								datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
								datacontext = "[Building.GetState]"
							}

							blockoverride "productivity_info_text_style" {
								size = { 70 25 }
								margin = { 5 0 }
								margin_right = 10
								align = right|nobaseline
								parentanchor = vcenter
							}
						}

						vertical_divider = {}

						textbox = {
							margin = { 5 0 }
							margin_right = 10
							size = { 80 25 }
							align = right|nobaseline
							datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
							raw_text = "#v [Building.GetBuildingType.GetExpansionRevenueImpact(Building.Self, Building.GetState)|K+=]#!"
							tooltip = "[Building.GetBuildingType.GetExpansionRevenueImpactDesc(Building.Self, Building.GetState)]"
							parentanchor = vcenter
							elide = right
						}
					}

					vertical_divider = {}

					widget = {
						size = { 105 25 }
						visible = "[MapListOption.GetBuildingData.GetBuilding.GetBuildingType.IsMilitaryBuilding]"
						parentanchor = vcenter
						textbox = {
							margin = { 5 0 }
							margin_right = 10
							size = { 105 25 }
							align = right|nobaseline
							datacontext = "[MapListOption.AccessBuildingData.AccessBuilding]"
							datacontext = "[MapListOption.AccessBuildingData.GetMilitaryFormation]"
							text = "UNITS_PROVIDED_FROM_BUILDING"
							tooltip = "UNITS_PROVIDED_FROM_BUILDING_TOOLTIP"
							parentanchor = vcenter
							elide = right
							visible = "[NotZero(Building.GetExpansionLevel)]"
							alpha = "[TransparentIfZero_int32(Building.GetNumCombatUnitsProvidedToFormation(MilitaryFormation.Self))]"
						}

						textbox = {
							margin = { 5 0 }
							margin_right = 10
							size = { 100 25 }
							align = right|nobaseline
							datacontext = "[MapListOption.AccessBuildingData.AccessBuilding]"
							datacontext = "[MapListOption.AccessBuildingData.GetMilitaryFormation]"
							text = "NOT_AVAILABLE"
							parentanchor = vcenter
							elide = right
							visible = "[IsZero(Building.GetExpansionLevel)]"
							alpha = "[TransparentIfTrue('(bool)yes')]"
						}
					}

					vertical_divider = {
						visible = "[MapListOption.GetBuildingData.GetBuilding.GetBuildingType.IsMilitaryBuilding]"
					}

					textbox = {
						margin = { 5 0 }
						margin_right = 10
						size = { 105 25 }
						align = right|nobaseline
						datacontext = "[MapListOption.GetBuildingData.GetBuilding]"
						raw_text = "#v [Building.GetState.GetStateRegion.GetStrategicRegion.GetName]#!"
						parentanchor = vcenter
						elide = right
						visible = "[MapListOption.GetBuildingData.GetBuilding.GetBuildingType.IsMilitaryBuilding]"
					}

					vertical_divider = {
						visible = "[MapListOption.GetBuildingData.GetBuilding.GetBuildingType.IsMilitaryBuilding]"
					}


					widget = {
						size = { 155 30 }

						hbox = {
							margin_left = 10
							margin_right = 5
							spacing = 5

							vbox = {
								spacing = 6
								layoutpolicy_horizontal = expanding
								
								default_progressbar_horizontal = {
									visible = "[Building.IsActive]"
									size = { 65 10 }
									layoutpolicy_horizontal = expanding
									
									tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
									
									blockoverride "values" {
										value = "[FixedPointToFloat(Building.GetEmploymentPercentage)]"
										min = 0
										max = 1
									}
								}

								widget = {
									alpha = "[TransparentIfFalse(Building.IsActive)]"
									visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"
									size = { 65 10 }
									layoutpolicy_horizontal = expanding
									
									using = cash_reserves_tooltip_with_graph

									gold_progressbar_horizontal = {
										size = { 100% 100% }
										alpha = "[TransparentIfFalse(Building.IsActive)]"
										visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"

										blockoverride "glow_size" {
											size = { 40 100% }
										}

										parentanchor = vcenter
										blockoverride "values" {
											min = 0
											max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
											value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
										}
									}

									changed_value_decreased_progressbar_horizontal = {
										size = { 100% 100% }
										visible = "[GreaterThan_CFixedPoint(GetPrevTrendValue(Building.GetCashReservesTrend), GetTrendValue(Building.GetCashReservesTrend))]"

										blockoverride "second_progressbar" {}

										blockoverride "values" {
											min = 0
											max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
											value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
										}
										blockoverride "glow_size" {
											size = { 40 100% }
										}
										blockoverride "arrow_texture_density" {
											texture_density = 14 #use to match height of progressbar
										}
									}

									changed_value_increased_progressbar_horizontal = {
										size = { 100% 100% }
										visible = "[GreaterThan_CFixedPoint(GetTrendValue(Building.GetCashReservesTrend), GetPrevTrendValue(Building.GetCashReservesTrend))]"

										blockoverride "second_progressbar" {}

										blockoverride "values" {
											min = 0
											max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
											value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
										}
										blockoverride "glow_size" {
											size = { 40 100% }
										}
										blockoverride "arrow_texture_density" {
											texture_density = 14 #use to match height of progressbar
										}
									}
								}
							}

							employment_indicator_icon = {}
						}
					}
				}
			}

			divider_clean = {
				parentanchor = hcenter
				size = { 520 1 }
				visible = "[Building.IsActive]"
			}

			flowcontainer = {
				visible = "[Building.IsActive]"
				margin_top = 5
				margin_bottom = 10
				margin_left = 10

				condensed_building_information_pms = {
					blockoverride "pms_slot_sizes" {		
						addcolumn = 32
						addrow = 33
					}	
		
					blockoverride "pms_item_size" {
						size = { 33 33 }	
					}

					blockoverride "pms_minimumsize" {
						minimumsize = { 160 30 }
					}

					blockoverride "pms_number_visibility" {
						visible = no
					}
				}

				widget = {
					size = { 370 30 }
					parentanchor = vcenter

					flowcontainer = {
						parentanchor = right

						widget = {
							size = { 170 30 }

							flowcontainer = {
								visible = "[LessThan_int32(GetDataModelSize(Building.AccessConsumedGoods), '(int32)4')]"
								parentanchor = right|vcenter
								datamodel = "[Building.AccessConsumedGoods]"
								margin_right = 10
								spacing = 5

								item = {
									flowcontainer = {
										margin_right = 10
										parentanchor = vcenter
										tooltip = "[Goods.GetStatePriceDesc]"
										
										icon = {
											size = { 30 30 }
											texture = "[Goods.GetTexture]"
											parentanchor = vcenter

											textbox = {
												text = "[Goods.GetCompareIconAgainstBasePriceNoTooltip( Goods.GetStatePrice )]"
												align = nobaseline
												autoresize = yes
												parentanchor = bottom|right
												position = { 5 2 }
											}
										}
									}
								}
							}

							overlappingitembox = {
								visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(Building.AccessConsumedGoods), '(int32)4')]"
								parentanchor = vcenter
								margin_left = 10
								size = { 170 30 }
								datamodel = "[Building.AccessConsumedGoods]"

								item = {
									flowcontainer = {
										margin_right = 10
										parentanchor = vcenter
										tooltip = "[Goods.GetStatePriceDesc]"
										
										icon = {
											size = { 30 30 }
											texture = "[Goods.GetTexture]"
											parentanchor = vcenter

											textbox = {
												text = "[Goods.GetCompareIconAgainstBasePriceNoTooltip( Goods.GetStatePrice )]"
												align = nobaseline
												autoresize = yes
												parentanchor = bottom|right
												position = { 5 2 }
											}
										}
									}
								}
							}
						}

						widget = {
							size = { 30 30 }
							visible = "[Or(And(Not(IsDataModelEmpty(Building.AccessConsumedGoods)), Not(IsDataModelEmpty(Building.AccessProducedGoods))), Building.IsMilitaryBuilding )]"

							icon = {
								size = { 20 20 }
								texture = "gfx/interface/icons/generic_icons/turns_into.dds"
								parentanchor = center
							}
						}

						flowcontainer = {
							visible = "[LessThan_int32(GetDataModelSize(Building.AccessProducedGoods), '(int32)4')]"
							parentanchor = vcenter
							datamodel = "[Building.AccessProducedGoods]"
							margin_left = 10
							spacing = 5
							margin_right = 5

							item = {
								flowcontainer = {
									margin_right = 10
									parentanchor = vcenter
									tooltip = "[Goods.GetStatePriceDesc]"
									
									icon = {
										size = { 30 30 }
										texture = "[Goods.GetTexture]"
										parentanchor = vcenter

										textbox = {
											text = "[Goods.GetCompareIconAgainstBasePriceNoTooltip( Goods.GetStatePrice )]"
											align = nobaseline
											autoresize = yes
											parentanchor = bottom|right
											position = { 5 2 }
										}
									}
								}
							}
						}

						overlappingitembox = {
							visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(Building.AccessProducedGoods), '(int32)4')]"
							parentanchor = vcenter
							margin_left = 10
							size = { 170 30 }
							datamodel = "[Building.AccessProducedGoods]"

							item = {
								flowcontainer = {
									margin_right = 10
									parentanchor = vcenter
									tooltip = "[Goods.GetStatePriceDesc]"
									
									icon = {
										size = { 30 30 }
										texture = "[Goods.GetTexture]"
										parentanchor = vcenter

										textbox = {
											text = "[Goods.GetCompareIconAgainstBasePriceNoTooltip( Goods.GetStatePrice )]"
											align = nobaseline
											autoresize = yes
											parentanchor = bottom|right
											position = { 5 2 }
										}
									}
								}
							}
						}

						textbox = {
							autoresize = yes
							align = nobaseline
							datacontext = "[MapListOption.AccessBuildingData.AccessBuilding]"
							datacontext = "[MapListOption.AccessBuildingData.GetMilitaryFormation]"
							text = "UNITS_PROVIDED_FROM_BUILDING"
							tooltip = "UNITS_PROVIDED_FROM_BUILDING_TOOLTIP"
							parentanchor = vcenter
							elide = right
							margin_right = 10
							visible = "[Building.IsMilitaryBuilding]"
							alpha = "[TransparentIfZero_int32(Building.GetNumCombatUnitsProvidedToFormation(MilitaryFormation.Self))]"
						}
					}
				}
			}
		}
	}

	type construction_headers_condensed = flowcontainer {
		parentanchor = hcenter
		sort_button = {
			align = center|nobaseline
			text = "BUILDING_MAP_LIST_PANEL_STATE_HEADER"
			tooltip = "BUILDING_MAP_LIST_PANEL_STATE_HEADER_TOOLTIP"
			size = { 120 20 }
			onclick = "[MapListPanel.Sort('state')]"
		}

		sort_button = {
			align = center|nobaseline
			tooltip = "BUILDING_LEVEL_HEADER_TOOLTIP"
			size = { 70 20 }
			onclick = "[MapListPanel.Sort('size')]"
			button = {
				texture = "gfx/interface/buttons/sort_button_icons/sort_icon_size.dds"
				size = { 25 25 }
				parentanchor = center
				alwaystransparent = yes
			}
		}

		sort_button = {
			align = center|nobaseline
			text = "BUILDING_MAP_LIST_PANEL_INFRASTRUCTURE_HEADER"
			tooltip = "BUILDING_MAP_LIST_PANEL_INFRASTRUCTURE_HEADER_TOOLTIP"
			size = { 60 20 }
			onclick = "[MapListPanel.Sort('infrastructure_balance')]"
			visible = "[Not(MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding)]"
		}
		sort_button = {
			align = center|nobaseline
			text = "concept_units_short"
			size = { 105 20 }
			visible = "[MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding]"
			onclick = "[MapListPanel.Sort('units')]"
		}

		### SETTING - JOBSEEKERS
		sort_button = {
			align = center|nobaseline
			text = "BUILDING_MAP_LIST_PANEL_AVAILABLE_LABOR_HEADER"
			tooltip = "BUILDING_MAP_LIST_PANEL_AVAILABLE_LABOR_HEADER_TOOLTIP"
			size = { 85 20 }
			onclick = "[MapListPanel.Sort('jobseekers')]"
			visible = "[Not(GetVariableSystem.HasValue('hide_jobseekers', 'true'))]"
		}
		
		### SETTING - PEASANTS
		sort_button = {
			align = center|nobaseline
			text = "peasants_no_icon"
			size = { 85 20 }
			onclick = "[MapListPanel.Sort('peasants')]"
			visible = "[GetVariableSystem.HasValue('show_peasants', 'true')]"
		}
		
		### SETTING - UNEMPLOYED
		sort_button = {
			align = center|nobaseline
			text = "concept_unemployed"
			size = { 85 20 }
			onclick = "[MapListPanel.Sort('unemployed')]"
			visible = "[GetVariableSystem.HasValue('show_unemployed', 'true')]"
		}

		flowcontainer = {
			visible = "[Not(MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding)]"
			sort_button = {
				align = center|nobaseline
				tooltip = "BUILDING_PROFITABILITY_HEADER_TOOLTIP"
				size = { 70 20 }
				onclick = "[MapListPanel.Sort('profitability')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_profitability.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
				visible = "[Not(ObjectsEqual(MapListBuildingPanel.GetBuildingType, GetBuildingType('building_government_administration').Self))]"
			}

			sort_button = {
				align = center|nobaseline
				text = "concept_tax"
				tooltip = "BUILDING_TAXATION_CAPACITY_HEADER_TOOLTIP"
				size = { 70 20 }
				onclick = "[MapListPanel.Sort('tax_capacity_balance')]"
				visible = "[ObjectsEqual(MapListBuildingPanel.GetBuildingType, GetBuildingType('building_government_administration').Self)]"
			}
			sort_button = {
				align = center|nobaseline
				text = "BUILDING_MAP_LIST_PANEL_PROFIT_IMPACT_HEADER"
				tooltip = "BUILDING_MAP_LIST_PANEL_PROFIT_IMPACT_TOOLTIP"
				size = { 80 20 }
				onclick = "[MapListPanel.Sort('profit_impact')]"
			}
		}

		sort_button = {
			align = center|nobaseline
			text = "[concept_hq]"
			size = { 105 20 }
			onclick = "[MapListPanel.Sort('strategic_region')]"
			visible = "[MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding]"
		}

		sort_button = {
			align = center|nobaseline
			tooltip = "BUILDING_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
			size = { 55 20 }
			onclick = "[MapListPanel.Sort('status')]"
			button = {
				texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
				size = { 25 25 }
				parentanchor = center
				alwaystransparent = yes
			}
		}
	}

	type construction_headers_full = flowcontainer {
		direction = vertical
		parentanchor = hcenter

		### TOP ROW
		flowcontainer = {

			sort_button = {
				align = center|nobaseline
				text = "BUILDING_MAP_LIST_PANEL_STATE_HEADER"
				tooltip = "BUILDING_MAP_LIST_PANEL_STATE_HEADER_TOOLTIP"
				size = { 235 20 }
				onclick = "[MapListPanel.Sort('state')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "TRAITS"
				tooltip = "SORT_TRAITS_TOOLTIP"
				size = { 115 20 }
				onclick = "[MapListPanel.Sort('state')]"
			}
			sort_button = {
				align = center|nobaseline
				tooltip = "BUILDING_LEVEL_HEADER_TOOLTIP"
				size = { 95 20 }
				onclick = "[MapListPanel.Sort('size')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_size.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}

			sort_button = {
				align = center|nobaseline
				tooltip = "BUILDING_MAP_LIST_PANEL_STATUS_HEADER_TOOLTIP"
				size = { 95 20 }
				onclick = "[MapListPanel.Sort('status')]"
				button = {
					texture = "gfx/interface/buttons/sort_button_icons/sort_icon_status.dds"
					size = { 25 25 }
					parentanchor = center
					alwaystransparent = yes
				}
			}
		}

		### BOTTOM ROW
		flowcontainer = {


			sort_button = {
				align = center|nobaseline
				text = "CONSTRUCTION_EFFICIENCY_SHORT"
				tooltip = "SORT_CONSTRUCTION_EFFICIENCY_TOOLTIP"
				size = { 80 20 }
				onclick = "[MapListPanel.Sort('construction_efficiency')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "BUILDING_MAP_LIST_PANEL_INFRASTRUCTURE_HEADER"
				tooltip = "BUILDING_MAP_LIST_PANEL_INFRASTRUCTURE_HEADER_TOOLTIP"
				size = { 60 20 }
				onclick = "[MapListPanel.Sort('infrastructure_balance')]"
				visible = "[Not(MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding)]"
			}
			
			### SETTING - JOBSEEKERS
			sort_button = {
				align = center|nobaseline
				text = "BUILDING_MAP_LIST_PANEL_AVAILABLE_LABOR_HEADER"
				tooltip = "BUILDING_MAP_LIST_PANEL_AVAILABLE_LABOR_HEADER_TOOLTIP"
				size = { 95 20 }
				onclick = "[MapListPanel.Sort('jobseekers')]"
				visible = "[Not(GetVariableSystem.HasValue('hide_jobseekers', 'true'))]"
			}
			
			### SETTING - PEASANTS
			sort_button = {
				align = center|nobaseline
				text = "peasants_no_icon"
				size = { 95 20 }
				onclick = "[MapListPanel.Sort('peasants')]"
				visible = "[GetVariableSystem.HasValue('show_peasants', 'true')]"
			}
			
			### SETTING - UNEMPLOYED
			sort_button = {
				align = center|nobaseline
				text = "concept_unemployed"
				size = { 95 20 }
				onclick = "[MapListPanel.Sort('unemployed')]"
				visible = "[GetVariableSystem.HasValue('show_unemployed', 'true')]"
			}

			sort_button = {
				align = center|nobaseline
				text = "concept_units_short"
				size = { 105 20 }
				visible = "[MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding]"
				onclick = "[MapListPanel.Sort('units')]"
			}

			flowcontainer = {
				visible = "[Not(MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding)]"
				sort_button = {
					align = center|nobaseline
					tooltip = "BUILDING_PROFITABILITY_HEADER_TOOLTIP"
					size = { 70 20 }
					onclick = "[MapListPanel.Sort('profitability')]"
					button = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_profitability.dds"
						size = { 25 25 }
						parentanchor = center
						alwaystransparent = yes
					}
					visible = "[Not(ObjectsEqual(MapListBuildingPanel.GetBuildingType, GetBuildingType('building_government_administration').Self))]"
				}

				sort_button = {
					align = center|nobaseline
					text = "concept_tax"
					tooltip = "BUILDING_TAXATION_CAPACITY_HEADER_TOOLTIP"
					size = { 70 20 }
					onclick = "[MapListPanel.Sort('tax_capacity_balance')]"
					visible = "[ObjectsEqual(MapListBuildingPanel.GetBuildingType, GetBuildingType('building_government_administration').Self)]"
				}
				sort_button = {
					align = center|nobaseline
					text = "BUILDING_MAP_LIST_PANEL_PROFIT_IMPACT_HEADER"
					tooltip = "BUILDING_MAP_LIST_PANEL_PROFIT_IMPACT_TOOLTIP"
					size = { 80 20 }
					onclick = "[MapListPanel.Sort('profit_impact')]"
				}
			}
			sort_button = {
				align = center|nobaseline
				text = "[concept_hq]"
				size = { 105 20 }
				onclick = "[MapListPanel.Sort('strategic_region')]"
				visible = "[MapListBuildingPanel.GetBuildingType.IsMilitaryBuilding]"
			}
			sort_button = {
				align = center|nobaseline
				text = "EMPLOYMENT_SHORT"
				tooltip = "SORT_EMPLOYMENT_TOOLTIP"
				size = { 75 20 }
				onclick = "[MapListPanel.Sort('employment')]"
			}
			sort_button = {
				align = center|nobaseline
				text = "CASH_RESERVES_SHORT"
				tooltip = "SORT_CASH_RESERVES_TOOLTIP"
				size = { 80 20 }
				onclick = "[MapListPanel.Sort('cash_reserves')]"
			}
		}
	}

	type construction_filters = flowcontainer {
		direction = vertical

		section_header_button = {					
			blockoverride "left_text" {
				text = "SETTINGS"
				fontsize_min = 12
				elide = right
			}

			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle( 'construction_interaction_filters' )]"
			}
			
			blockoverride "onclick_showmore" {
				visible = "[GetVariableSystem.Exists( 'construction_interaction_filters' )]"
			}

			blockoverride "onclick_showless" {
				visible = "[Not(GetVariableSystem.Exists( 'construction_interaction_filters' ))]"
			}
		}

		flowcontainer = {
			visible = "[Not(GetVariableSystem.Exists( 'construction_interaction_filters' ))]"
			minimumsize = { @panel_width_plus_14 -1 }
			parentanchor = hcenter
			spacing = 10
			margin_bottom = 10

			background = {
				using = dark_area
			}

			flowcontainer = {
				direction = vertical

				textbox = {
					multiline = yes
					size = { 95 60 }
					text = "LIST_ITEM"
					align = right|nobaseline
					margin_right = 10
					margin_left = 10
				}

				textbox = {
					multiline = yes
					size = { 95 60 }
					text = "WORKFORCE"
					align = right|nobaseline
					margin_right = 10
					margin_left = 10
				}
			}

			vertical_divider = {}

			flowcontainer = {
				direction = vertical
				margin_top = 10 
				spacing = 20
				margin_left = 10

				flowcontainer = {

					filter_button = {
						size = { 410 40 }

						blockoverride "text" {
							text = "CONSTRUCTION_CONDENSED_OR_FULL"
						}

						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Toggle('construction_list_condensed')]"
						}
					}
				}

				flowcontainer = {
					spacing = 5

					filter_button = {
						size = { 132 40 }

						blockoverride "text" {
							text = "concept_jobseekers"
						}

						visible = "[And(Not(GetVariableSystem.HasValue('hide_jobseekers', 'false')), GetVariableSystem.Exists('hide_jobseekers'))]"

						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Set('hide_jobseekers', 'false')]"
							onclick = "[GetVariableSystem.Set('show_unemployed', 'false')]"
							onclick = "[GetVariableSystem.Set('show_peasants', 'false')]"
						}
					}

					filter_button_selected = {
						visible = "[Not(GetVariableSystem.HasValue('hide_jobseekers', 'true'))]"
						size = { 132 40 }

						blockoverride "text" {
							text = "concept_jobseekers"
						}
					}

					filter_button = {
						size = { 132 40 }

						blockoverride "text" {
							text = "peasants_no_icon"
						}

						visible = "[Or(GetVariableSystem.HasValue('show_peasants', 'false'), Not(GetVariableSystem.Exists('show_peasants')))]"

						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Set('hide_jobseekers', 'true')]"
							onclick = "[GetVariableSystem.Set('show_unemployed', 'false')]"
							onclick = "[GetVariableSystem.Set('show_peasants', 'true')]"
						}
					}

					filter_button_selected = {
						visible = "[GetVariableSystem.HasValue('show_peasants', 'true')]"
						size = { 132 40 }

						blockoverride "text" {
							text = "peasants_no_icon"
						}
					}

					filter_button = {
						size = { 132 40 }

						blockoverride "text" {
							text = "concept_unemployed"
						}

						visible = "[Or(GetVariableSystem.HasValue('show_unemployed', 'false'), Not(GetVariableSystem.Exists('show_unemployed')))]"

						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Set('hide_jobseekers', 'true')]"
							onclick = "[GetVariableSystem.Set('show_unemployed', 'true')]"
							onclick = "[GetVariableSystem.Set('show_peasants', 'false')]"
						}
					}

					filter_button_selected = {
						visible = "[GetVariableSystem.HasValue('show_unemployed', 'true')]"
						size = { 132 40 }

						blockoverride "text" {
							text = "concept_unemployed"
						}
					}
				}
			}
		}

		widget = {
			visible = "[GetVariableSystem.Exists( 'construction_interaction_filters' )]" 
			size = { 5 5 }
		}
	}

	type employment_indicator_icon = container {
		icon = {
			visible = "[Building.ShouldShowAsUnableToHire]"
			block "indicator_icon_size" {
				size = { 30 30 }
			}
			texture = "gfx/interface/icons/generic_icons/employment_not_full.dds"
			tooltip = "NOT_HIRING"
		}					
		
		icon = {
			visible = "[Building.ShouldShowAsUnwillingToHire]"
			block "indicator_icon_size" {
				size = { 30 30 }
			}
			texture = "gfx/interface/icons/generic_icons/employment_not_hiring.dds"
			tooltip = "NOT_HIRING"
		}						

		icon = {
			visible = "[Building.ShouldShowAsHiring]"
			block "indicator_icon_size" {
				size = { 30 30 }
			}
			texture = "gfx/interface/icons/generic_icons/employment_not_full_hiring.dds"
			tooltip = "TOOLTIP_BUILDING_HIRING"
		}
	}

	type building_level_controls = container {
		minimumsize = { 110 35 }

		background = {
			using = entry_bg
			margin = { -3 -1 }
		}

		### DOWNSIZE
		button_icon_minus_action = {
			
			block "button_size" {
				size = { 35 35 }
			}

			parentanchor = vcenter
			tooltip = "[Building.GetDownsizeTooltip]"
			onclick = "[Execute( Building.Downsize )]"
			enabled = "[IsValid( Building.Downsize )]"
			visible = "[And(And( IsValid( Building.Downsize ), Not( ShouldAskConfirmation( Building.Downsize ) ) ), Not(Building.IsMilitaryBuilding))]"
			using = tooltip_below
		}

		### DOWNSIZE WITH CONFIRMATION
		button_icon_minus_action = {
			
			block "button_size" {
				size = { 35 35 }
			}
			parentanchor = vcenter
			tooltip = "[Building.GetDownsizeTooltip]"
			onclick = "[PopupManager.AskConfirmation( Building.Downsize )]"
			enabled = "[IsValid( Building.Downsize )]"
			visible = "[And(And( IsValid( Building.Downsize ), ShouldAskConfirmation( Building.Downsize ) ), Not(Building.IsMilitaryBuilding))]"
			using = tooltip_below
		}

		### CANCEL CONSTRUCTION
		button_icon_minus_action = {
			
			block "button_size" {
				size = { 35 35 }
			}
			parentanchor = vcenter
			tooltip = "[Building.GetCancelConstructionTooltip]"
			visible = "[And(IsValid( Building.CancelConstruction ), Not(Building.IsMilitaryBuilding))]"
			onclick = "[Execute( Building.CancelConstruction )]"
			using = tooltip_below
		}

		### LEVEL
		textbox = {
			text = "[Building.GetExpansionLevelDesc]"
			align = hcenter|nobaseline

			block "controller_size" {
				size = { 110 35 }
			}

			elide = right
			fontsize_min = 12
			margin_left = 35
			margin_right = 35
		}

		### EXPAND
		button_icon_plus_action = {
			widgetid = "[Concatenate('building_expand', Building.GetIDString)]"
			position = { 0 0 }
			
			block "button_size" {
				size = { 35 35 }
			}
			parentanchor = right|vcenter
			tooltip = "[Building.GetQueueConstructionTooltip]"
			onclick = "[Execute( Building.QueueConstruction )]"
			enabled = "[IsValid( Building.QueueConstruction )]"

			block "expand_button_visibility" {
				visible = "[And(And(Building.GetOwner.IsLocalPlayer, Building.IsExpandable), Not(Building.IsMilitaryBuilding))]"
			}
		}
	}

	type productivity_or_other_information = container {
		block "productivity_info_datacontext" {}

		# Productivity
		textbox = {
			visible = "[Not(ObjectsEqual(Building.GetBuildingType, GetBuildingType('building_government_administration').Self))]"
			raw_text = "#v [GetPlayer.GetCustom('currency_symbol')][Building.GetBuildingType.GetExpansionProductivityImpact(Building.Self, Building.GetState)|1+]#!"
			tooltip = "[Building.GetBuildingType.GetExpansionProductivityImpactDesc(Building.Self, Building.GetState)]"
			
			elide = right
			fontsize_min = 12

			block "productivity_info_text_style" {}
		}

		# Tax Capacity (Government Administration)
		textbox = {
			visible = "[ObjectsEqual(Building.GetBuildingType, GetBuildingType('building_government_administration').Self)]"
			raw_text = "[State.CalcTaxCapacityBalance|0+=]"
			tooltip = "STATE_TAX_CAPACITY_DESC"

			elide = right
			fontsize_min = 12

			block "productivity_info_text_style" {}
		}
	}

	type condensed_building_information_pms = fixedgridbox {
		datamodel = "[Building.AccessProductionMethodGroups]"
		flipdirection = yes

		block "pms_slot_sizes" {			
			addcolumn = 52
			addrow = 50
		}
		parentanchor = vcenter

		block "pms_minimumsize" {
			minimumsize = { 258 -1 }
		}

		item = {
			widget = {
				block "pms_item_size" {
					size = { 50 50 }
				}
				datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
				datacontext = "[ProductionMethod]"
				datacontext = "[Building]"
				datacontext = "[ProductionMethodGroup]"
				using = tooltip_above
				tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"

				button = {
					visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
					using = expand_button_bg_dropdown
					size = { 100% 100% }
					onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
				}

				icon = {
					size = { 80% 80% }
					parentanchor = center
					texture = "[ProductionMethod.GetTexture]"
				}

				### new pm
				has_new_pm_icon = {
					position = { -2 2 }
					parentanchor = bottom|left
					blockoverride "visible" {
						visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
					}
				}

				### nr available
				textbox = {
					raw_text = "#P #bold [ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf)]#!#!"
					parentanchor = top|right
					position = { -5 0 }
					autoresize = yes
					align = right|nobaseline
					block "pms_number_visibility" {
						visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
					}
					tooltip = "PRODUCTION_METHOD_OPTIONS"
					using = tooltip_above
					using = fontsize_small

					background = {
						using = default_background
						margin = { 8 4 }

					}
				}
			}
		}
	}
}
