# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types market_panel
{
	type market_panel_trade_routes_trade_suggestions = flowcontainer {
		using = default_list_position
		direction = vertical
		spacing = 10
		margin_top = 10
		
		flowcontainer = {
			direction = vertical
			datacontext = "[GetMetaPlayer.GetPlayedOrObservedCountry]"
			visible = "[GreaterThan_CFixedPoint(Market.GetMarketSharePercentageFor( Country.Self ), '(CFixedPoint)0')]"

			minimumsize = { @panel_width -1 }
			margin_top = 10
			margin_bottom = 10

			background = {
				using = entry_bg
			}

			textbox = {
				text = "MONTHLY_PRICE_REPORT"
				autoresize = yes
				default_format = "#title"
				align = nobaseline
				margin_left = 10
				maximumsize = { @panel_width -1 }
			}

			textbox = {
				margin = { 10 10 }
				margin_bottom = 5
				text = "[Country.GetPriceReportDesc]"
				autoresize = yes
				align = nobaseline
				maximumsize = { @panel_width -1 }
				multiline = yes
			}
		}

		flowcontainer = {
			using = default_list_position
			visible = "[Market.CanCreateTradeRoutesInMarket(GetPlayer.Self)]"
			direction = vertical

			possible_trade_routes = {}
		}

		flowcontainer = {
			direction = vertical
			parentanchor = hcenter
			visible = "[Not(IsDataModelEmpty(Market.AccessInactivePlayerRoutes))]"
			margin_top = 10
			margin_bottom = 10

			background = {
				using = entry_bg
			}
			textbox = {
				text = "INACTIVE_TRADE_ROUTES"
				autoresize = yes
				align = nobaseline
				margin_bottom = 5
				margin_left = 10
				default_format = "#title"
			}
			flowcontainer = {
				direction = vertical
				datamodel = "[Market.AccessInactivePlayerRoutes]"

				item = {
					trade_route_list_item = {
						blockoverride "first_flag_or_icon" {
							icon = {
								datacontext = "[TradeRoute.GetGoods]"
								texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
								size = { 55 55 }
								color = "[Goods.GetCategoryColor]"

								tooltipwidget = {
									FancyTooltip_Goods = {}
								}
								
								icon = {
									texture = "[Goods.GetTexture]"
									size = { 40 40 }
									parentanchor = center
								}
								icon = {
									size = { 25 25 }
									visible = "[Goods.HasGoodsShortage]"
									texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
									tooltip = "GOODS_SHORTAGE_TOOLTIP"
									parentanchor = bottom
								}
							}
						}
					}
				}
			}
		}
		flowcontainer = {
			direction = vertical
			parentanchor = hcenter
			visible = "[Not(IsDataModelEmpty(Market.AccessUnproductivePlayerRoutes))]"
			margin_top = 10
			margin_bottom = 10

			background = {
				using = entry_bg
			}

			textbox = {
				text = "UNPRODUCTIVE_TRADE_ROUTES"
				autoresize = yes
				align = nobaseline
				margin_bottom = 5
				margin_left = 10
				default_format = "#title"
			}
			flowcontainer = {
				direction = vertical
				datamodel = "[Market.AccessUnproductivePlayerRoutes]"

				item = {
					trade_route_list_item = {
						blockoverride "first_flag_or_icon" {
							icon = {
								datacontext = "[TradeRoute.GetGoods]"
								texture = "gfx/interface/market_view/trade_good_icon_bg.dds"
								size = { 55 55 }
								color = "[Goods.GetCategoryColor]"

								tooltipwidget = {
									FancyTooltip_Goods = {}
								}
								
								icon = {
									texture = "[Goods.GetTexture]"
									size = { 40 40 }
									parentanchor = center
								}
								icon = {
									size = { 25 25 }
									visible = "[Goods.HasGoodsShortage]"
									texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
									tooltip = "GOODS_SHORTAGE_TOOLTIP"
									parentanchor = bottom
								}
							}
						}
					}
				}
			}
		}
	}

	### POSSIBLE TRADE ROUTES
	type possible_trade_routes = flowcontainer {
		parentanchor = hcenter
		spacing = 5
		margin = { 0 8 }
		direction = vertical
		
		background = {
			using = entry_bg
		}
		
		### SUGGESTIONS IMPORT
		section_header_button = {
			size = { @panel_width 38 }
			
			blockoverride "left_text" {
				text = "IMPORT_SUGGESTIONS_TITLE"
			}
			
			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('suggest_import_trade_routes')]"
			}
			
			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('suggest_import_trade_routes'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('suggest_import_trade_routes')]"
			}
		}
		suggest_trade_goods = {}

		### SUGGESTIONS EXPORT
		section_header_button = {
			size = { @panel_width 38 }
			
			blockoverride "left_text" {
				text = "EXPORT_SUGGESTIONS_TITLE"
			}
			
			blockoverride "onclick" {
				onclick = "[GetVariableSystem.Toggle('suggest_export_trade_routes')]"
			}
			
			blockoverride "onclick_showmore" {
				visible = "[Not(GetVariableSystem.Exists('suggest_export_trade_routes'))]"
			}

			blockoverride "onclick_showless" {
				visible = "[GetVariableSystem.Exists('suggest_export_trade_routes')]"
			}
		}
		suggest_trade_goods = {
			blockoverride "visible" {
				visible = "[GetVariableSystem.Exists('suggest_export_trade_routes')]"
			}
			blockoverride "empty_state_visibility" {
				visible = "[IsDataModelEmpty(Market.AccessGoodsSuggestedForExport)]"
			}
			blockoverride "goods_visibility" {
				visible = "[Not(IsDataModelEmpty(Market.AccessGoodsSuggestedForExport))]"
			}
			blockoverride "empty_state_text" {
				text = "NO_GOODS_EXPORT_SUGGESTION"
			}
			blockoverride "datamodel" {
				datamodel = "[Market.AccessGoodsSuggestedForExport]"
			}
			blockoverride "button_functions" {
				enabled = "[Goods.CanEstablishExportTradeRoute]"
				onclick = "[Goods.EstablishExportTradeRoute]"
			}
		}
	}
	
	### SUGGEST TRADE GOODS
	type suggest_trade_goods = flowcontainer {
		direction = vertical
		margin = { 0 5 }
		parentanchor = hcenter
		
		block "visible" {
			visible = "[GetVariableSystem.Exists('suggest_import_trade_routes')]"
		}

		empty_state = {
			blockoverride "visible" {
				block "empty_state_visibility" {
					visible = "[IsDataModelEmpty(Market.AccessGoodsSuggestedForImport)]"
				}
			}
			blockoverride "text" {
				block "empty_state_text" {
					text = "NO_GOODS_IMPORT_SUGGESTION"
				}
			}
		}
		
		fixedgridbox = {
			name = buttons
			parentanchor = hcenter
			block "goods_visibility" {
				visible = "[Not(IsDataModelEmpty(Market.AccessGoodsSuggestedForImport))]"
			}
			block "datamodel" {
				datamodel = "[Market.AccessGoodsSuggestedForImport]"
			}
			maxhorizontalslots = 6
			addrow = 70
			addcolumn = 80
			flipdirection = yes
			
			item = {
				widget = {
					size = { 80 70 }
					
					button_icon_square_map_interaction = {
						parentanchor = center
						size = { 70 70 }
						block "button_functions" {
							onclick = "[Goods.EstablishImportTradeRoute]"
						}

						tooltipwidget = {
							FancyTooltip_Goods = {}
						}

						blockoverride "icon" {
							texture = "[Goods.GetTexture]"
						}
						blockoverride "icon_size" {
							size = { 80% 80% }
						}
					}
				}
			}
		}
	}

	type shipping_lane_information = flowcontainer {
		block "visible" {
			visible = "[Not(IsDataModelEmpty( Country.AccessShippingLanes ))]"
		}
		parentanchor = hcenter
		direction = vertical
		margin_left = 10
		minimumsize = { @panel_width -1 }
		maximumsize = { @panel_width -1 }

		flowcontainer = {
			block "datamodel" {
				datamodel = "[Country.AccessShippingLanes]"
			}

			spacing = 10
			direction = vertical
			parentanchor = hcenter

			item = {
				shipping_lane_item = { }
			}
		}
	}

	type shipping_lane_item = flowcontainer {
		background = {
			using = entry_bg
		}
		margin_top = 10
		margin_bottom = 10
		spacing = 2
		parentanchor = hcenter
		direction = vertical
		onmousehierarchyenter = "[AccessHighlightManager.HighlightShippingLane(ShippingLane.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no
		minimumsize = { @panel_width -1 }
		maximumsize = { @panel_width -1 }

		textbox = {
			margin_left = 10
			autoresize = yes
			align = left|nobaseline
			text = "[ShippingLane.GetCountry.GetFlagTextIcon] [ShippingLane.GetTypeDescription]"
		}

		textbox = {
			margin_left = 10
			autoresize = yes
			align = left|nobaseline
			text = "SHIPPING_LANE_STATE_BEGIN_END"
		}

		flowcontainer = {
			margin_left = 10
			direction = horizontal
			spacing = 10

			textbox = {
				autoresize = yes
				align = left|nobaseline
				text = "[ShippingLane.GetConvoyCostFormatted]"
			}

			textbox = {
				autoresize = yes
				align = left|nobaseline
				text = "[ShippingLane.GetEffectivenessFormatted]"
			}
		}
	}

	type supply_network_information = flowcontainer {
		direction = vertical
		alwaystransparent = no

		default_header = {
			parentanchor = hcenter
			blockoverride "text"
			{
				text = "SUPPLY_NETWORK_HEADER"
			}
		}
		
		widget = { size = { 1 5 }}

		flowcontainer = {
			visible = "[GreaterThan_int32(Country.GetSupplyNetworkNumSeaNodes, '(int32)0')]"
			parentanchor = top|left
			widgetanchor = top|left
			direction = vertical
			margin_left = 10
			minimumsize = { @panel_width -1 }
			maximumsize = { @panel_width -1 }
			onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			alwaystransparent = no

			textbox = {
				autoresize = yes
				text = "NUM_CONVOYS_NO_DAMAGE"
				tooltip = "NUM_CONVOYS_TOOLTIP"
				visible = "[Not(Country.HasDamagedConvoys)]"
			}

			textbox = {
				autoresize = yes
				text = "NUM_CONVOYS_DAMAGE"
				tooltip = "NUM_CONVOYS_TOOLTIP"
				visible = "[Country.HasDamagedConvoys]"
			}

			textbox = {
				autoresize = yes
				text = "USED_CONVOYS"
				tooltip = "USED_CONVOYS_TOOLTIP"
			}

			textbox = {
				autoresize = yes
				text = "NUM_SEA_NODES"
				tooltip = "NUM_SEA_NODES_TOOLTIP"
			}

			textbox = {
				autoresize = yes
				text = "SUPPLY_NETWORK_STRENGTH"
				tooltip = "SUPPLY_NETWORK_STRENGTH_TOOLTIP"
			}
		}
					
		flowcontainer = {
			using = default_list_position
			visible = "[Not(GreaterThan_int32(Country.GetSupplyNetworkNumSeaNodes, '(int32)0'))]"
			direction = vertical
			spacing = 40

			textbox = {
				margin_top = 40
				using = default_list_position
				text = "SUPPLY_NETWORK_EMPTY_STATE"
				autoresize = yes
				align = nobaseline
			}

			divider_decorative = {}
		}
	}

	type supply_network_information_small = widget {
		onmousehierarchyenter = "[AccessHighlightManager.HighlightSupplyNetwork(Country.Self)]"
		onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
		alwaystransparent = no
		size = { 410 110 }
	
		using = entry_bg_fancy_solid_bg

		vbox = {
			margin = { 20 20 }
			
			hbox = {
				tooltip = "SUPPLY_NETWORK_STRENGTH_TOOLTIP"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "SUPPLY_NETWORK_STRENGTH_TEXT"
					align = left|nobaseline
				}	
				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "SUPPLY_NETWORK_STRENGTH_VALUE"
					align = right|nobaseline
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				tooltip = "NUM_SEA_NODES_TOOLTIP"

				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "NUM_SEA_NODES_TEXT"
					align = left|nobaseline
				}
				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "NUM_SEA_NODES_VALUE"
					align = right|nobaseline
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				tooltip = "NUM_CONVOYS_TOOLTIP_EXTENDED"
				
				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "USED_AVAILABE_CONVOYS_TEXT"
					align = left|nobaseline
				}
				textbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					text = "USED_AVAILABE_CONVOYS_VALUE"
					align = right|nobaseline
				}
			}
		
		}
	}
}
