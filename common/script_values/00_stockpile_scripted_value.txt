########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################


# ███████╗████████╗ ██████╗  ██████╗██╗  ██╗██████╗ ██╗██╗     ██╗███╗   ██╗ ██████╗ 
# ██╔════╝╚══██╔══╝██╔═══██╗██╔════╝██║ ██╔╝██╔══██╗██║██║     ██║████╗  ██║██╔════╝ 
# ███████╗   ██║   ██║   ██║██║     █████╔╝ ██████╔╝██║██║     ██║██╔██╗ ██║██║  ███╗
# ╚════██║   ██║   ██║   ██║██║     ██╔═██╗ ██╔═══╝ ██║██║     ██║██║╚██╗██║██║   ██║
# ███████║   ██║   ╚██████╔╝╚██████╗██║  ██╗██║     ██║███████╗██║██║ ╚████║╚██████╔╝
# ╚══════╝   ╚═╝    ╚═════╝  ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ 
#                                                                                    
#  ██████╗  ██████╗  ██████╗ ██████╗ ███████╗                                        
# ██╔════╝ ██╔═══██╗██╔═══██╗██╔══██╗██╔════╝                                        
# ██║  ███╗██║   ██║██║   ██║██║  ██║███████╗                                        
# ██║   ██║██║   ██║██║   ██║██║  ██║╚════██║                                        
# ╚██████╔╝╚██████╔╝╚██████╔╝██████╔╝███████║                                        
#  ╚═════╝  ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝                                                 

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#grain

#####flow
grain_market_goods_sell_orders = {
	value = {
		add = market.mg:grain.market_goods_sell_orders
	}
}
grain_market_goods_buy_orders = {
	value = {
		add = market.mg:grain.market_goods_buy_orders
	}
}
grain_market_goods_delta = {
	value = grain_market_goods_sell_orders
	subtract = grain_market_goods_buy_orders
}
grain_market_goods_delta_month = {
	value = grain_market_goods_delta
	multiply = 4
}
grain_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:grain_store_status = 0
			grain_market_goods_delta > 0
			stockpiling_grain_var_state < 1000000
		}
		add = grain_market_goods_delta
	}
	if = {
		limit = {
			var:grain_store_status = 1
			stockpiling_grain_var_state < 1000000
		}
		add = grain_store_quantity_1_week

		if = {
			limit = {
				grain_market_goods_delta > 0
				stockpiling_grain_var_state < 1000000
			}
			add = grain_market_goods_delta
		}
	}
}

#####store
grain_store_predicted = { #1year
	if = {
		limit = {
			var:grain_store_status = 1
		}
		add = 1
		multiply = var:grain_store_quantity
		multiply = var:grain_store_month
	}
}
grain_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:grain_store_status = 1
		}
		add = 1
		multiply = var:grain_store_quantity
		multiply = var:grain_store_month_fixe
	}
	if = {
		limit = {
			var:grain_store_status = 0
		}	
		add = 1
		multiply = var:grain_store_quantity
		multiply = var:grain_store_month
	}
}
grain_store_for_modifier = {
	add = var:grain_store_quantity
	multiply = 25
}
grain_store_quantity_1_month = {
	add = var:grain_store_quantity
}
grain_store_quantity_1_week = {
	#value = 0
	add = var:grain_store_quantity
	divide = 4
}
store_grain_time_reverse = {
	value = var:grain_store_month_fixe # #12
	subtract = var:store_grain_time
}

#####release
grain_month_choise = { #1year
	value = var:grain_month_choise
}
grain_release_predicted = { #1year
	if = {
		limit = {
			var:grain_release_status = 1
		}
		add = 1
		multiply = var:grain_release_quantity
		multiply = var:grain_release_month
	}
}
grain_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:grain_release_status = 1
		}
		add = 1
		multiply = var:grain_release_quantity
		multiply = var:grain_release_month_fixe
	}
	if = {
		limit = {
			var:grain_release_status = 0
		}	
		add = 1
		multiply = var:grain_release_quantity
		multiply = var:grain_release_month
	}
}
grain_release_for_modifier = {
	add = var:grain_release_quantity
	multiply = 25
}
grain_release_quantity_1_month = {
	add = var:grain_release_quantity
}
grain_release_quantity_1_week = {
	add = var:grain_release_quantity
	divide = 4
}
release_grain_time_reverse = {
	value = var:grain_release_month_fixe # #12
	subtract = var:release_grain_time
}

#country_grain
stockpiling_grain_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_grain_state_1
			}
		}
	}
}

#global_grain
grain_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:grain.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
grain_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:grain.market_goods_buy_orders
            }
        }
	}
	add = 1
}
grain_global_market_goods_delta = {
	value = grain_global_market_goods_sell_orders
	subtract = grain_global_market_goods_buy_orders
}
grain_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = grain_global_market_goods_delta
		divide = grain_global_market_goods_sell_orders
	}
}
grain_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = grain_global_market_goods_rapport_price
	multiply = -1
}
grain_global_market_goods_price = {
	value = 20
	multiply = grain_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#wood

#####flow
wood_market_goods_sell_orders = {
	value = {
		add = market.mg:wood.market_goods_sell_orders
	}
}
wood_market_goods_buy_orders = {
	value = {
		add = market.mg:wood.market_goods_buy_orders
	}
}
wood_market_goods_delta = {
	value = wood_market_goods_sell_orders
	subtract = wood_market_goods_buy_orders
}
wood_market_goods_delta_month = {
	value = wood_market_goods_delta
	multiply = 4
}
wood_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:wood_store_status = 0
			wood_market_goods_delta > 0
			stockpiling_wood_var_state < 1000000
		}
		add = wood_market_goods_delta
	}
	if = {
		limit = {
			var:wood_store_status = 1
			stockpiling_wood_var_state < 1000000
		}
		add = wood_store_quantity_1_week

		if = {
			limit = {
				wood_market_goods_delta > 0
				stockpiling_wood_var_state < 1000000
			}
			add = wood_market_goods_delta
		}
	}
}

#####store
wood_store_predicted = { #1year
	if = {
		limit = {
			var:wood_store_status = 1
		}
		add = 1
		multiply = var:wood_store_quantity
		multiply = var:wood_store_month
	}
}
wood_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:wood_store_status = 1
		}
		add = 1
		multiply = var:wood_store_quantity
		multiply = var:wood_store_month_fixe
	}
	if = {
		limit = {
			var:wood_store_status = 0
		}	
		add = 1
		multiply = var:wood_store_quantity
		multiply = var:wood_store_month
	}
}
wood_store_for_modifier = {
	add = var:wood_store_quantity
	multiply = 25
}
wood_store_quantity_1_month = {
	add = var:wood_store_quantity
}
wood_store_quantity_1_week = {
	add = var:wood_store_quantity
	divide = 4
}
store_wood_time_reverse = {
	value = var:wood_store_month_fixe # #12
	subtract = var:store_wood_time
}

#####release
wood_month_choise = { #1year
	value = var:wood_month_choise
}
wood_release_predicted = { #1year
	if = {
		limit = {
			var:wood_release_status = 1
		}
		add = 1
		multiply = var:wood_release_quantity
		multiply = var:wood_release_month
	}
}
wood_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:wood_release_status = 1
		}
		add = 1
		multiply = var:wood_release_quantity
		multiply = var:wood_release_month_fixe
	}
	if = {
		limit = {
			var:wood_release_status = 0
		}	
		add = 1
		multiply = var:wood_release_quantity
		multiply = var:wood_release_month
	}
}
wood_release_for_modifier = {
	add = var:wood_release_quantity
	multiply = 25
}
wood_release_quantity_1_month = {
	add = var:wood_release_quantity
}
wood_release_quantity_1_week = {
	add = var:wood_release_quantity
	divide = 4
}
release_wood_time_reverse = {
	value = var:wood_release_month_fixe # #12
	subtract = var:release_wood_time
}

#country_wood
stockpiling_wood_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_wood_state_1
			}
		}
	}
}

#global_wood
wood_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:wood.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
wood_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:wood.market_goods_buy_orders
            }
        }
	}
	add = 1
}
wood_global_market_goods_delta = {
	value = wood_global_market_goods_sell_orders
	subtract = wood_global_market_goods_buy_orders
}
wood_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = wood_global_market_goods_delta
		divide = wood_global_market_goods_sell_orders
	}
}
wood_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = wood_global_market_goods_rapport_price
	multiply = -1
}
wood_global_market_goods_price = {
	value = 20
	multiply = wood_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#coal

#####flow
coal_market_goods_sell_orders = {
	value = {
		add = market.mg:coal.market_goods_sell_orders
	}
}
coal_market_goods_buy_orders = {
	value = {
		add = market.mg:coal.market_goods_buy_orders
	}
}
coal_market_goods_delta = {
	value = coal_market_goods_sell_orders
	subtract = coal_market_goods_buy_orders
}
coal_market_goods_delta_month = {
	value = coal_market_goods_delta
	multiply = 4
}
coal_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:coal_store_status = 0
			coal_market_goods_delta > 0
			stockpiling_coal_var_state < 1000000
		}
		add = coal_market_goods_delta
	}
	if = {
		limit = {
			var:coal_store_status = 1
			stockpiling_coal_var_state < 1000000
		}
		add = coal_store_quantity_1_week

		if = {
			limit = {
				coal_market_goods_delta > 0
				stockpiling_coal_var_state < 1000000
			}
			add = coal_market_goods_delta
		}
	}
}

#####store
coal_store_predicted = { #1year
	if = {
		limit = {
			var:coal_store_status = 1
		}
		add = 1
		multiply = var:coal_store_quantity
		multiply = var:coal_store_month
	}
}
coal_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:coal_store_status = 1
		}
		add = 1
		multiply = var:coal_store_quantity
		multiply = var:coal_store_month_fixe
	}
	if = {
		limit = {
			var:coal_store_status = 0
		}	
		add = 1
		multiply = var:coal_store_quantity
		multiply = var:coal_store_month
	}
}
coal_store_for_modifier = {
	add = var:coal_store_quantity
	multiply = 25
}
coal_store_quantity_1_month = {
	add = var:coal_store_quantity
}
coal_store_quantity_1_week = {
	add = var:coal_store_quantity
	divide = 4
}
store_coal_time_reverse = {
	value = var:coal_store_month_fixe # #12
	subtract = var:store_coal_time
}

#####release
coal_month_choise = { #1year
	value = var:coal_month_choise
}
coal_release_predicted = { #1year
	if = {
		limit = {
			var:coal_release_status = 1
		}
		add = 1
		multiply = var:coal_release_quantity
		multiply = var:coal_release_month
	}
}
coal_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:coal_release_status = 1
		}
		add = 1
		multiply = var:coal_release_quantity
		multiply = var:coal_release_month_fixe
	}
	if = {
		limit = {
			var:coal_release_status = 0
		}	
		add = 1
		multiply = var:coal_release_quantity
		multiply = var:coal_release_month
	}
}
coal_release_for_modifier = {
	add = var:coal_release_quantity
	multiply = 25
}
coal_release_quantity_1_month = {
	add = var:coal_release_quantity
}
coal_release_quantity_1_week = {
	add = var:coal_release_quantity
	divide = 4
}
release_coal_time_reverse = {
	value = var:coal_release_month_fixe # #12
	subtract = var:release_coal_time
}

#country_coal
stockpiling_coal_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_coal_state_1
			}
		}
	}
}

#global_coal
coal_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:coal.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
coal_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:coal.market_goods_buy_orders
            }
        }
	}
	add = 1
}
coal_global_market_goods_delta = {
	value = coal_global_market_goods_sell_orders
	subtract = coal_global_market_goods_buy_orders
}
coal_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = coal_global_market_goods_delta
		divide = coal_global_market_goods_sell_orders
	}
}
coal_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = coal_global_market_goods_rapport_price
	multiply = -1
}
coal_global_market_goods_price = {
	value = 20
	multiply = coal_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#iron

#####flow
iron_market_goods_sell_orders = {
	value = {
		add = market.mg:iron.market_goods_sell_orders
	}
}
iron_market_goods_buy_orders = {
	value = {
		add = market.mg:iron.market_goods_buy_orders
	}
}
iron_market_goods_delta = {
	value = iron_market_goods_sell_orders
	subtract = iron_market_goods_buy_orders
}
iron_market_goods_delta_month = {
	value = iron_market_goods_delta
	multiply = 4
}
iron_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:iron_store_status = 0
			iron_market_goods_delta > 0
			stockpiling_iron_var_state < 1000000
		}
		add = iron_market_goods_delta
	}
	if = {
		limit = {
			var:iron_store_status = 1
			stockpiling_iron_var_state < 1000000
		}
		add = iron_store_quantity_1_week

		if = {
			limit = {
				iron_market_goods_delta > 0
				stockpiling_iron_var_state < 1000000
			}
			add = iron_market_goods_delta
		}
	}
}

#####store
iron_store_predicted = { #1year
	if = {
		limit = {
			var:iron_store_status = 1
		}
		add = 1
		multiply = var:iron_store_quantity
		multiply = var:iron_store_month
	}
}
iron_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:iron_store_status = 1
		}
		add = 1
		multiply = var:iron_store_quantity
		multiply = var:iron_store_month_fixe
	}
	if = {
		limit = {
			var:iron_store_status = 0
		}	
		add = 1
		multiply = var:iron_store_quantity
		multiply = var:iron_store_month
	}
}
iron_store_for_modifier = {
	add = var:iron_store_quantity
	multiply = 25
}
iron_store_quantity_1_month = {
	add = var:iron_store_quantity
}
iron_store_quantity_1_week = {
	add = var:iron_store_quantity
	divide = 4
}
store_iron_time_reverse = {
	value = var:iron_store_month_fixe # #12
	subtract = var:store_iron_time
}

#####release
iron_month_choise = { #1year
	value = var:iron_month_choise
}
iron_release_predicted = { #1year
	if = {
		limit = {
			var:iron_release_status = 1
		}
		add = 1
		multiply = var:iron_release_quantity
		multiply = var:iron_release_month
	}
}
iron_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:iron_release_status = 1
		}
		add = 1
		multiply = var:iron_release_quantity
		multiply = var:iron_release_month_fixe
	}
	if = {
		limit = {
			var:iron_release_status = 0
		}	
		add = 1
		multiply = var:iron_release_quantity
		multiply = var:iron_release_month
	}
}
iron_release_for_modifier = {
	add = var:iron_release_quantity
	multiply = 25
}
iron_release_quantity_1_month = {
	add = var:iron_release_quantity
}
iron_release_quantity_1_week = {
	add = var:iron_release_quantity
	divide = 4
}
release_iron_time_reverse = {
	value = var:iron_release_month_fixe # #12
	subtract = var:release_iron_time
}

#country_iron
stockpiling_iron_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_iron_state_1
			}
		}
	}
}

#global_iron
iron_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:iron.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
iron_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:iron.market_goods_buy_orders
            }
        }
	}
	add = 1
}
iron_global_market_goods_delta = {
	value = iron_global_market_goods_sell_orders
	subtract = iron_global_market_goods_buy_orders
}
iron_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = iron_global_market_goods_delta
		divide = iron_global_market_goods_sell_orders
	}
}
iron_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = iron_global_market_goods_rapport_price
	multiply = -1
}
iron_global_market_goods_price = {
	value = 20
	multiply = iron_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#sulfur

#####flow
sulfur_market_goods_sell_orders = {
	value = {
		add = market.mg:sulfur.market_goods_sell_orders
	}
}
sulfur_market_goods_buy_orders = {
	value = {
		add = market.mg:sulfur.market_goods_buy_orders
	}
}
sulfur_market_goods_delta = {
	value = sulfur_market_goods_sell_orders
	subtract = sulfur_market_goods_buy_orders
}
sulfur_market_goods_delta_month = {
	value = sulfur_market_goods_delta
	multiply = 4
}
sulfur_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:sulfur_store_status = 0
			sulfur_market_goods_delta > 0
			stockpiling_sulfur_var_state < 1000000
		}
		add = sulfur_market_goods_delta
	}
	if = {
		limit = {
			var:sulfur_store_status = 1
			stockpiling_sulfur_var_state < 1000000
		}
		add = sulfur_store_quantity_1_week

		if = {
			limit = {
				sulfur_market_goods_delta > 0
				stockpiling_sulfur_var_state < 1000000
			}
			add = sulfur_market_goods_delta
		}
	}
}

#####store
sulfur_store_predicted = { #1year
	if = {
		limit = {
			var:sulfur_store_status = 1
		}
		add = 1
		multiply = var:sulfur_store_quantity
		multiply = var:sulfur_store_month
	}
}
sulfur_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:sulfur_store_status = 1
		}
		add = 1
		multiply = var:sulfur_store_quantity
		multiply = var:sulfur_store_month_fixe
	}
	if = {
		limit = {
			var:sulfur_store_status = 0
		}	
		add = 1
		multiply = var:sulfur_store_quantity
		multiply = var:sulfur_store_month
	}
}
sulfur_store_for_modifier = {
	add = var:sulfur_store_quantity
	multiply = 25
}
sulfur_store_quantity_1_month = {
	add = var:sulfur_store_quantity
}
sulfur_store_quantity_1_week = {
	add = var:sulfur_store_quantity
	divide = 4
}
store_sulfur_time_reverse = {
	value = var:sulfur_store_month_fixe # #12
	subtract = var:store_sulfur_time
}

#####release
sulfur_month_choise = { #1year
	value = var:sulfur_month_choise
}
sulfur_release_predicted = { #1year
	if = {
		limit = {
			var:sulfur_release_status = 1
		}
		add = 1
		multiply = var:sulfur_release_quantity
		multiply = var:sulfur_release_month
	}
}
sulfur_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:sulfur_release_status = 1
		}
		add = 1
		multiply = var:sulfur_release_quantity
		multiply = var:sulfur_release_month_fixe
	}
	if = {
		limit = {
			var:sulfur_release_status = 0
		}	
		add = 1
		multiply = var:sulfur_release_quantity
		multiply = var:sulfur_release_month
	}
}
sulfur_release_for_modifier = {
	add = var:sulfur_release_quantity
	multiply = 25
}
sulfur_release_quantity_1_month = {
	add = var:sulfur_release_quantity
}
sulfur_release_quantity_1_week = {
	add = var:sulfur_release_quantity
	divide = 4
}
release_sulfur_time_reverse = {
	value = var:sulfur_release_month_fixe # #12
	subtract = var:release_sulfur_time
}

#country_sulfur
stockpiling_sulfur_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_sulfur_state_1
			}
		}
	}
}

#global_sulfur
sulfur_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:sulfur.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
sulfur_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:sulfur.market_goods_buy_orders
            }
        }
	}
	add = 1
}
sulfur_global_market_goods_delta = {
	value = sulfur_global_market_goods_sell_orders
	subtract = sulfur_global_market_goods_buy_orders
}
sulfur_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = sulfur_global_market_goods_delta
		divide = sulfur_global_market_goods_sell_orders
	}
}
sulfur_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = sulfur_global_market_goods_rapport_price
	multiply = -1
}
sulfur_global_market_goods_price = {
	value = 20
	multiply = sulfur_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#lead

#####flow
lead_market_goods_sell_orders = {
	value = {
		add = market.mg:lead.market_goods_sell_orders
	}
}
lead_market_goods_buy_orders = {
	value = {
		add = market.mg:lead.market_goods_buy_orders
	}
}
lead_market_goods_delta = {
	value = lead_market_goods_sell_orders
	subtract = lead_market_goods_buy_orders
}
lead_market_goods_delta_month = {
	value = lead_market_goods_delta
	multiply = 4
}
lead_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:lead_store_status = 0
			lead_market_goods_delta > 0
			stockpiling_lead_var_state < 1000000
		}
		add = lead_market_goods_delta
	}
	if = {
		limit = {
			var:lead_store_status = 1
			stockpiling_lead_var_state < 1000000
		}
		add = lead_store_quantity_1_week

		if = {
			limit = {
				lead_market_goods_delta > 0
				stockpiling_lead_var_state < 1000000
			}
			add = lead_market_goods_delta
		}
	}
}

#####store
lead_store_predicted = { #1year
	if = {
		limit = {
			var:lead_store_status = 1
		}
		add = 1
		multiply = var:lead_store_quantity
		multiply = var:lead_store_month
	}
}
lead_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:lead_store_status = 1
		}
		add = 1
		multiply = var:lead_store_quantity
		multiply = var:lead_store_month_fixe
	}
	if = {
		limit = {
			var:lead_store_status = 0
		}	
		add = 1
		multiply = var:lead_store_quantity
		multiply = var:lead_store_month
	}
}
lead_store_for_modifier = {
	add = var:lead_store_quantity
	multiply = 25
}
lead_store_quantity_1_month = {
	add = var:lead_store_quantity
}
lead_store_quantity_1_week = {
	add = var:lead_store_quantity
	divide = 4
}
store_lead_time_reverse = {
	value = var:lead_store_month_fixe # #12
	subtract = var:store_lead_time
}

#####release
lead_month_choise = { #1year
	value = var:lead_month_choise
}
lead_release_predicted = { #1year
	if = {
		limit = {
			var:lead_release_status = 1
		}
		add = 1
		multiply = var:lead_release_quantity
		multiply = var:lead_release_month
	}
}
lead_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:lead_release_status = 1
		}
		add = 1
		multiply = var:lead_release_quantity
		multiply = var:lead_release_month_fixe
	}
	if = {
		limit = {
			var:lead_release_status = 0
		}	
		add = 1
		multiply = var:lead_release_quantity
		multiply = var:lead_release_month
	}
}
lead_release_for_modifier = {
	add = var:lead_release_quantity
	multiply = 25
}
lead_release_quantity_1_month = {
	add = var:lead_release_quantity
}
lead_release_quantity_1_week = {
	add = var:lead_release_quantity
	divide = 4
}
release_lead_time_reverse = {
	value = var:lead_release_month_fixe # #12
	subtract = var:release_lead_time
}

#country_lead
stockpiling_lead_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_lead_state_1
			}
		}
	}
}

#global_lead
lead_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:lead.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
lead_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:lead.market_goods_buy_orders
            }
        }
	}
	add = 1
}
lead_global_market_goods_delta = {
	value = lead_global_market_goods_sell_orders
	subtract = lead_global_market_goods_buy_orders
}
lead_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = lead_global_market_goods_delta
		divide = lead_global_market_goods_sell_orders
	}
}
lead_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = lead_global_market_goods_rapport_price
	multiply = -1
}
lead_global_market_goods_price = {
	value = 20
	multiply = lead_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#oil

#####flow
oil_market_goods_sell_orders = {
	value = {
		add = market.mg:oil.market_goods_sell_orders
	}
}
oil_market_goods_buy_orders = {
	value = {
		add = market.mg:oil.market_goods_buy_orders
	}
}
oil_market_goods_delta = {
	value = oil_market_goods_sell_orders
	subtract = oil_market_goods_buy_orders
}
oil_market_goods_delta_month = {
	value = oil_market_goods_delta
	multiply = 4
}
oil_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:oil_store_status = 0
			oil_market_goods_delta > 0
			stockpiling_oil_var_state < 1000000
		}
		add = oil_market_goods_delta
	}
	if = {
		limit = {
			var:oil_store_status = 1
			stockpiling_oil_var_state < 1000000
		}
		add = oil_store_quantity_1_week

		if = {
			limit = {
				oil_market_goods_delta > 0
				stockpiling_oil_var_state < 1000000
			}
			add = oil_market_goods_delta
		}
	}
}

#####store
oil_store_predicted = { #1year
	if = {
		limit = {
			var:oil_store_status = 1
		}
		add = 1
		multiply = var:oil_store_quantity
		multiply = var:oil_store_month
	}
}
oil_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:oil_store_status = 1
		}
		add = 1
		multiply = var:oil_store_quantity
		multiply = var:oil_store_month_fixe
	}
	if = {
		limit = {
			var:oil_store_status = 0
		}	
		add = 1
		multiply = var:oil_store_quantity
		multiply = var:oil_store_month
	}
}
oil_store_for_modifier = {
	add = var:oil_store_quantity
	multiply = 25
}
oil_store_quantity_1_month = {
	add = var:oil_store_quantity
}
oil_store_quantity_1_week = {
	add = var:oil_store_quantity
	divide = 4
}
store_oil_time_reverse = {
	value = var:oil_store_month_fixe # #12
	subtract = var:store_oil_time
}

#####release
oil_month_choise = { #1year
	value = var:oil_month_choise
}
oil_release_predicted = { #1year
	if = {
		limit = {
			var:oil_release_status = 1
		}
		add = 1
		multiply = var:oil_release_quantity
		multiply = var:oil_release_month
	}
}
oil_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:oil_release_status = 1
		}
		add = 1
		multiply = var:oil_release_quantity
		multiply = var:oil_release_month_fixe
	}
	if = {
		limit = {
			var:oil_release_status = 0
		}	
		add = 1
		multiply = var:oil_release_quantity
		multiply = var:oil_release_month
	}
}
oil_release_for_modifier = {
	add = var:oil_release_quantity
	multiply = 25
}
oil_release_quantity_1_month = {
	add = var:oil_release_quantity
}
oil_release_quantity_1_week = {
	add = var:oil_release_quantity
	divide = 4
}
release_oil_time_reverse = {
	value = var:oil_release_month_fixe # #12
	subtract = var:release_oil_time
}

#country_oil
stockpiling_oil_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_oil_state_1
			}
		}
	}
}

#global_oil
oil_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:oil.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
oil_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:oil.market_goods_buy_orders
            }
        }
	}
	add = 1
}
oil_global_market_goods_delta = {
	value = oil_global_market_goods_sell_orders
	subtract = oil_global_market_goods_buy_orders
}
oil_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = oil_global_market_goods_delta
		divide = oil_global_market_goods_sell_orders
	}
}
oil_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = oil_global_market_goods_rapport_price
	multiply = -1
}
oil_global_market_goods_price = {
	value = 20
	multiply = oil_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#dye

#####flow
dye_market_goods_sell_orders = {
	value = {
		add = market.mg:dye.market_goods_sell_orders
	}
}
dye_market_goods_buy_orders = {
	value = {
		add = market.mg:dye.market_goods_buy_orders
	}
}
dye_market_goods_delta = {
	value = dye_market_goods_sell_orders
	subtract = dye_market_goods_buy_orders
}
dye_market_goods_delta_month = {
	value = dye_market_goods_delta
	multiply = 4
}
dye_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:dye_store_status = 0
			dye_market_goods_delta > 0
			stockpiling_dye_var_state < 1000000
		}
		add = dye_market_goods_delta
	}
	if = {
		limit = {
			var:dye_store_status = 1
			stockpiling_dye_var_state < 1000000
		}
		add = dye_store_quantity_1_week

		if = {
			limit = {
				dye_market_goods_delta > 0
				stockpiling_dye_var_state < 1000000
			}
			add = dye_market_goods_delta
		}
	}
}

#####store
dye_store_predicted = { #1year
	if = {
		limit = {
			var:dye_store_status = 1
		}
		add = 1
		multiply = var:dye_store_quantity
		multiply = var:dye_store_month
	}
}
dye_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:dye_store_status = 1
		}
		add = 1
		multiply = var:dye_store_quantity
		multiply = var:dye_store_month_fixe
	}
	if = {
		limit = {
			var:dye_store_status = 0
		}	
		add = 1
		multiply = var:dye_store_quantity
		multiply = var:dye_store_month
	}
}
dye_store_for_modifier = {
	add = var:dye_store_quantity
	multiply = 25
}
dye_store_quantity_1_month = {
	add = var:dye_store_quantity
}
dye_store_quantity_1_week = {
	add = var:dye_store_quantity
	divide = 4
}
store_dye_time_reverse = {
	value = var:dye_store_month_fixe # #12
	subtract = var:store_dye_time
}

#####release
dye_month_choise = { #1year
	value = var:dye_month_choise
}
dye_release_predicted = { #1year
	if = {
		limit = {
			var:dye_release_status = 1
		}
		add = 1
		multiply = var:dye_release_quantity
		multiply = var:dye_release_month
	}
}
dye_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:dye_release_status = 1
		}
		add = 1
		multiply = var:dye_release_quantity
		multiply = var:dye_release_month_fixe
	}
	if = {
		limit = {
			var:dye_release_status = 0
		}	
		add = 1
		multiply = var:dye_release_quantity
		multiply = var:dye_release_month
	}
}
dye_release_for_modifier = {
	add = var:dye_release_quantity
	multiply = 25
}
dye_release_quantity_1_month = {
	add = var:dye_release_quantity
}
dye_release_quantity_1_week = {
	add = var:dye_release_quantity
	divide = 4
}
release_dye_time_reverse = {
	value = var:dye_release_month_fixe # #12
	subtract = var:release_dye_time
}

#country_dye
stockpiling_dye_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_dye_state_1
			}
		}
	}
}

#global_dye
dye_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:dye.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
dye_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:dye.market_goods_buy_orders
            }
        }
	}
	add = 1
}
dye_global_market_goods_delta = {
	value = dye_global_market_goods_sell_orders
	subtract = dye_global_market_goods_buy_orders
}
dye_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = dye_global_market_goods_delta
		divide = dye_global_market_goods_sell_orders
	}
}
dye_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = dye_global_market_goods_rapport_price
	multiply = -1
}
dye_global_market_goods_price = {
	value = 20
	multiply = dye_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#silk

#####flow
silk_market_goods_sell_orders = {
	value = {
		add = market.mg:silk.market_goods_sell_orders
	}
}
silk_market_goods_buy_orders = {
	value = {
		add = market.mg:silk.market_goods_buy_orders
	}
}
silk_market_goods_delta = {
	value = silk_market_goods_sell_orders
	subtract = silk_market_goods_buy_orders
}
silk_market_goods_delta_month = {
	value = silk_market_goods_delta
	multiply = 4
}
silk_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:silk_store_status = 0
			silk_market_goods_delta > 0
			stockpiling_silk_var_state < 1000000
		}
		add = silk_market_goods_delta
	}
	if = {
		limit = {
			var:silk_store_status = 1
			stockpiling_silk_var_state < 1000000
		}
		add = silk_store_quantity_1_week

		if = {
			limit = {
				silk_market_goods_delta > 0
				stockpiling_silk_var_state < 1000000
			}
			add = silk_market_goods_delta
		}
	}
}

#####store
silk_store_predicted = { #1year
	if = {
		limit = {
			var:silk_store_status = 1
		}
		add = 1
		multiply = var:silk_store_quantity
		multiply = var:silk_store_month
	}
}
silk_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:silk_store_status = 1
		}
		add = 1
		multiply = var:silk_store_quantity
		multiply = var:silk_store_month_fixe
	}
	if = {
		limit = {
			var:silk_store_status = 0
		}	
		add = 1
		multiply = var:silk_store_quantity
		multiply = var:silk_store_month
	}
}
silk_store_for_modifier = {
	add = var:silk_store_quantity
	multiply = 25
}
silk_store_quantity_1_month = {
	add = var:silk_store_quantity
}
silk_store_quantity_1_week = {
	add = var:silk_store_quantity
	divide = 4
}
store_silk_time_reverse = {
	value = var:silk_store_month_fixe # #12
	subtract = var:store_silk_time
}

#####release
silk_month_choise = { #1year
	value = var:silk_month_choise
}
silk_release_predicted = { #1year
	if = {
		limit = {
			var:silk_release_status = 1
		}
		add = 1
		multiply = var:silk_release_quantity
		multiply = var:silk_release_month
	}
}
silk_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:silk_release_status = 1
		}
		add = 1
		multiply = var:silk_release_quantity
		multiply = var:silk_release_month_fixe
	}
	if = {
		limit = {
			var:silk_release_status = 0
		}	
		add = 1
		multiply = var:silk_release_quantity
		multiply = var:silk_release_month
	}
}
silk_release_for_modifier = {
	add = var:silk_release_quantity
	multiply = 25
}
silk_release_quantity_1_month = {
	add = var:silk_release_quantity
}
silk_release_quantity_1_week = {
	add = var:silk_release_quantity
	divide = 4
}
release_silk_time_reverse = {
	value = var:silk_release_month_fixe # #12
	subtract = var:release_silk_time
}

#country_silk
stockpiling_silk_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_silk_state_1
			}
		}
	}
}

#global_silk
silk_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:silk.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
silk_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:silk.market_goods_buy_orders
            }
        }
	}
	add = 1
}
silk_global_market_goods_delta = {
	value = silk_global_market_goods_sell_orders
	subtract = silk_global_market_goods_buy_orders
}
silk_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = silk_global_market_goods_delta
		divide = silk_global_market_goods_sell_orders
	}
}
silk_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = silk_global_market_goods_rapport_price
	multiply = -1
}
silk_global_market_goods_price = {
	value = 20
	multiply = silk_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#rubber

#####flow
rubber_market_goods_sell_orders = {
	value = {
		add = market.mg:rubber.market_goods_sell_orders
	}
}
rubber_market_goods_buy_orders = {
	value = {
		add = market.mg:rubber.market_goods_buy_orders
	}
}
rubber_market_goods_delta = {
	value = rubber_market_goods_sell_orders
	subtract = rubber_market_goods_buy_orders
}
rubber_market_goods_delta_month = {
	value = rubber_market_goods_delta
	multiply = 4
}
rubber_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:rubber_store_status = 0
			rubber_market_goods_delta > 0
			stockpiling_rubber_var_state < 1000000
		}
		add = rubber_market_goods_delta
	}
	if = {
		limit = {
			var:rubber_store_status = 1
			stockpiling_rubber_var_state < 1000000
		}
		add = rubber_store_quantity_1_week

		if = {
			limit = {
				rubber_market_goods_delta > 0
				stockpiling_rubber_var_state < 1000000
			}
			add = rubber_market_goods_delta
		}
	}
}

#####store
rubber_store_predicted = { #1year
	if = {
		limit = {
			var:rubber_store_status = 1
		}
		add = 1
		multiply = var:rubber_store_quantity
		multiply = var:rubber_store_month
	}
}
rubber_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:rubber_store_status = 1
		}
		add = 1
		multiply = var:rubber_store_quantity
		multiply = var:rubber_store_month_fixe
	}
	if = {
		limit = {
			var:rubber_store_status = 0
		}	
		add = 1
		multiply = var:rubber_store_quantity
		multiply = var:rubber_store_month
	}
}
rubber_store_for_modifier = {
	add = var:rubber_store_quantity
	multiply = 25
}
rubber_store_quantity_1_month = {
	add = var:rubber_store_quantity
}
rubber_store_quantity_1_week = {
	add = var:rubber_store_quantity
	divide = 4
}
store_rubber_time_reverse = {
	value = var:rubber_store_month_fixe # #12
	subtract = var:store_rubber_time
}

#####release
rubber_month_choise = { #1year
	value = var:rubber_month_choise
}
rubber_release_predicted = { #1year
	if = {
		limit = {
			var:rubber_release_status = 1
		}
		add = 1
		multiply = var:rubber_release_quantity
		multiply = var:rubber_release_month
	}
}
rubber_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:rubber_release_status = 1
		}
		add = 1
		multiply = var:rubber_release_quantity
		multiply = var:rubber_release_month_fixe
	}
	if = {
		limit = {
			var:rubber_release_status = 0
		}	
		add = 1
		multiply = var:rubber_release_quantity
		multiply = var:rubber_release_month
	}
}
rubber_release_for_modifier = {
	add = var:rubber_release_quantity
	multiply = 25
}
rubber_release_quantity_1_month = {
	add = var:rubber_release_quantity
}
rubber_release_quantity_1_week = {
	add = var:rubber_release_quantity
	divide = 4
}
release_rubber_time_reverse = {
	value = var:rubber_release_month_fixe # #12
	subtract = var:release_rubber_time
}

#country_rubber
stockpiling_rubber_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_rubber_state_1
			}
		}
	}
}

#global_rubber
rubber_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:rubber.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
rubber_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:rubber.market_goods_buy_orders
            }
        }
	}
	add = 1
}
rubber_global_market_goods_delta = {
	value = rubber_global_market_goods_sell_orders
	subtract = rubber_global_market_goods_buy_orders
}
rubber_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = rubber_global_market_goods_delta
		divide = rubber_global_market_goods_sell_orders
	}
}
rubber_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = rubber_global_market_goods_rapport_price
	multiply = -1
}
rubber_global_market_goods_price = {
	value = 20
	multiply = rubber_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#ammunition

#####flow
ammunition_market_goods_sell_orders = {
	value = {
		add = market.mg:ammunition.market_goods_sell_orders
	}
}
ammunition_market_goods_buy_orders = {
	value = {
		add = market.mg:ammunition.market_goods_buy_orders
	}
}
ammunition_market_goods_delta = {
	value = ammunition_market_goods_sell_orders
	subtract = ammunition_market_goods_buy_orders
}
ammunition_market_goods_delta_month = {
	value = ammunition_market_goods_delta
	multiply = 4
}
ammunition_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:ammunition_store_status = 0
			ammunition_market_goods_delta > 0
			stockpiling_ammunition_var_state < 1000000
		}
		add = ammunition_market_goods_delta
	}
	if = {
		limit = {
			var:ammunition_store_status = 1
			stockpiling_ammunition_var_state < 1000000
		}
		add = ammunition_store_quantity_1_week

		if = {
			limit = {
				ammunition_market_goods_delta > 0
				stockpiling_ammunition_var_state < 1000000
			}
			add = ammunition_market_goods_delta
		}
	}
}

#####store
ammunition_store_predicted = { #1year
	if = {
		limit = {
			var:ammunition_store_status = 1
		}
		add = 1
		multiply = var:ammunition_store_quantity
		multiply = var:ammunition_store_month
	}
}
ammunition_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:ammunition_store_status = 1
		}
		add = 1
		multiply = var:ammunition_store_quantity
		multiply = var:ammunition_store_month_fixe
	}
	if = {
		limit = {
			var:ammunition_store_status = 0
		}	
		add = 1
		multiply = var:ammunition_store_quantity
		multiply = var:ammunition_store_month
	}
}
ammunition_store_for_modifier = {
	add = var:ammunition_store_quantity
	multiply = 25
}
ammunition_store_quantity_1_month = {
	add = var:ammunition_store_quantity
}
ammunition_store_quantity_1_week = {
	add = var:ammunition_store_quantity
	divide = 4
}
store_ammunition_time_reverse = {
	value = var:ammunition_store_month_fixe # #12
	subtract = var:store_ammunition_time
}

#####release
ammunition_month_choise = { #1year
	value = var:ammunition_month_choise
}
ammunition_release_predicted = { #1year
	if = {
		limit = {
			var:ammunition_release_status = 1
		}
		add = 1
		multiply = var:ammunition_release_quantity
		multiply = var:ammunition_release_month
	}
}
ammunition_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:ammunition_release_status = 1
		}
		add = 1
		multiply = var:ammunition_release_quantity
		multiply = var:ammunition_release_month_fixe
	}
	if = {
		limit = {
			var:ammunition_release_status = 0
		}	
		add = 1
		multiply = var:ammunition_release_quantity
		multiply = var:ammunition_release_month
	}
}
ammunition_release_for_modifier = {
	add = var:ammunition_release_quantity
	multiply = 25
}
ammunition_release_quantity_1_month = {
	add = var:ammunition_release_quantity
}
ammunition_release_quantity_1_week = {
	add = var:ammunition_release_quantity
	divide = 4
}
release_ammunition_time_reverse = {
	value = var:ammunition_release_month_fixe # #12
	subtract = var:release_ammunition_time
}

#country_ammunition
stockpiling_ammunition_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_ammunition_state_1
			}
		}
	}
}

#global_ammunition
ammunition_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:ammunition.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
ammunition_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:ammunition.market_goods_buy_orders
            }
        }
	}
	add = 1
}
ammunition_global_market_goods_delta = {
	value = ammunition_global_market_goods_sell_orders
	subtract = ammunition_global_market_goods_buy_orders
}
ammunition_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = ammunition_global_market_goods_delta
		divide = ammunition_global_market_goods_sell_orders
	}
}
ammunition_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = ammunition_global_market_goods_rapport_price
	multiply = -1
}
ammunition_global_market_goods_price = {
	value = 20
	multiply = ammunition_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#small_arms

#####flow
small_arms_market_goods_sell_orders = {
	value = {
		add = market.mg:small_arms.market_goods_sell_orders
	}
}
small_arms_market_goods_buy_orders = {
	value = {
		add = market.mg:small_arms.market_goods_buy_orders
	}
}
small_arms_market_goods_delta = {
	value = small_arms_market_goods_sell_orders
	subtract = small_arms_market_goods_buy_orders
}
small_arms_market_goods_delta_month = {
	value = small_arms_market_goods_delta
	multiply = 4
}
small_arms_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:small_arms_store_status = 0
			small_arms_market_goods_delta > 0
			stockpiling_small_arms_var_state < 1000000
		}
		add = small_arms_market_goods_delta
	}
	if = {
		limit = {
			var:small_arms_store_status = 1
			stockpiling_small_arms_var_state < 1000000
		}
		add = small_arms_store_quantity_1_week

		if = {
			limit = {
				small_arms_market_goods_delta > 0
				stockpiling_small_arms_var_state < 1000000
			}
			add = small_arms_market_goods_delta
		}
	}
}

#####store
small_arms_store_predicted = { #1year
	if = {
		limit = {
			var:small_arms_store_status = 1
		}
		add = 1
		multiply = var:small_arms_store_quantity
		multiply = var:small_arms_store_month
	}
}
small_arms_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:small_arms_store_status = 1
		}
		add = 1
		multiply = var:small_arms_store_quantity
		multiply = var:small_arms_store_month_fixe
	}
	if = {
		limit = {
			var:small_arms_store_status = 0
		}	
		add = 1
		multiply = var:small_arms_store_quantity
		multiply = var:small_arms_store_month
	}
}
small_arms_store_for_modifier = {
	add = var:small_arms_store_quantity
	multiply = 25
}
small_arms_store_quantity_1_month = {
	add = var:small_arms_store_quantity
}
small_arms_store_quantity_1_week = {
	add = var:small_arms_store_quantity
	divide = 4
}
store_small_arms_time_reverse = {
	value = var:small_arms_store_month_fixe # #12
	subtract = var:store_small_arms_time
}

#####release
small_arms_month_choise = { #1year
	value = var:small_arms_month_choise
}
small_arms_release_predicted = { #1year
	if = {
		limit = {
			var:small_arms_release_status = 1
		}
		add = 1
		multiply = var:small_arms_release_quantity
		multiply = var:small_arms_release_month
	}
}
small_arms_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:small_arms_release_status = 1
		}
		add = 1
		multiply = var:small_arms_release_quantity
		multiply = var:small_arms_release_month_fixe
	}
	if = {
		limit = {
			var:small_arms_release_status = 0
		}	
		add = 1
		multiply = var:small_arms_release_quantity
		multiply = var:small_arms_release_month
	}
}
small_arms_release_for_modifier = {
	add = var:small_arms_release_quantity
	multiply = 25
}
small_arms_release_quantity_1_month = {
	add = var:small_arms_release_quantity
}
small_arms_release_quantity_1_week = {
	add = var:small_arms_release_quantity
	divide = 4
}
release_small_arms_time_reverse = {
	value = var:small_arms_release_month_fixe # #12
	subtract = var:release_small_arms_time
}

#country_small_arms
stockpiling_small_arms_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_small_arms_state_1
			}
		}
	}
}

#global_small_arms
small_arms_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:small_arms.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
small_arms_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:small_arms.market_goods_buy_orders
            }
        }
	}
	add = 1
}
small_arms_global_market_goods_delta = {
	value = small_arms_global_market_goods_sell_orders
	subtract = small_arms_global_market_goods_buy_orders
}
small_arms_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = small_arms_global_market_goods_delta
		divide = small_arms_global_market_goods_sell_orders
	}
}
small_arms_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = small_arms_global_market_goods_rapport_price
	multiply = -1
}
small_arms_global_market_goods_price = {
	value = 20
	multiply = small_arms_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#artillery

#####flow
artillery_market_goods_sell_orders = {
	value = {
		add = market.mg:artillery.market_goods_sell_orders
	}
}
artillery_market_goods_buy_orders = {
	value = {
		add = market.mg:artillery.market_goods_buy_orders
	}
}
artillery_market_goods_delta = {
	value = artillery_market_goods_sell_orders
	subtract = artillery_market_goods_buy_orders
}
artillery_market_goods_delta_month = {
	value = artillery_market_goods_delta
	multiply = 4
}
artillery_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:artillery_store_status = 0
			artillery_market_goods_delta > 0
			stockpiling_artillery_var_state < 1000000
		}
		add = artillery_market_goods_delta
	}
	if = {
		limit = {
			var:artillery_store_status = 1
			stockpiling_artillery_var_state < 1000000
		}
		add = artillery_store_quantity_1_week

		if = {
			limit = {
				artillery_market_goods_delta > 0
				stockpiling_artillery_var_state < 1000000
			}
			add = artillery_market_goods_delta
		}
	}
}

#####store
artillery_store_predicted = { #1year
	if = {
		limit = {
			var:artillery_store_status = 1
		}
		add = 1
		multiply = var:artillery_store_quantity
		multiply = var:artillery_store_month
	}
}
artillery_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:artillery_store_status = 1
		}
		add = 1
		multiply = var:artillery_store_quantity
		multiply = var:artillery_store_month_fixe
	}
	if = {
		limit = {
			var:artillery_store_status = 0
		}	
		add = 1
		multiply = var:artillery_store_quantity
		multiply = var:artillery_store_month
	}
}
artillery_store_for_modifier = {
	add = var:artillery_store_quantity
	multiply = 25
}
artillery_store_quantity_1_month = {
	add = var:artillery_store_quantity
}
artillery_store_quantity_1_week = {
	add = var:artillery_store_quantity
	divide = 4
}
store_artillery_time_reverse = {
	value = var:artillery_store_month_fixe # #12
	subtract = var:store_artillery_time
}

#####release
artillery_month_choise = { #1year
	value = var:artillery_month_choise
}
artillery_release_predicted = { #1year
	if = {
		limit = {
			var:artillery_release_status = 1
		}
		add = 1
		multiply = var:artillery_release_quantity
		multiply = var:artillery_release_month
	}
}
artillery_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:artillery_release_status = 1
		}
		add = 1
		multiply = var:artillery_release_quantity
		multiply = var:artillery_release_month_fixe
	}
	if = {
		limit = {
			var:artillery_release_status = 0
		}	
		add = 1
		multiply = var:artillery_release_quantity
		multiply = var:artillery_release_month
	}
}
artillery_release_for_modifier = {
	add = var:artillery_release_quantity
	multiply = 25
}
artillery_release_quantity_1_month = {
	add = var:artillery_release_quantity
}
artillery_release_quantity_1_week = {
	add = var:artillery_release_quantity
	divide = 4
}
release_artillery_time_reverse = {
	value = var:artillery_release_month_fixe # #12
	subtract = var:release_artillery_time
}

#country_artillery
stockpiling_artillery_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_artillery_state_1
			}
		}
	}
}

#global_artillery
artillery_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:artillery.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
artillery_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:artillery.market_goods_buy_orders
            }
        }
	}
	add = 1
}
artillery_global_market_goods_delta = {
	value = artillery_global_market_goods_sell_orders
	subtract = artillery_global_market_goods_buy_orders
}
artillery_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = artillery_global_market_goods_delta
		divide = artillery_global_market_goods_sell_orders
	}
}
artillery_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = artillery_global_market_goods_rapport_price
	multiply = -1
}
artillery_global_market_goods_price = {
	value = 20
	multiply = artillery_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#tanks

#####flow
tanks_market_goods_sell_orders = {
	value = {
		add = market.mg:tanks.market_goods_sell_orders
	}
}
tanks_market_goods_buy_orders = {
	value = {
		add = market.mg:tanks.market_goods_buy_orders
	}
}
tanks_market_goods_delta = {
	value = tanks_market_goods_sell_orders
	subtract = tanks_market_goods_buy_orders
}
tanks_market_goods_delta_month = {
	value = tanks_market_goods_delta
	multiply = 4
}
tanks_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:tanks_store_status = 0
			tanks_market_goods_delta > 0
			stockpiling_tanks_var_state < 1000000
		}
		add = tanks_market_goods_delta
	}
	if = {
		limit = {
			var:tanks_store_status = 1
			stockpiling_tanks_var_state < 1000000
		}
		add = tanks_store_quantity_1_week

		if = {
			limit = {
				tanks_market_goods_delta > 0
				stockpiling_tanks_var_state < 1000000
			}
			add = tanks_market_goods_delta
		}
	}
}

#####store
tanks_store_predicted = { #1year
	if = {
		limit = {
			var:tanks_store_status = 1
		}
		add = 1
		multiply = var:tanks_store_quantity
		multiply = var:tanks_store_month
	}
}
tanks_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:tanks_store_status = 1
		}
		add = 1
		multiply = var:tanks_store_quantity
		multiply = var:tanks_store_month_fixe
	}
	if = {
		limit = {
			var:tanks_store_status = 0
		}	
		add = 1
		multiply = var:tanks_store_quantity
		multiply = var:tanks_store_month
	}
}
tanks_store_for_modifier = {
	add = var:tanks_store_quantity
	multiply = 25
}
tanks_store_quantity_1_month = {
	add = var:tanks_store_quantity
}
tanks_store_quantity_1_week = {
	add = var:tanks_store_quantity
	divide = 4
}
store_tanks_time_reverse = {
	value = var:tanks_store_month_fixe # #12
	subtract = var:store_tanks_time
}

#####release
tanks_month_choise = { #1year
	value = var:tanks_month_choise
}
tanks_release_predicted = { #1year
	if = {
		limit = {
			var:tanks_release_status = 1
		}
		add = 1
		multiply = var:tanks_release_quantity
		multiply = var:tanks_release_month
	}
}
tanks_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:tanks_release_status = 1
		}
		add = 1
		multiply = var:tanks_release_quantity
		multiply = var:tanks_release_month_fixe
	}
	if = {
		limit = {
			var:tanks_release_status = 0
		}	
		add = 1
		multiply = var:tanks_release_quantity
		multiply = var:tanks_release_month
	}
}
tanks_release_for_modifier = {
	add = var:tanks_release_quantity
	multiply = 25
}
tanks_release_quantity_1_month = {
	add = var:tanks_release_quantity
}
tanks_release_quantity_1_week = {
	add = var:tanks_release_quantity
	divide = 4
}
release_tanks_time_reverse = {
	value = var:tanks_release_month_fixe # #12
	subtract = var:release_tanks_time
}

#country_tanks
stockpiling_tanks_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_tanks_state_1
			}
		}
	}
}

#global_tanks
tanks_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:tanks.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
tanks_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:tanks.market_goods_buy_orders
            }
        }
	}
	add = 1
}
tanks_global_market_goods_delta = {
	value = tanks_global_market_goods_sell_orders
	subtract = tanks_global_market_goods_buy_orders
}
tanks_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = tanks_global_market_goods_delta
		divide = tanks_global_market_goods_sell_orders
	}
}
tanks_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = tanks_global_market_goods_rapport_price
	multiply = -1
}
tanks_global_market_goods_price = {
	value = 20
	multiply = tanks_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#aeroplanes

#####flow
aeroplanes_market_goods_sell_orders = {
	value = {
		add = market.mg:aeroplanes.market_goods_sell_orders
	}
}
aeroplanes_market_goods_buy_orders = {
	value = {
		add = market.mg:aeroplanes.market_goods_buy_orders
	}
}
aeroplanes_market_goods_delta = {
	value = aeroplanes_market_goods_sell_orders
	subtract = aeroplanes_market_goods_buy_orders
}
aeroplanes_market_goods_delta_month = {
	value = aeroplanes_market_goods_delta
	multiply = 4
}
aeroplanes_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:aeroplanes_store_status = 0
			aeroplanes_market_goods_delta > 0
			stockpiling_aeroplanes_var_state < 1000000
		}
		add = aeroplanes_market_goods_delta
	}
	if = {
		limit = {
			var:aeroplanes_store_status = 1
			stockpiling_aeroplanes_var_state < 1000000
		}
		add = aeroplanes_store_quantity_1_week

		if = {
			limit = {
				aeroplanes_market_goods_delta > 0
				stockpiling_aeroplanes_var_state < 1000000
			}
			add = aeroplanes_market_goods_delta
		}
	}
}

#####store
aeroplanes_store_predicted = { #1year
	if = {
		limit = {
			var:aeroplanes_store_status = 1
		}
		add = 1
		multiply = var:aeroplanes_store_quantity
		multiply = var:aeroplanes_store_month
	}
}
aeroplanes_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:aeroplanes_store_status = 1
		}
		add = 1
		multiply = var:aeroplanes_store_quantity
		multiply = var:aeroplanes_store_month_fixe
	}
	if = {
		limit = {
			var:aeroplanes_store_status = 0
		}	
		add = 1
		multiply = var:aeroplanes_store_quantity
		multiply = var:aeroplanes_store_month
	}
}
aeroplanes_store_for_modifier = {
	add = var:aeroplanes_store_quantity
	multiply = 25
}
aeroplanes_store_quantity_1_month = {
	add = var:aeroplanes_store_quantity
}
aeroplanes_store_quantity_1_week = {
	add = var:aeroplanes_store_quantity
	divide = 4
}
store_aeroplanes_time_reverse = {
	value = var:aeroplanes_store_month_fixe # #12
	subtract = var:store_aeroplanes_time
}

#####release
aeroplanes_month_choise = { #1year
	value = var:aeroplanes_month_choise
}
aeroplanes_release_predicted = { #1year
	if = {
		limit = {
			var:aeroplanes_release_status = 1
		}
		add = 1
		multiply = var:aeroplanes_release_quantity
		multiply = var:aeroplanes_release_month
	}
}
aeroplanes_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:aeroplanes_release_status = 1
		}
		add = 1
		multiply = var:aeroplanes_release_quantity
		multiply = var:aeroplanes_release_month_fixe
	}
	if = {
		limit = {
			var:aeroplanes_release_status = 0
		}	
		add = 1
		multiply = var:aeroplanes_release_quantity
		multiply = var:aeroplanes_release_month
	}
}
aeroplanes_release_for_modifier = {
	add = var:aeroplanes_release_quantity
	multiply = 25
}
aeroplanes_release_quantity_1_month = {
	add = var:aeroplanes_release_quantity
}
aeroplanes_release_quantity_1_week = {
	add = var:aeroplanes_release_quantity
	divide = 4
}
release_aeroplanes_time_reverse = {
	value = var:aeroplanes_release_month_fixe # #12
	subtract = var:release_aeroplanes_time
}

#country_aeroplanes
stockpiling_aeroplanes_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_aeroplanes_state_1
			}
		}
	}
}

#global_aeroplanes
aeroplanes_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:aeroplanes.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
aeroplanes_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:aeroplanes.market_goods_buy_orders
            }
        }
	}
	add = 1
}
aeroplanes_global_market_goods_delta = {
	value = aeroplanes_global_market_goods_sell_orders
	subtract = aeroplanes_global_market_goods_buy_orders
}
aeroplanes_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = aeroplanes_global_market_goods_delta
		divide = aeroplanes_global_market_goods_sell_orders
	}
}
aeroplanes_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = aeroplanes_global_market_goods_rapport_price
	multiply = -1
}
aeroplanes_global_market_goods_price = {
	value = 20
	multiply = aeroplanes_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#manowars

#####flow
manowars_market_goods_sell_orders = {
	value = {
		add = market.mg:manowars.market_goods_sell_orders
	}
}
manowars_market_goods_buy_orders = {
	value = {
		add = market.mg:manowars.market_goods_buy_orders
	}
}
manowars_market_goods_delta = {
	value = manowars_market_goods_sell_orders
	subtract = manowars_market_goods_buy_orders
}
manowars_market_goods_delta_month = {
	value = manowars_market_goods_delta
	multiply = 4
}
manowars_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:manowars_store_status = 0
			manowars_market_goods_delta > 0
			stockpiling_manowars_var_state < 1000000
		}
		add = manowars_market_goods_delta
	}
	if = {
		limit = {
			var:manowars_store_status = 1
			stockpiling_manowars_var_state < 1000000
		}
		add = manowars_store_quantity_1_week

		if = {
			limit = {
				manowars_market_goods_delta > 0
				stockpiling_manowars_var_state < 1000000
			}
			add = manowars_market_goods_delta
		}
	}
}

#####store
manowars_store_predicted = { #1year
	if = {
		limit = {
			var:manowars_store_status = 1
		}
		add = 1
		multiply = var:manowars_store_quantity
		multiply = var:manowars_store_month
	}
}
manowars_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:manowars_store_status = 1
		}
		add = 1
		multiply = var:manowars_store_quantity
		multiply = var:manowars_store_month_fixe
	}
	if = {
		limit = {
			var:manowars_store_status = 0
		}	
		add = 1
		multiply = var:manowars_store_quantity
		multiply = var:manowars_store_month
	}
}
manowars_store_for_modifier = {
	add = var:manowars_store_quantity
	multiply = 25
}
manowars_store_quantity_1_month = {
	add = var:manowars_store_quantity
}
manowars_store_quantity_1_week = {
	add = var:manowars_store_quantity
	divide = 4
}
store_manowars_time_reverse = {
	value = var:manowars_store_month_fixe # #12
	subtract = var:store_manowars_time
}

#####release
manowars_month_choise = { #1year
	value = var:manowars_month_choise
}
manowars_release_predicted = { #1year
	if = {
		limit = {
			var:manowars_release_status = 1
		}
		add = 1
		multiply = var:manowars_release_quantity
		multiply = var:manowars_release_month
	}
}
manowars_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:manowars_release_status = 1
		}
		add = 1
		multiply = var:manowars_release_quantity
		multiply = var:manowars_release_month_fixe
	}
	if = {
		limit = {
			var:manowars_release_status = 0
		}	
		add = 1
		multiply = var:manowars_release_quantity
		multiply = var:manowars_release_month
	}
}
manowars_release_for_modifier = {
	add = var:manowars_release_quantity
	multiply = 25
}
manowars_release_quantity_1_month = {
	add = var:manowars_release_quantity
}
manowars_release_quantity_1_week = {
	add = var:manowars_release_quantity
	divide = 4
}
release_manowars_time_reverse = {
	value = var:manowars_release_month_fixe # #12
	subtract = var:release_manowars_time
}

#country_manowars
stockpiling_manowars_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_manowars_state_1
			}
		}
	}
}

#global_manowars
manowars_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:manowars.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
manowars_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:manowars.market_goods_buy_orders
            }
        }
	}
	add = 1
}
manowars_global_market_goods_delta = {
	value = manowars_global_market_goods_sell_orders
	subtract = manowars_global_market_goods_buy_orders
}
manowars_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = manowars_global_market_goods_delta
		divide = manowars_global_market_goods_sell_orders
	}
}
manowars_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = manowars_global_market_goods_rapport_price
	multiply = -1
}
manowars_global_market_goods_price = {
	value = 20
	multiply = manowars_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#ironclads

#####flow
ironclads_market_goods_sell_orders = {
	value = {
		add = market.mg:ironclads.market_goods_sell_orders
	}
}
ironclads_market_goods_buy_orders = {
	value = {
		add = market.mg:ironclads.market_goods_buy_orders
	}
}
ironclads_market_goods_delta = {
	value = ironclads_market_goods_sell_orders
	subtract = ironclads_market_goods_buy_orders
}
ironclads_market_goods_delta_month = {
	value = ironclads_market_goods_delta
	multiply = 4
}
ironclads_market_goods_delta_month_view = {
	value = 0
	if = {
		limit = {
			var:ironclads_store_status = 0
			ironclads_market_goods_delta > 0
			stockpiling_ironclads_var_state < 1000000
		}
		add = ironclads_market_goods_delta
	}
	if = {
		limit = {
			var:ironclads_store_status = 1
			stockpiling_ironclads_var_state < 1000000
		}
		add = ironclads_store_quantity_1_week

		if = {
			limit = {
				ironclads_market_goods_delta > 0
				stockpiling_ironclads_var_state < 1000000
			}
			add = ironclads_market_goods_delta
		}
	}
}

#####store
ironclads_store_predicted = { #1year
	if = {
		limit = {
			var:ironclads_store_status = 1
		}
		add = 1
		multiply = var:ironclads_store_quantity
		multiply = var:ironclads_store_month
	}
}
ironclads_store_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:ironclads_store_status = 1
		}
		add = 1
		multiply = var:ironclads_store_quantity
		multiply = var:ironclads_store_month_fixe
	}
	if = {
		limit = {
			var:ironclads_store_status = 0
		}	
		add = 1
		multiply = var:ironclads_store_quantity
		multiply = var:ironclads_store_month
	}
}
ironclads_store_for_modifier = {
	add = var:ironclads_store_quantity
	multiply = 25
}
ironclads_store_quantity_1_month = {
	add = var:ironclads_store_quantity
}
ironclads_store_quantity_1_week = {
	add = var:ironclads_store_quantity
	divide = 4
}
store_ironclads_time_reverse = {
	value = var:ironclads_store_month_fixe # #12
	subtract = var:store_ironclads_time
}

#####release
ironclads_month_choise = { #1year
	value = var:ironclads_month_choise
}
ironclads_release_predicted = { #1year
	if = {
		limit = {
			var:ironclads_release_status = 1
		}
		add = 1
		multiply = var:ironclads_release_quantity
		multiply = var:ironclads_release_month
	}
}
ironclads_release_predicted_no_limit = {  #1year_fixe ui
	if = {
		limit = {
			var:ironclads_release_status = 1
		}
		add = 1
		multiply = var:ironclads_release_quantity
		multiply = var:ironclads_release_month_fixe
	}
	if = {
		limit = {
			var:ironclads_release_status = 0
		}	
		add = 1
		multiply = var:ironclads_release_quantity
		multiply = var:ironclads_release_month
	}
}
ironclads_release_for_modifier = {
	add = var:ironclads_release_quantity
	multiply = 25
}
ironclads_release_quantity_1_month = {
	add = var:ironclads_release_quantity
}
ironclads_release_quantity_1_week = {
	add = var:ironclads_release_quantity
	divide = 4
}
release_ironclads_time_reverse = {
	value = var:ironclads_release_month_fixe # #12
	subtract = var:release_ironclads_time
}

#country_ironclads
stockpiling_ironclads_var_state = {
	value = 0
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_ironclads_state_1
			}
		}
	}
}

#global_ironclads
ironclads_global_market_goods_sell_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:ironclads.market_goods_sell_orders
            }
        }
	}
	add = 1   
}
ironclads_global_market_goods_buy_orders = {
	value = {
        add = {
            every_country = {
				add = market.mg:ironclads.market_goods_buy_orders
            }
        }
	}
	add = 1
}
ironclads_global_market_goods_delta = {
	value = ironclads_global_market_goods_sell_orders
	subtract = ironclads_global_market_goods_buy_orders
}
ironclads_global_market_goods_rapport_price = {
	value = 1
	subtract = {
		value = ironclads_global_market_goods_delta
		divide = ironclads_global_market_goods_sell_orders
	}
}
ironclads_global_market_goods_rapport_price_reverse_panel = {
	value = 1
	subtract = ironclads_global_market_goods_rapport_price
	multiply = -1
}
ironclads_global_market_goods_price = {
	value = 20
	multiply = ironclads_global_market_goods_rapport_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

# ██████╗ ███████╗██╗     ███████╗ █████╗ ███████╗███████╗         ██████╗ ██╗   ██╗ █████╗ ███╗   ██╗████████╗██╗████████╗██╗   ██╗
# ██╔══██╗██╔════╝██║     ██╔════╝██╔══██╗██╔════╝██╔════╝        ██╔═══██╗██║   ██║██╔══██╗████╗  ██║╚══██╔══╝██║╚══██╔══╝╚██╗ ██╔╝
# ██████╔╝█████╗  ██║     █████╗  ███████║███████╗█████╗          ██║   ██║██║   ██║███████║██╔██╗ ██║   ██║   ██║   ██║    ╚████╔╝ 
# ██╔══██╗██╔══╝  ██║     ██╔══╝  ██╔══██║╚════██║██╔══╝          ██║▄▄ ██║██║   ██║██╔══██║██║╚██╗██║   ██║   ██║   ██║     ╚██╔╝  
# ██║  ██║███████╗███████╗███████╗██║  ██║███████║███████╗███████╗╚██████╔╝╚██████╔╝██║  ██║██║ ╚████║   ██║   ██║   ██║      ██║   
# ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝ ╚══▀▀═╝  ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚═╝   ╚═╝      ╚═╝   

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#grain
ai_grain_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			grain_market_goods_delta_month < 0
			grain_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month < -4000
			grain_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month < -8000
			grain_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month < -12000
			grain_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month < -16000
			grain_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_grain_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			grain_market_goods_delta_month >= 4000
			grain_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month >= 8000
			grain_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month >= 12000
			grain_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month >= 16000
			grain_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			grain_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#wood
ai_wood_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			wood_market_goods_delta_month < 0
			wood_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month < -4000
			wood_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month < -8000
			wood_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month < -12000
			wood_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month < -16000
			wood_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_wood_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			wood_market_goods_delta_month >= 4000
			wood_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month >= 8000
			wood_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month >= 12000
			wood_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month >= 16000
			wood_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			wood_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#coal
ai_coal_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			coal_market_goods_delta_month < 0
			coal_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month < -4000
			coal_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month < -8000
			coal_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month < -12000
			coal_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month < -16000
			coal_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_coal_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			coal_market_goods_delta_month >= 4000
			coal_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month >= 8000
			coal_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month >= 12000
			coal_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month >= 16000
			coal_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			coal_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#iron
ai_iron_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			iron_market_goods_delta_month < 0
			iron_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month < -4000
			iron_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month < -8000
			iron_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month < -12000
			iron_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month < -16000
			iron_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_iron_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			iron_market_goods_delta_month >= 4000
			iron_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month >= 8000
			iron_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month >= 12000
			iron_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month >= 16000
			iron_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			iron_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#sulfur
ai_sulfur_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			sulfur_market_goods_delta_month < 0
			sulfur_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month < -4000
			sulfur_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month < -8000
			sulfur_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month < -12000
			sulfur_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month < -16000
			sulfur_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_sulfur_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			sulfur_market_goods_delta_month >= 4000
			sulfur_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month >= 8000
			sulfur_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month >= 12000
			sulfur_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month >= 16000
			sulfur_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			sulfur_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#lead
ai_lead_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			lead_market_goods_delta_month < 0
			lead_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month < -4000
			lead_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month < -8000
			lead_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month < -12000
			lead_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month < -16000
			lead_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_lead_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			lead_market_goods_delta_month >= 4000
			lead_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month >= 8000
			lead_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month >= 12000
			lead_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month >= 16000
			lead_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			lead_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#oil -> special 1000/week by default
ai_oil_release_quantity_1Y = {
	if  = {
		limit  = {
			sulfur_market_goods_delta_month < 0
			sulfur_market_goods_delta_month > -4000
		}
		add = 4000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month < -4000
			oil_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month < -8000
			oil_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month < -12000
			oil_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month < -16000
			oil_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_oil_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			oil_market_goods_delta_month >= 4000
			oil_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month >= 8000
			oil_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month >= 12000
			oil_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month >= 16000
			oil_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			oil_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#dye
ai_dye_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			dye_market_goods_delta_month < 0
			dye_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month < -4000
			dye_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month < -8000
			dye_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month < -12000
			dye_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month < -16000
			dye_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_dye_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			dye_market_goods_delta_month >= 4000
			dye_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month >= 8000
			dye_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month >= 12000
			dye_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month >= 16000
			dye_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			dye_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#silk
ai_silk_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			silk_market_goods_delta_month < 0
			silk_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month < -4000
			silk_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month < -8000
			silk_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month < -12000
			silk_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month < -16000
			silk_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_silk_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			silk_market_goods_delta_month >= 4000
			silk_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month >= 8000
			silk_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month >= 12000
			silk_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month >= 16000
			silk_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			silk_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#rubber
ai_rubber_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			rubber_market_goods_delta_month < 0
			rubber_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month < -4000
			rubber_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month < -8000
			rubber_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month < -12000
			rubber_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month < -16000
			rubber_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_rubber_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			rubber_market_goods_delta_month >= 4000
			rubber_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month >= 8000
			rubber_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month >= 12000
			rubber_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month >= 16000
			rubber_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			rubber_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#ammunition
ai_ammunition_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			ammunition_market_goods_delta_month < 0
			ammunition_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month < -4000
			ammunition_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month < -8000
			ammunition_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month < -12000
			ammunition_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month < -16000
			ammunition_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_ammunition_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			ammunition_market_goods_delta_month >= 4000
			ammunition_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month >= 8000
			ammunition_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month >= 12000
			ammunition_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month >= 16000
			ammunition_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			ammunition_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#small_arms
ai_small_arms_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			small_arms_market_goods_delta_month < 0
			small_arms_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month < -4000
			small_arms_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month < -8000
			small_arms_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month < -12000
			small_arms_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month < -16000
			small_arms_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_small_arms_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			small_arms_market_goods_delta_month >= 4000
			small_arms_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month >= 8000
			small_arms_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month >= 12000
			small_arms_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month >= 16000
			small_arms_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			small_arms_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#artillery
ai_artillery_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			artillery_market_goods_delta_month < 0
			artillery_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month < -4000
			artillery_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month < -8000
			artillery_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month < -12000
			artillery_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month < -16000
			artillery_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_artillery_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			artillery_market_goods_delta_month >= 4000
			artillery_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month >= 8000
			artillery_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month >= 12000
			artillery_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month >= 16000
			artillery_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			artillery_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#tanks
ai_tanks_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			tanks_market_goods_delta_month < 0
			tanks_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month < -4000
			tanks_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month < -8000
			tanks_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month < -12000
			tanks_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month < -16000
			tanks_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_tanks_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			tanks_market_goods_delta_month >= 4000
			tanks_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month >= 8000
			tanks_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month >= 12000
			tanks_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month >= 16000
			tanks_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			tanks_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#aeroplanes
ai_aeroplanes_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month < 0
			aeroplanes_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month < -4000
			aeroplanes_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month < -8000
			aeroplanes_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month < -12000
			aeroplanes_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month < -16000
			aeroplanes_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_aeroplanes_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month >= 4000
			aeroplanes_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month >= 8000
			aeroplanes_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month >= 12000
			aeroplanes_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month >= 16000
			aeroplanes_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			aeroplanes_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#manowars
ai_manowars_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			manowars_market_goods_delta_month < 0
			manowars_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month < -4000
			manowars_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month < -8000
			manowars_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month < -12000
			manowars_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month < -16000
			manowars_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_manowars_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			manowars_market_goods_delta_month >= 4000
			manowars_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month >= 8000
			manowars_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month >= 12000
			manowars_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month >= 16000
			manowars_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			manowars_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

#ironclads
ai_ironclads_release_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			ironclads_market_goods_delta_month < 0
			ironclads_market_goods_delta_month > -4000
		}
		add = 2000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month < -4000
			ironclads_market_goods_delta_month > -8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month < -8000
			ironclads_market_goods_delta_month > -12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month < -12000
			ironclads_market_goods_delta_month > -16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month < -16000
			ironclads_market_goods_delta_month > -20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month < -20000
		}
		add = 20000
	}
}
ai_ironclads_store_quantity_1Y = {
	value = 1
	if  = {
		limit  = {
			ironclads_market_goods_delta_month >= 4000
			ironclads_market_goods_delta_month < 8000
		}
		add = 4000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month >= 8000
			ironclads_market_goods_delta_month < 12000
		}
		add = 8000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month >= 12000
			ironclads_market_goods_delta_month < 16000
		}
		add = 12000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month >= 16000
			ironclads_market_goods_delta_month < 20000
		}
		add = 16000
	}
	if  = {
		limit  = {
			ironclads_market_goods_delta_month >= 20000
		}
		add = 20000
	}
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

# ███████╗████████╗ █████╗ ████████╗███████╗        ██╗        ██████╗ ███████╗
# ██╔════╝╚══██╔══╝██╔══██╗╚══██╔══╝██╔════╝       ███║        ╚════██╗██╔════╝
# ███████╗   ██║   ███████║   ██║   █████╗         ╚██║         █████╔╝███████╗
# ╚════██║   ██║   ██╔══██║   ██║   ██╔══╝          ██║        ██╔═══╝ ╚════██║
# ███████║   ██║   ██║  ██║   ██║   ███████╗███████╗██║███████╗███████╗███████║
# ╚══════╝   ╚═╝   ╚═╝  ╚═╝   ╚═╝   ╚══════╝╚══════╝╚═╝╚══════╝╚══════╝╚══════╝

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

stockpiling_grain_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_grain_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_wood_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_wood_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_coal_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_coal_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_iron_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_iron_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_sulfur_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_sulfur_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_lead_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_lead_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_oil_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_oil_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_dye_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_dye_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_silk_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_silk_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_rubber_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_rubber_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_ammunition_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_ammunition_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_small_arms_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_small_arms_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_artillery_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_artillery_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_tanks_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_tanks_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_aeroplanes_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_aeroplanes_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_manowars_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_manowars_state_1
			}
		}
	}
	multiply = 0.25
}
stockpiling_ironclads_state_1_25 = {
	value = 1
	add  = {
		every_scope_state = {
			if = {
				limit = {
					has_modifier = national_stockpile_historic_place
				}
				add = var:stockpiling_ironclads_state_1
			}
		}
	}
	multiply = 0.25
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#  ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  █████╗  ██████╗████████╗     ██╗     ██╗   ██╗███████╗ █████╗ ██████╗          ██████╗ ██████╗ ██████╗ ███████╗██████╗ 
# ██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝    ███║     ╚██╗ ██╔╝██╔════╝██╔══██╗██╔══██╗        ██╔═══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗
# ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝███████║██║        ██║       ╚██║      ╚████╔╝ █████╗  ███████║██████╔╝        ██║   ██║██████╔╝██║  ██║█████╗  ██████╔╝
# ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██╔══██║██║        ██║        ██║       ╚██╔╝  ██╔══╝  ██╔══██║██╔══██╗        ██║   ██║██╔══██╗██║  ██║██╔══╝  ██╔══██╗
# ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║██║  ██║╚██████╗   ██║███████╗██║███████╗██║   ███████╗██║  ██║██║  ██║███████╗╚██████╔╝██║  ██║██████╔╝███████╗██║  ██║
#  ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝╚══════╝╚═╝╚══════╝╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

grain_contract_1_year_order = {
	value = 1
	subtract = var:grain_contract_1_year
}
wood_contract_1_year_order = {
	value = 1
	subtract = var:wood_contract_1_year
}
coal_contract_1_year_order = {
	value = 1
	subtract = var:coal_contract_1_year
}
iron_contract_1_year_order = {
	value = 1
	subtract = var:iron_contract_1_year
}
sulfur_contract_1_year_order = {
	value = 1
	subtract = var:sulfur_contract_1_year
}
lead_contract_1_year_order = {
	value = 1
	subtract = var:lead_contract_1_year
}
oil_contract_1_year_order = {
	value = 1
	subtract = var:oil_contract_1_year
}
dye_contract_1_year_order = {
	value = 1
	subtract = var:dye_contract_1_year
}
silk_contract_1_year_order = {
	value = 1
	subtract = var:silk_contract_1_year
}
rubber_contract_1_year_order = {
	value = 1
	subtract = var:rubber_contract_1_year
}
ammunition_contract_1_year_order = {
	value = 1
	subtract = var:ammunition_contract_1_year
}
small_arms_contract_1_year_order = {
	value = 1
	subtract = var:small_arms_contract_1_year
}
artillery_contract_1_year_order = {
	value = 1
	subtract = var:artillery_contract_1_year
}
tanks_contract_1_year_order = {
	value = 1
	subtract = var:tanks_contract_1_year
}
aeroplanes_contract_1_year_order = {
	value = 1
	subtract = var:aeroplanes_contract_1_year
}
manowars_contract_1_year_order = {
	value = 1
	subtract = var:manowars_contract_1_year
}
ironclads_contract_1_year_order = {
	value = 1
	subtract = var:ironclads_contract_1_year
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################


#  ██████╗  ██████╗  ██████╗ ██████╗ ███████╗    ██╗███╗   ██╗     ██████╗  ██████╗ ██╗     ██████╗ 
# ██╔════╝ ██╔═══██╗██╔═══██╗██╔══██╗██╔════╝    ██║████╗  ██║    ██╔════╝ ██╔═══██╗██║     ██╔══██╗
# ██║  ███╗██║   ██║██║   ██║██║  ██║███████╗    ██║██╔██╗ ██║    ██║  ███╗██║   ██║██║     ██║  ██║
# ██║   ██║██║   ██║██║   ██║██║  ██║╚════██║    ██║██║╚██╗██║    ██║   ██║██║   ██║██║     ██║  ██║
# ╚██████╔╝╚██████╔╝╚██████╔╝██████╔╝███████║    ██║██║ ╚████║    ╚██████╔╝╚██████╔╝███████╗██████╔╝
#  ╚═════╝  ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝    ╚═╝╚═╝  ╚═══╝     ╚═════╝  ╚═════╝ ╚══════╝╚═════╝ 


########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

stockpiling_grain_var_in_currency = {
	value = stockpiling_grain_var_state
	multiply = grain_price
}

stockpiling_wood_var_in_currency = {
	value = stockpiling_wood_var_state
	multiply = wood_price
}

stockpiling_coal_var_in_currency = {
	value = stockpiling_coal_var_state
	multiply = coal_price
}

stockpiling_iron_var_in_currency = {
	value = stockpiling_iron_var_state
	multiply = iron_price
}

stockpiling_sulfur_var_in_currency = {
	value = stockpiling_sulfur_var_state
	multiply = sulfur_price
}

stockpiling_lead_var_in_currency = {
	value = stockpiling_lead_var_state
	multiply = lead_price
}

stockpiling_oil_var_in_currency = {
	value = stockpiling_oil_var_state
	multiply = oil_price
}

stockpiling_dye_var_in_currency = {
	value = stockpiling_dye_var_state
	multiply = dye_price
}

stockpiling_silk_var_in_currency = {
	value = stockpiling_silk_var_state
	multiply = silk_price
}

stockpiling_rubber_var_in_currency = {
	value = stockpiling_rubber_var_state
	multiply = rubber_price
}

stockpiling_ammunition_var_in_currency = {
	value = stockpiling_ammunition_var_state
	multiply = ammunition_price
}

stockpiling_small_arms_var_in_currency = {
	value = stockpiling_small_arms_var_state
	multiply = small_arms_price
}

stockpiling_artillery_var_in_currency = {
	value = stockpiling_artillery_var_state
	multiply = artillery_price
}

stockpiling_tanks_var_in_currency = {
	value = stockpiling_tanks_var_state
	multiply = tanks_price
}

stockpiling_aeroplanes_var_in_currency = {
	value = stockpiling_aeroplanes_var_state
	multiply = aeroplanes_price
}

stockpiling_manowars_var_in_currency = {
	value = stockpiling_manowars_var_state
	multiply = manowars_price
}

stockpiling_ironclads_var_in_currency = {
	value = stockpiling_ironclads_var_state
	multiply = ironclads_price
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#  █████╗ ██╗     ██╗          ██████╗  ██████╗  ██████╗ ██████╗ ███████╗    ██╗███╗   ██╗     ██████╗  ██████╗ ██╗     ██████╗ 
# ██╔══██╗██║     ██║         ██╔════╝ ██╔═══██╗██╔═══██╗██╔══██╗██╔════╝    ██║████╗  ██║    ██╔════╝ ██╔═══██╗██║     ██╔══██╗
# ███████║██║     ██║         ██║  ███╗██║   ██║██║   ██║██║  ██║███████╗    ██║██╔██╗ ██║    ██║  ███╗██║   ██║██║     ██║  ██║
# ██╔══██║██║     ██║         ██║   ██║██║   ██║██║   ██║██║  ██║╚════██║    ██║██║╚██╗██║    ██║   ██║██║   ██║██║     ██║  ██║
# ██║  ██║███████╗███████╗    ╚██████╔╝╚██████╔╝╚██████╔╝██████╔╝███████║    ██║██║ ╚████║    ╚██████╔╝╚██████╔╝███████╗██████╔╝
# ╚═╝  ╚═╝╚══════╝╚══════╝     ╚═════╝  ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝    ╚═╝╚═╝  ╚═══╝     ╚═════╝  ╚═════╝ ╚══════╝╚═════╝ 

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

all_good_in_currency = {
	value = 0
	add = stockpiling_grain_var_in_currency
	add = stockpiling_wood_var_in_currency
	add = stockpiling_coal_var_in_currency
	add = stockpiling_iron_var_in_currency
	add = stockpiling_sulfur_var_in_currency
	add = stockpiling_lead_var_in_currency
	add = stockpiling_oil_var_in_currency
	add = stockpiling_dye_var_in_currency
	add = stockpiling_silk_var_in_currency
	add = stockpiling_rubber_var_in_currency
	add = stockpiling_ammunition_var_in_currency
	add = stockpiling_small_arms_var_in_currency
	add = stockpiling_artillery_var_in_currency
	add = stockpiling_tanks_var_in_currency
	add = stockpiling_aeroplanes_var_in_currency
	add = stockpiling_manowars_var_in_currency
	add = stockpiling_ironclads_var_in_currency
}
all_good_in_gold = {
	value = all_good_in_currency
	multiply = money_value_in_gold
}

all_good_in_currency_03 = {
	value = all_good_in_currency
	multiply = 0.33
}
all_good_in_currency_06 = {
	value = all_good_in_currency
	multiply = 0.66
}
all_good_in_gold_03 = {
	value = all_good_in_gold
	multiply = 0.33
}
all_good_in_gold_06 = {
	value = all_good_in_gold
	multiply = 0.66
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

# 

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

has_building_produces_grain = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				or = {
					has_building = building_rye_farm
					has_building = building_wheat_farm
					has_building = building_rice_farm
					has_building = building_maize_farm
					has_building = building_millet_farm
				}
			}
		}
		add = 1
	}
}
has_building_produces_wood = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_logging_camp
			}
		}
		add = 1
	}
}
has_building_produces_coal = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_coal_mine
			}
		}
		add = 1
	}
}
has_building_produces_iron = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_iron_mine
			}
		}
		add = 1
	}
}
has_building_produces_sulfur = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_sulfur_mine
			}
		}
		add = 1
	}
}
has_building_produces_lead = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_lead_mine
			}
		}
		add = 1
	}
}
has_building_produces_oil = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_oil_rig
			}
		}
		add = 1
	}
}
has_building_produces_dye = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				or = {
					has_building = building_dye_plantation
					has_building = building_synthetics_plants
				}
			}
		}
		add = 1
	}
}
has_building_produces_silk = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				or = {
					has_building = building_silk_plantation
					has_building = building_synthetics_plants
				}
			}
		}
		add = 1
	}
}
has_building_produces_rubber = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_rubber_plantation
			}
		}
		add = 1
	}
}
has_building_produces_ammunition = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_munition_plants
			}
		}
		add = 1
	}
}
has_building_produces_small_arms = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_arms_industry
			}
		}
		add = 1
	}
}
has_building_produces_artillery = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_artillery_foundries
			}
		}
		add = 1
	}
}
has_building_produces_tanks = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_war_machine_industry
			}
		}
		add = 1
	}
}
has_building_produces_aeroplanes = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_war_machine_industry
			}
		}
		add = 1
	}
}
has_building_produces_manowars = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_military_shipyards
			}
		}
		add = 1
	}
}
has_building_produces_ironclads = {
	value = 0 
	if = { 
		limit = {
			any_scope_state = {
				has_building = building_military_shipyards
			}
		}
		add = 1
	}
}

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

# quantity_buy_on_global_market

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

quantity_grain_buy_on_global_market = {
	value = gold_reserves_10
	divide = grain_global_market_goods_price
	max = 1000000
}
quantity_wood_buy_on_global_market = {
	value = gold_reserves_10
	divide = wood_global_market_goods_price
	max = 1000000
}
quantity_coal_buy_on_global_market = {
	value = gold_reserves_10
	divide = coal_global_market_goods_price
	max = 1000000
}
quantity_iron_buy_on_global_market = {
	value = gold_reserves_10
	divide = iron_global_market_goods_price
	max = 1000000
}
quantity_sulfur_buy_on_global_market = {
	value = gold_reserves_10
	divide = sulfur_global_market_goods_price
	max = 1000000
}
quantity_lead_buy_on_global_market = {
	value = gold_reserves_10
	divide = lead_global_market_goods_price
	max = 1000000
}
quantity_oil_buy_on_global_market = {
	value = gold_reserves_10
	divide = oil_global_market_goods_price
	max = 1000000
}
quantity_dye_buy_on_global_market = {
	value = gold_reserves_10
	divide = dye_global_market_goods_price
	max = 1000000
}
quantity_silk_buy_on_global_market = {
	value = gold_reserves_10
	divide = silk_global_market_goods_price
	max = 1000000
}
quantity_rubber_buy_on_global_market = {
	value = gold_reserves_10
	divide = rubber_global_market_goods_price
	max = 1000000
}
quantity_ammunition_buy_on_global_market = {
	value = gold_reserves_10
	divide = ammunition_global_market_goods_price
	max = 1000000
}
quantity_small_arms_buy_on_global_market = {
	value = gold_reserves_10
	divide = small_arms_global_market_goods_price
	max = 1000000
}
quantity_artillery_buy_on_global_market = {
	value = gold_reserves_10
	divide = artillery_global_market_goods_price
	max = 1000000
}
quantity_tanks_buy_on_global_market = {
	value = gold_reserves_10
	divide = tanks_global_market_goods_price
	max = 1000000
}
quantity_aeroplanes_buy_on_global_market = {
	value = gold_reserves_10
	divide = aeroplanes_global_market_goods_price
	max = 1000000
}
quantity_manowars_buy_on_global_market = {
	value = gold_reserves_10
	divide = manowars_global_market_goods_price
	max = 1000000
}
quantity_ironclads_buy_on_global_market = {
	value = gold_reserves_10
	divide = ironclads_global_market_goods_price
	max = 1000000
}

######################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

# quantity_buy_on_global_market

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################


current_order = {
	value = 0
	add = var:buy_grain_in_gold_1
	add = var:buy_grain_1
	add = var:sell_grain_in_gold_1
	add = var:sell_grain_1
	add = var:buy_wood_in_gold_1
	add = var:buy_wood_1
	add = var:sell_wood_in_gold_1
	add = var:sell_wood_1
	add = var:buy_coal_in_gold_1
	add = var:buy_coal_1
	add = var:sell_coal_in_gold_1
	add = var:sell_coal_1
	add = var:buy_iron_in_gold_1
	add = var:buy_iron_1
	add = var:sell_iron_in_gold_1
	add = var:sell_iron_1
	add = var:buy_sulfur_in_gold_1
	add = var:buy_sulfur_1
	add = var:sell_sulfur_in_gold_1
	add = var:sell_sulfur_1
	add = var:buy_lead_in_gold_1
	add = var:buy_lead_1
	add = var:sell_lead_in_gold_1
	add = var:sell_lead_1
	add = var:buy_oil_in_gold_1
	add = var:buy_oil_1
	add = var:sell_oil_in_gold_1
	add = var:sell_oil_1
	add = var:buy_dye_in_gold_1
	add = var:buy_dye_1
	add = var:sell_dye_in_gold_1
	add = var:sell_dye_1
	add = var:buy_silk_in_gold_1
	add = var:buy_silk_1
	add = var:sell_silk_in_gold_1
	add = var:sell_silk_1
	add = var:buy_rubber_in_gold_1
	add = var:buy_rubber_1
	add = var:sell_rubber_in_gold_1
	add = var:sell_rubber_1
	add = var:buy_ammunition_in_gold_1
	add = var:buy_ammunition_1
	add = var:sell_ammunition_in_gold_1
	add = var:sell_ammunition_1
	add = var:buy_small_arms_in_gold_1
	add = var:buy_small_arms_1
	add = var:sell_small_arms_in_gold_1
	add = var:sell_small_arms_1
	add = var:buy_artillery_in_gold_1
	add = var:buy_artillery_1
	add = var:sell_artillery_in_gold_1
	add = var:sell_artillery_1
	add = var:buy_tanks_in_gold_1
	add = var:buy_tanks_1
	add = var:sell_tanks_in_gold_1
	add = var:sell_tanks_1
	add = var:buy_aeroplanes_in_gold_1
	add = var:buy_aeroplanes_1
	add = var:sell_aeroplanes_in_gold_1
	add = var:sell_aeroplanes_1
	add = var:buy_manowars_in_gold_1
	add = var:buy_manowars_1
	add = var:sell_manowars_in_gold_1
	add = var:sell_manowars_1
	add = var:buy_ironclads_in_gold_1
	add = var:buy_ironclads_1
	add = var:sell_ironclads_in_gold_1
	add = var:sell_ironclads_1
}


########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################


# 

########################################################################################################################################
########################################################################################################################################
########################################################################################################################################
########################################################################################################################################

#grain
ef_ai_set_grain_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_grain_reserve
}
#wood
ef_ai_set_wood_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_wood_reserve
}
#coal
ef_ai_set_coal_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_coal_reserve
}
#iron
ef_ai_set_iron_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_iron_reserve
}
#sulfur
ef_ai_set_sulfur_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_sulfur_reserve
}
#lead
ef_ai_set_lead_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_lead_reserve
}
#oil
ef_ai_set_oil_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_oil_reserve
}
#dye
ef_ai_set_dye_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_dye_reserve
}
#silk
ef_ai_set_silk_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_silk_reserve
}
#rubber
ef_ai_set_rubber_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_rubber_reserve
}
#ammunition
ef_ai_set_ammunition_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_ammunition_reserve
}
#small_arms
ef_ai_set_small_arms_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_small_arms_reserve
}
#artillery
ef_ai_set_artillery_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_artillery_reserve
}
#tanks
ef_ai_set_tanks_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_tanks_reserve
}
#aeroplanes
ef_ai_set_aeroplanes_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_aeroplanes_reserve
}
#manowars
ef_ai_set_manowars_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_manowars_reserve
}
#ironclads
ef_ai_set_ironclads_reserve_sc = {
	value = 1000000
	multiply = var:ef_ai_set_ironclads_reserve
}

#############

#grain
sell_grain_on_international_market_1_sc = {
	value = stockpiling_grain_var_state
	subtract = ef_ai_set_grain_reserve_sc
}
#wood
sell_wood_on_international_market_1_sc = {
	value = stockpiling_wood_var_state
	subtract = ef_ai_set_wood_reserve_sc
}
#coal
sell_coal_on_international_market_1_sc = {
	value = stockpiling_coal_var_state
	subtract = ef_ai_set_coal_reserve_sc
}
#iron
sell_iron_on_international_market_1_sc = {
	value = stockpiling_iron_var_state
	subtract = ef_ai_set_iron_reserve_sc
}
#sulfur
sell_sulfur_on_international_market_1_sc = {
	value = stockpiling_sulfur_var_state
	subtract = ef_ai_set_sulfur_reserve_sc
}
#lead
sell_lead_on_international_market_1_sc = {
	value = stockpiling_lead_var_state
	subtract = ef_ai_set_lead_reserve_sc
}
#oil
sell_oil_on_international_market_1_sc = {
	value = stockpiling_oil_var_state
	subtract = ef_ai_set_oil_reserve_sc
}
#dye
sell_dye_on_international_market_1_sc = {
	value = stockpiling_dye_var_state
	subtract = ef_ai_set_dye_reserve_sc
}
#silk
sell_silk_on_international_market_1_sc = {
	value = stockpiling_silk_var_state
	subtract = ef_ai_set_silk_reserve_sc
}
#rubber
sell_rubber_on_international_market_1_sc = {
	value = stockpiling_rubber_var_state
	subtract = ef_ai_set_rubber_reserve_sc
}
#ammunition
sell_ammunition_on_international_market_1_sc = {
	value = stockpiling_ammunition_var_state
	subtract = ef_ai_set_ammunition_reserve_sc
}
#small_arms
sell_small_arms_on_international_market_1_sc = {
	value = stockpiling_small_arms_var_state
	subtract = ef_ai_set_small_arms_reserve_sc
}
#artillery
sell_artillery_on_international_market_1_sc = {
	value = stockpiling_artillery_var_state
	subtract = ef_ai_set_artillery_reserve_sc
}
#tanks
sell_tanks_on_international_market_1_sc = {
	value = stockpiling_tanks_var_state
	subtract = ef_ai_set_tanks_reserve_sc
}
#aeroplanes
sell_aeroplanes_on_international_market_1_sc = {
	value = stockpiling_aeroplanes_var_state
	subtract = ef_ai_set_aeroplanes_reserve_sc
}
#manowars
sell_manowars_on_international_market_1_sc = {
	value = stockpiling_manowars_var_state
	subtract = ef_ai_set_manowars_reserve_sc
}
#ironclads
sell_ironclads_on_international_market_1_sc = {
	value = stockpiling_ironclads_var_state
	subtract = ef_ai_set_ironclads_reserve_sc
}
