# COPY-PASTED FOR NOW
@panel_width_minus_20 = 520			# used to be 440
@panel_width_minus_20_half = 260	# used to be 220
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types goods_state_panel_types
{
	type goods_state_panel = default_block_window_two_lines {
		name = "goods_state_panel"
		
		blockoverride "window_header_name"
		{
			raw_text = "#BOLD [GoodsStatePanel.GetGoods.GetName]#!"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "GOODS_STATE_PANEL_LINE_TWO"
		}
		blockoverride "goto_button" {
			button_icon_goto = {
				datacontext = "[GoodsStatePanel.AccessGoods.AccessMarket]"
				size = { 30 30 }
				onclick = "[InformationPanelBar.OpenMarketPanel(GoodsStatePanel.AccessGoods.AccessMarket)]"
				tooltip = "GO_TO_BUTTON_MARKET"
			}
		}
		
		blockoverride "fixed_top"
		{
			tab_buttons = {
				
				# OBS! these 3 tabs are copied to goods_panel.gui / goods_usage_panel.gui / goods_state_panel.gui
				# consider merging these panels into the same panel

				# market
				blockoverride "first_button" {
					text = "[GoodsStatePanel.GetGoods.GetMarket.GetNameNoFormatting]"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "[GoodsStatePanel.GetGoods.GetMarket.GetNameNoFormatting]"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsPanel(GoodsStatePanel.GetGoods.GetMarket, GoodsStatePanel.GetGoods.Self)]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = yes
				}

				# usage / application
				blockoverride "second_button" {
					text = USAGE
				}
				blockoverride "second_button_tooltip" {
					tooltip = "USAGE"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanelBar.OpenGoodsUsagePanel(GoodsStatePanel.GetGoods)]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = yes
				}
				
				# states (SELECTED)
				blockoverride "third_button_selected" {
					text = "[GoodsStatePanel.GetGoods.GetState.GetNameNoFormatting]"
				}
				blockoverride "third_button_selected_tooltip" {}
				blockoverride "third_button_visibility" {
					visible = yes
				}
			}
		}

		blockoverride "scrollarea_content"
		{
			container = {
				parentanchor = hcenter
				
				flowcontainer = {
					margin_top = 10
					minimumsize = { @panel_width -1 }
					using = default_list_position
					direction = vertical
					datacontext = "[GoodsStatePanel.AccessGoods]"

					container = {
						parentanchor = hcenter
						minimumsize = { @panel_width -1 }
						
						good_icon_and_prize = {
							blockoverride "compare" {
								text = "[Goods.GetShortCompareDescAgainstBasePrice( Goods.GetStatePrice )]"
								tooltip = "GOODS_STATE_PRICE_AGAINST_BASE_PRICE_TOOLTIP"
							}
							blockoverride "prize" {
								text = "GOODS_STATE_PANEL_PRICE_RIGHT_NOW"
								tooltip = "[Goods.GetStatePriceDesc]"
							}
						}
					}

					flowcontainer = {
						margin_top = 10
						using = default_list_position
						
						### SUPPLIED BY LIST
						flowcontainer = {
							direction = vertical
							minimumsize = { @panel_width_minus_20_half 1 }
							
							default_header = {
								blockoverride "size"
								{
									size = { @panel_width_plus_14_half 38 }
								}
								blockoverride "text"
								{
									text = "PRODUCED_BY"
								}
							}
							
							flowcontainer = {
								margin_top = 10
								margin_bottom = 10
								alpha = "[TransparentIfZero(GoodsStatePanel.AccessInputValuesTotal)]"
								datacontext = "[GoodsStatePanel.AccessGoods.AccessState]"
								tooltip = "GOODS_STATE_PRODUCTION_BREAKDOWN"
								
								textbox = {
									text = "PRODUCTION"
									autoresize = yes
									align = left|nobaseline
									minimumsize = { 160 -1 }
									maximumsize = { 160 -1 }
									margin_left = 10
									parentanchor = left|vcenter
									default_format = "#title"
									using = fontsize_large
								}
								textbox = {
									text = "[GoodsStatePanel.AccessInputValuesTotal|D]"
									autoresize = yes
									align = right|nobaseline
									minimumsize = { 110 -1 }
									maximumsize = { 110 -1 }
									using = fontsize_large
									margin_right = 10
									default_format = "#variable"
								}
							}
							
							divider_clean = {}

							fixedgridbox = {
								minimumsize = { @panel_width_minus_20_half 1 }
								datamodel = "[GoodsStatePanel.AccessInputValues]"
								addcolumn = 270
								addrow = 52
								
								item = {
									widget = {
										size = { @panel_width_half 50 }

										tooltip = "[GoodsPanelValue.GetTooltip]"

										textbox = {
											position = { 10 5 }
											raw_text = "#bold [GoodsPanelValue.GetName]#!"
											autoresize = yes
											align = left|vcenter
											maximumsize = { 200 -1 }
											elide = right
										}
										
										textbox = {
											text = "[GoodsPanelValue.GetValue|D]"
											autoresize = yes
											align = left|vcenter
											maximumsize = { 200 -1 }
											elide = right
											parentanchor = right|vcenter
											margin_right = 5
											margin_bottom = 10
										}
										
										divider_clean = {
											parentanchor = bottom|hcenter
										}
									}
								}
							}
						}
						
						vertical_divider_full = {}
						
						### DEMANDED BY LIST
						flowcontainer = {
							direction = vertical
							minimumsize = { @panel_width_minus_20_half 1 }
							
							default_header = {
								blockoverride "size"
								{
									size = { @panel_width_plus_14_half 38 }
								}
								blockoverride "text"
								{
									text = "CONSUMED_BY"
								}
							}
							
							flowcontainer = {
								margin_top = 10
								margin_bottom = 10 
								alpha = "[TransparentIfZero(GoodsStatePanel.AccessOutputValuesTotal)]"
								datacontext = "[GoodsStatePanel.AccessGoods.AccessState]"
								tooltip = "GOODS_STATE_CONSUMPTION_BREAKDOWN"
								
								textbox = {
									text = "CONSUMPTION"
									autoresize = yes
									align = left|nobaseline
									minimumsize = { 160 -1 }
									maximumsize = { 160 -1 }
									margin_left = 10
									parentanchor = left|vcenter
									default_format = "#title"
									using = fontsize_large
								}
								textbox = {
									text = "[GoodsStatePanel.AccessOutputValuesTotal|D]"
									autoresize = yes
									align = right|nobaseline
									minimumsize = { 110 -1 }
									maximumsize = { 110 -1 }
									using = fontsize_large
									margin_right = 10
									default_format = "#variable"
								}
							}
							
							divider_clean = {}

							fixedgridbox = {
								minimumsize = { @panel_width_minus_20_half 1 }
								datamodel = "[GoodsStatePanel.AccessOutputValues]"
								addcolumn = 270
								addrow = 52
								
								item = {
									widget = {
										size = { @panel_width_half 50 }

										tooltip = "[GoodsPanelValue.GetTooltip]"

										textbox = {
											position = { 10 5 }
											raw_text = "#bold [GoodsPanelValue.GetName]#!"
											autoresize = yes
											align = left|vcenter
											maximumsize = { 200 -1 }
											elide = right
										}

										textbox = {
											text = "[GoodsPanelValue.GetValue|D]"
											autoresize = yes
											align = left|vcenter
											maximumsize = { 200 -1 }
											elide = right
											parentanchor = right|vcenter
											margin_right = 5
											margin_bottom = 10
										}
										
										divider_clean = {
											parentanchor = bottom|hcenter
										}
									}
								}
							}
						}
					}

					widget = { size = { 1 20 }}

					### LOCAL PRICES
				 	section_header_button = {
				 		datacontext = "[GoodsStatePanel.GetGoods.GetState]"
						size = { @panel_width_minus_10 38 }
						
						blockoverride "left_text" {
							text = "LOCAL_PRICE_IN_STATE"
						}
						
						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Toggle('local_prices_state')]"
						}
						
						blockoverride "onclick_showmore" {
							visible = "[Not(GetVariableSystem.Exists('local_prices_state'))]"
						}

						blockoverride "onclick_showless" {
							visible = "[GetVariableSystem.Exists('local_prices_state')]"
						}
					}

					flowcontainer = {
						datamodel = "[GoodsStatePanel.AccessGoods.AccessMarket.AccessMarketStates]"
						direction = vertical 
						visible = "[GetVariableSystem.Exists('local_prices_state')]"
						using = default_list_position

						item = {
							button = {
								datacontext = "[GoodsStatePanel.GetGoods.WithStateContext( State.Self )]"
								visible = "[State.GetMarket.IsSame(GoodsStatePanel.AccessGoods.AccessMarket.Self)]"
								size = { @panel_width 40 }
								using = clean_button
								onclick = "[InformationPanelBar.OpenGoodsStatePanel(State.Self, Goods.Self)]"
								tooltip = "[Goods.GetStatePriceDesc]"
								
								textbox = {
									text = "[State.GetName]"
									autoresize = yes
									align = nobaseline
									parentanchor = vcenter
									margin_left = 10
								}

								textbox = {
									raw_text = "#variable [GetMetaPlayer.GetPlayedOrObservedCountry.GetCustom('currencytexture')][Goods.GetStatePrice|1]#! [Goods.GetCompareIconAgainstBasePrice( Goods.GetStatePrice )]"
									autoresize = yes
									align = nobaseline
									parentanchor = vcenter|right
									margin_right = 10
								}
							}
						}
					}
				}
				
				not_yet_initialized = {
					visible = "[EqualTo_CFixedPoint(GoodsStatePanel.GetGoods.GetStatePrice, '(CFixedPoint)0')]"
				}
			}
		}
	}
}
