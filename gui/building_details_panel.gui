# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

@building_process_item_width = 200


template visible_if_produces {
	#buildings that produce goods, provide modifiers, or are military buildings "make" something, so show arrows etc
	visible = "[Or( Building.IsMilitaryBuilding, Or( Not(IsDataModelEmpty(Building.GetProducedModifiers.GetEntries)), Not(IsDataModelEmpty(Building.AccessProducedGoods)) ))]"  
}

types building_panels
{
	type building_details_panel = default_block_window_two_lines {
		name = "building_details_panel"
		datacontext = "[BuildingDetailsPanel.AccessBuilding]"

		blockoverride "window_header_name"
		{
			text = "[Building.GetName]"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "BUILDING_DETAILS_LINE_TWO"
		}

		blockoverride "goto_button" {
			button_icon_goto = {
				datacontext = "[Building.GetState]"
				size = { 30 30 }
				onclick = "[InformationPanelBar.OpenStatePanel(Building.AccessState)]"
				tooltip = "GO_TO_BUTTON_STATE"
				input_action = "go_to_details"
			}
		}

		blockoverride "fixed_top"
		{
			tab_buttons = {
				# Overview
				blockoverride "first_button" {
					text = "BUILDING_DETAILS_PANEL_INFORMATION_TAB"
				}
				blockoverride "first_button_tooltip" {
					tooltip = "BUILDING_DETAILS_PANEL_INFORMATION_TAB"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected" {
					text = "BUILDING_DETAILS_PANEL_INFORMATION_TAB_SELECTED"
				}
				blockoverride "first_button_name" {
					name = "tutorial_highlight_information_tab"
				}

				# Workforce
				blockoverride "second_button" {
					text = "WORKFORCE"
				}
				blockoverride "second_button_tooltip" {
					tooltip = "WORKFORCE"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('workforce')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('workforce')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('workforce') )]"
				}
				blockoverride "second_button_selected" {
					text = "WORKFORCE"
				}
				blockoverride "second_button_name" {
					name = "tutorial_highlight_workforce_tab"
				}

				# Modifiers
				blockoverride "third_button" {
					text = "BUILDING_DETAILS_PANEL_MODIFIERS_TAB"
				}
				blockoverride "third_button_tooltip" {
					tooltip = "BUILDING_DETAILS_PANEL_MODIFIERS_TAB"
				}
				blockoverride "third_button_click" {
					onclick = "[InformationPanel.SelectTab('modifiers')]"
				}
				blockoverride "third_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('modifiers')]"
				}
				blockoverride "third_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('modifiers') )]"
				}
				blockoverride "third_button_selected" {
					text = "BUILDING_DETAILS_PANEL_MODIFIERS_TAB_SELECTED"
				}
			}
		}

		blockoverride "scrollarea_content"
		{
			container = {
				parentanchor = hcenter

				building_details_panel_overview_content = {
					visible = "[InformationPanel.IsTabSelected('default')]"
					using = default_content_fade
				}

				building_details_panel_workforce_content = {
					visible = "[InformationPanel.IsTabSelected('workforce')]"
					using = default_content_fade
				}

				modifier_list = {
					visible = "[InformationPanel.IsTabSelected('modifiers')]"
					using = default_content_fade
				}
			}
		}
		
		blockoverride "pin_visibility" {
			visible = "[ObjectsEqual(Building.GetState.GetOwner, GetPlayer.Self)]"
		}

		blockoverride "pin_properties" {
			visible = "[BuildingDetailsPanel.AccessBuilding.IsPinnedInOutliner]"
			onclick = "[BuildingDetailsPanel.AccessBuilding.TogglePinInOutliner]"
			datacontext = "[BuildingDetailsPanel.AccessBuilding]"
			tooltip = "UNPIN_BUILDING"
		}

		blockoverride "unpin_properties" {
			visible = "[Not(BuildingDetailsPanel.AccessBuilding.IsPinnedInOutliner)]"
			onclick = "[BuildingDetailsPanel.AccessBuilding.TogglePinInOutliner]"
			datacontext = "[BuildingDetailsPanel.AccessBuilding]"
			tooltip = "PIN_BUILDING"
		}

		blockoverride "goto_visibility" {
			visible = yes
		}

		blockoverride "goto_properties" {
			onclick = "[Building.AccessState.ZoomToCapital]"
			tooltip = "ZOOM_TO_BUILDING_STATE"
			enabled = "[Not( Building.AccessState.IsZoomingToCapital )]"
		}
	}

	type building_details_panel_overview_content = flowcontainer {
		direction = vertical
		using = default_list_position
		margin_top = 5
		margin_bottom = 10

		top_illu = {
			blockoverride "illu" {
				texture = "[Building.GetBuildingType.GetBackground]"
				fittype = start
				alpha = 0.7
			}
			minimumsize = { @panel_width_plus_14 -1 }
	
			flowcontainer = {
				resizeparent = yes
				parentanchor = hcenter
				margin_top = 15
				margin_bottom = 15
				minimumsize = { 540 147 }

				### BUILDING ICON
				button = {
					tooltipwidget = {
						FancyTooltip_Building = {}
					}
					onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
					size = { 115 115 }

					icon = {
						alpha = "[TransparentIfFalse(Building.IsActive)]"
						texture = "[Building.GetTexture]"
						size = { 100% 100% }

						icon = {
							visible = "[Building.IsAutoDownsizing]"
							tooltip = "[Building.GetAutoDownsizeTooltip]"
							position = { 5 5 }
							size = { 30 30 }
							texture = "gfx/interface/production_methods/auto_downsize.dds"
						}
					}

					icon = {
						visible = "[And( GreaterThan_int32( Building.GetExpansionLevel, '(int32)0'), Not( Building.IsActive ))]"
						size = { 100% 100% }
						texture = "gfx/interface/icons/generic_icons/inactive_building.dds"
					}
				}

				### PRODUCTIVITY
				flowcontainer = {
					direction = vertical
					visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsistenceBuilding))]"
					maximumsize = { 425 -1 }
					minimumsize = { 425 -1 }
					margin = { 10 3 }
					spacing = 12

					flowcontainer = {
						spacing = 10

						flowcontainer = {
							visible = "[Not(Building.GetBuildingType.IsUnique)]"
							name = "tutorial_highlight_productivity_gear_icons"
							parentanchor = vcenter
							margin_left = 4
							direction = vertical
							
							building_rank_label = {}

							textbox = {
								using = building_world_profitability_tooltip_with_graph
								text = "BUILDING_RANK_WORLD"
								align = left|nobaseline
								autoresize = yes
								minimumsize = { 230 -1 }
								maximumsize = { 230 -1 }
								elide = right
							}

							building_average_wage_label = {
								margin_top = 10
							}
						}

						building_productivity_mini_chart = {}
					}
				}

				flowcontainer = {
					direction = vertical
					margin_left = 10
					parentanchor = vcenter	
					
					military_building_combat_unit_summary = {
						margin_bottom = 10
						blockoverride "icon_size" {
							size = { 76 76 }
						}

						blockoverride "overlappingitembox_size" {
							size = { 410 76 }
						}

						blockoverride "unit_number_margins" {
							margin = { 6 3 }
						}
					}				

					### battalions mobilized
					container = {
						visible = "[Building.GetHQ.IsLandHQ]"
						minimumsize = { 410 29 }

						textbox = {
							tooltip = "BUILDING_MOBILIZED_BATTALIONS_TOOLTIP"
							raw_text = "@mobilization! @battalions! #v [Building.GetNumberOfFullyMobilizedBattalions]#! / [Building.GetNumberOfCombatUnits] (#v [Building.GetMobilizationRatio|%0]#!)"
							align = nobaseline
							autoresize = yes
							using = fontsize_large
							minimumsize = { -1 29 }
						}
					}

					# Government Administration
					textbox = {
						autoresize = yes
						datacontext = "[Building.GetState]"
						text = "STATE_TAX_CAPACITY_BUILDING"
						tooltip = "STATE_TAX_CAPACITY_DESC"
						visible = "[ObjectsEqual(Building.GetBuildingType, GetBuildingType('building_government_administration').Self)]"
					}

					textbox = {
						text = "BUILDING_AVERAGE_WAGE"
						tooltip = TOOLTIP_BUILDING_AVERAGE_WAGE
						visible = "[And(Building.IsActive, ObjectsEqual(Building.GetBuildingType, GetBuildingType('building_government_administration').Self))]"
						
						align = left|nobaseline
						autoresize = yes
						elide = right
						maximumsize = { 230 -1 }
						minimumsize = { 230 -1 }
						margin_top = 10
					}			
				}
			}
		}

		flowcontainer = {
			visible = "[Building.IsBuildingType('building_trade_center')]"
			margin_top = 5
			margin_bottom = 5
			parentanchor = hcenter
			
			button = {
				using = default_button
				onclick = "[InformationPanelBar.OpenMarketPanel(Building.AccessState.AccessMarket)]"

				textbox = {
					resizeparent = yes
					text = "[Building.GetState.GetMarket.GetName]"
					align = center|nobaseline
					autoresize = yes
					maximumsize = { @panel_width -1 }
					minimumsize = { @panel_width -1 }
					margin = { 10 10 }
					multiline = yes
					parentanchor = center
				}
			}
		}

		widget = { size = { 5 5 } }
		divider_decorative = {}
		widget = { size = { 5 5 } }

		condensed_building_information = {
			margin = { 7 0 }
			margin_top = 0
			
			blockoverride "state_name_button" {}

			blockoverride "productivity" {}

			blockoverride "animated_building_controls" {}
			blockoverride "animated_building_controls_trigger" {}

			blockoverride "background" {}

			blockoverride "divider" {
				widget = { size = { 5 5 }}
				divider_clean = {
					size = { 535 2 }
				}
			}
		}

		### BUILDING ASSETS
		flowcontainer = {
			visible = "[Not(IsDataModelEmpty(Building.GetBuildingAssets))]"
			using = default_list_position
			direction = vertical
			minimumsize = { @panel_width -1 }

			default_header_2texts = {
				blockoverride "text1" {
					text = "BUILDINGS_OWNED"
				}
			}

			flowcontainer = {
				margin_top = 5
				margin_bottom = 5
				parentanchor = hcenter

				property_portfolio_stacked_bar_chart = {}
			}

			# Sorting
			flowcontainer = {
				parentanchor = hcenter
				sort_button = {
					size = { 280 30 }
					text = "BUILDING"
					align = left|nobaseline
					onclick = "[Building.SortBuildings('name')]"
				}
				
				sort_button = {
					size = { 120 30 }
					text = "OWNED"
					align = left|nobaseline
					onclick = "[Building.SortBuildings('level')]"
				}
				
				sort_button = {
					size = { 70 30 }
					tooltip = "BUILDING_PROFITABILITY_HEADER_TOOLTIP"
					icon = {
						texture = "gfx/interface/buttons/sort_button_icons/sort_icon_profitability.dds"
						size = { 25 25 }
						parentanchor = center
					}
					align = left|nobaseline
					onclick = "[Building.SortBuildings('earnings_per_employee')]"
				}

				sort_button = {
					size = { 70 30 }
					text = "DIVIDENDS"
					align = left|nobaseline
					onclick = "[Building.SortBuildings('dividend')]"
				}
			}

			# Assets
			flowcontainer = {
				datamodel = "[Building.GetBuildingAssets]"
				parentanchor = hcenter
				spacing = 3
				direction = vertical
				margin_top = 3
				margin_bottom = 10
				
				item = {
					container = {
						background = {
							using = fade_right_entry_header_colored
							color = "[BuildingOwnership.GetOwnedBuilding.GetState.GetOwner.GetMapColor]"
							margin_top = 4
							margin_left = 5
						}

						flowcontainer = {
							tooltip = "PROPERTY_SHARE_CHART_TOOLTIP"
							margin_bottom = 4
							icon = {
								size = { 30 30 }
								texture = "[BuildingOwnership.GetOwnedBuilding.GetTexture]"
							}
							flowcontainer = {
								spacing = 5
								minimumsize = { 250 30 }
								textbox = {
									maximumsize = { 220 30 }
									text = "PROPERTY_SHARE_ENTRY_LABEL"
									align = nobaseline
									fontsize_min = 12
									elide = right
									margin_left = 5
									autoresize = yes
									parentanchor = vcenter
								}
								button_icon_goto = {
									size = { 25 25 }
									onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(BuildingOwnership.GetOwnedBuilding.AccessSelf)]"
									visible = "[Building.IsValid]"
									tooltip = "GO_TO_BUTTON_BUILDING"
									parentanchor = vcenter
								}
							}
							
							textbox = {
								size = { 120 30 }
								text = "[BuildingOwnership.GetLevel|v]"
								align = right|nobaseline
								margin_right = 5
								fontsize_min = 12
								elide = right
							}
							
							textbox = {
								datacontext = "[BuildingOwnership.GetOwnedBuilding]"
								size = { 70 30 }
								raw_text = "[GetPlayer.GetCustom('currency_symbol')][Building.GetAverageAnnualEarningsPerEmployeeFormatted|+]"
								align = left|nobaseline
								margin_left = 5
								using = productivity_tooltip_with_graph
							}

							textbox = {
								size = { 70 30 }
								raw_text = "[GetPlayer.GetCustom('currency_symbol')][BuildingOwnership.GetDividendToOwner|D]"
								tooltip = "BUILDING_OWNERSHIP_DIVIDENDS_TOOLTIP"
								align = left|nobaseline
								default_format = "#v"
							}
						}
						divider_clean = {
							parentanchor = bottom|hcenter
							size = { 100% 1 }
						}
					}
				}
			}
		}

		flowcontainer = {
			visible = "[Building.HasTradeRouteRevenue]"
			using = default_list_position
			direction = vertical
			minimumsize = { @panel_width -1 }

			default_header_2texts = {
				blockoverride "text1" {
					text = "TRADE_ROUTES"
				}
			}

			dynamicgridbox = {
				datamodel = "[Building.AccessPlayerTradeRoutes]"
				parentanchor = hcenter
				
				item = {
					trade_route_list_item = {
						datacontext = "[Building.GetState.GetOwner]"
						datacontext = "[Building.GetState.GetMarket]"
					}
				}
			}
			dynamicgridbox = {
				datamodel = "[Building.AccessNonPlayerTradeRoutes]"
				parentanchor = hcenter
				
				item = {
					trade_route_list_item = {
						datacontext = "[Building.GetState.GetOwner]"
						datacontext = "[Building.GetState.GetMarket]"						
					}
				}
			}
		}

		### PROCESS
		flowcontainer = {
			using = default_list_position
			direction = vertical
			minimumsize = { @panel_width -1 }

			default_header_2texts = {
				blockoverride "text1" {
					text = "PROCESS"
				}
				blockoverride "right" {
					flowcontainer = {
						parentanchor = right|vcenter
						margin_right = 15
						spacing = 5

						textbox = {
							visible = "[Not(Building.IsGovernmentFunded)]"
							text = "PROCESS_BALANCE"
							autoresize = yes
							multiline = yes
							maximumsize = { 250 -1 }
							parentanchor = vcenter
							align = left|nobaseline
						}

						textbox = {
							visible = "[Not(Building.IsGovernmentFunded)]"
							name = "tutorial_highlight_weekly_balance_building"
							raw_text = "[GetPlayer.GetCustom('currency_symbol')]#v [Building.GetBalance|D+=]#!"
							tooltip = "[Building.GetBalanceDesc]"
							autoresize = yes
							multiline = yes
							maximumsize = { 250 -1 }
							parentanchor = vcenter
							align = left|nobaseline
							using = fontsize_large
						}
						textbox = {
							visible = "[Building.IsGovernmentFunded]"
							text = "GOVERNMENTAL_EXPENSES"
							autoresize = yes
							multiline = yes
							parentanchor = vcenter
							align = left|nobaseline
						}
					}
				}
			}

			widget = { size = { 10 10 }}

			### list
			container = {
				minimumsize = { @panel_width -1 }
				parentanchor = hcenter

				### left
				textbox = {
					parentanchor = vcenter
					margin_left = 20
					align =  nobaseline
					using = empty_state_text_properties
					visible = "[Not(Building.IsActive)]"
					text = "BUILDING_INACTIVE_CONSUMPTION_EMPTY_STATE"
					multiline = yes
					max_width = 250
					min_width = 250
					autoresize = yes
				}

				flowcontainer = {
					name = "tutorial_highlight_expenses"
					direction = vertical
					spacing = 5
					parentanchor = left|vcenter
					minimumsize = { 250 -1 }
					ignoreinvisible = yes
					visible = "[Building.IsActive]"

					### goods
					flowcontainer = {
						parentanchor = hcenter
						direction = vertical
						datamodel = "[Building.AccessConsumedGoods]"

						item = {
							widget = {
								size = { 250 44 }
								name = "tutorial_highlight_goods"
								tooltipwidget = {
									FancyTooltip_Goods = {}
								}

								button = {
									size = { 100% 40 }
									parentanchor = vcenter
									using = default_button
									onclick = "[InformationPanelBar.OpenGoodsStatePanel(Building.GetState, Goods.Self)]"
									onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
								}


								icon = {
									size = { 50 50 }
									texture = "[Goods.GetTexture]"
									position = { 3 0 }
									parentanchor = left|vcenter
								}

								flowcontainer = {
									parentanchor = left|vcenter 
									spacing = 3
									margin_left = 50
									margin_top = 7

									icon = {
										size = { 25 25 }
										visible = "[And(Not(Building.HasMaximumInputShortage(Goods.Self)),Building.HasInputShortage(Goods.Self))]"
										texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
										tooltip = "GOODS_INPUT_SHORTAGE_TOOLTIP"
										parentanchor = left|vcenter
									}

									icon = {
										size = { 25 25 }
										visible = "[Building.HasMaximumInputShortage(Goods.Self)]"
										texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
										tooltip = "GOODS_INPUT_SHORTAGE_MAX_TOOLTIP"
										parentanchor = left|vcenter
									}

									textbox = {
										raw_text = "#bold [FixedPointToInt(Building.GetConsumption(Goods.Self))|D]#!"
										visible = "[Not(Building.HasInputShortage(Goods.Self))]"
										autoresize = yes
										parentanchor = left|vcenter
										widgetanchor = left|vcenter
										align = left|nobaseline
										tooltip = "TOOLTIP_BUILDING_USES_UNITS_INFO"
									}

									textbox = {
										raw_text = "#bold #n [FixedPointToInt(Building.GetConsumption(Goods.Self))|D]#!#!"
										visible = "[Building.HasInputShortage(Goods.Self)]"
										autoresize = yes
										parentanchor = left|vcenter
										widgetanchor = left|vcenter
										align = left|nobaseline
										tooltip = "TOOLTIP_BUILDING_USES_UNITS_INFO"
									}
								}

								textbox = {
									raw_text = "#BOLD [GetPlayer.GetCustom('currency_symbol')][FixedPointToInt(Building.GetConsumptionValue(Goods.Self))|1*]#! ([Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice )])"
									position = { -10 0 }
									autoresize = yes
									align = right|nobaseline
									parentanchor = right|vcenter
									widgetanchor = right|vcenter
									### This tooltip blocks going to the locked tooltip of the good, therefore it is commented out
									#tooltip = "TOOLTIP_BUILDING_USES_VALUE_INFO"
								}
							}
						}
					}

					### wages
					building_process_entry = {
						blockoverride "visible" {
							visible = "[GreaterThan_CFixedPoint(Building.GetLastWagesExpenses, '(CFixedPoint)0')]"
						}
						blockoverride "text" {
							text = "WAGES"
						}
						blockoverride "text_right" {
							raw_text = "#variable [GetPlayer.GetCustom('currency_symbol')][Building.GetLastWagesExpenses|K]#!"
							tooltip = "[Building.GetLastWagesExpensesDesc]"
						}
					}

					### slave upkeep
					building_process_entry = {
						blockoverride "visible" {
							visible = "[Or( Building.HasSlaves, GreaterThan_CFixedPoint(Building.GetLastSlaveUpkeep, '(CFixedPoint)0') )]"
						}
						blockoverride "text" {
							text = "SLAVE_UPKEEP"
							tooltip = "[Building.GetLastSlaveUpkeepDesc]"
						}
						blockoverride "text_right" {
							raw_text = "#variable [GetPlayer.GetCustom('currency_symbol')][Building.GetLastSlaveUpkeep|K]#!"
							tooltip = "[Building.GetLastSlaveUpkeepDesc]"
						}
					}

					### tariffs
					building_process_entry = {
						blockoverride "visible" {
							visible = "[GreaterThan_CFixedPoint(Building.GetTariffsPaid, '(CFixedPoint)0')]"
						}
						blockoverride "text" {
							text = "[concept_tariffs]"
						}
						blockoverride "text_right" {
							raw_text = "#variable [GetPlayer.GetCustom('currency_symbol')][Building.GetTariffsPaid|K]#!"
						}
					}

					### infrastructure
					building_process_entry = {
						tooltip = BUILDING_INFRA_USAGE_TOOLTIP
						
						blockoverride "visible" {
							visible = "[Building.UsesInfrastructure]"
						}
						blockoverride "text" {
							text = "[concept_infrastructure_usage]"
						}
						blockoverride "text_right" {
							raw_text = "#variable [Building.CalcInfrastructureUsage|=0]#!"
						}
					}
				}

				### center arrow
				icon = {
					size = { 30 30 }
					texture = "gfx/interface/icons/generic_icons/turns_into.dds"
					parentanchor = center
					alpha = "[TransparentIfFalse(Building.IsActive)]"

					using = visible_if_produces
				}

				### right
				flowcontainer = {
					name = "tutorial_highlight_revenues"
					direction = vertical
					spacing = 5
					minimumsize = { 250 -1 }
					parentanchor = right|vcenter
					ignoreinvisible = yes
					alpha = "[TransparentIfFalse(Building.IsActive)]"

					### goods
					flowcontainer = {
						parentanchor = hcenter
						direction = vertical
						datamodel = "[Building.AccessProducedGoods]"

						item = {
							widget = {
								size = { 250 44 }
								tooltipwidget = {
									FancyTooltip_Goods = {}
								}

								button = {
									size = { 100% 40 }
									parentanchor = vcenter
									using = default_button
									onclick = "[InformationPanelBar.OpenGoodsStatePanel(Building.GetState, Goods.Self)]"
									onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
								}

								icon = {
									size = { 50 50 }
									texture = "[Goods.GetTexture]"
									position = { 3 0 }
									parentanchor = left|vcenter
								}

								flowcontainer = {
									parentanchor = left|vcenter 
									spacing = 3
									margin_left = 50
									margin_top = 7

									icon = {
										size = { 25 25 }
										visible = "[And(Building.HasAnyInputShortage,GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
										texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
										tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
										parentanchor = left|vcenter 
									}

									icon = {
										size = { 25 25 }
										visible = "[And(Not(Building.HasAnyInputShortage),GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
										texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
										tooltip = "GOODS_OUTPUT_PENALTY_LINGERING_TOOLTIP"
										parentanchor = left|vcenter 
									}

									textbox = {
										raw_text = "#bold [FixedPointToInt(Building.GetProduction(Goods.Self))|D]#!"
										visible = "[Not(GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
										parentanchor = left|vcenter
										autoresize = yes
										align = left|nobaseline
										tooltip = "TOOLTIP_BUILDING_PRODUCES_UNITS_INFO"
									}

									textbox = {
										raw_text = "#bold #n [FixedPointToInt(Building.GetProduction(Goods.Self))|D]#!#!"
										visible = "[GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')]"
										parentanchor = left|vcenter
										autoresize = yes
										align = left|nobaseline
										tooltip = "TOOLTIP_BUILDING_PRODUCES_UNITS_INFO"
									}
								}

								textbox = {
									raw_text = "#BOLD [GetPlayer.GetCustom('currency_symbol')][FixedPointToInt(Building.GetProductionValue(Goods.Self))|*1]#! ([Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice ) ])"
									autoresize = yes
									align = right|nobaseline
									parentanchor = right|vcenter
									position = { -10 0 }
									### This tooltip blocks going to the locked tooltip of the good, therefore it is commented out
									#tooltip = "TOOLTIP_BUILDING_PRODUCES_VALUE_INFO"
								}
							}
						}
					}

					### military production
					building_process_entry = {
						blockoverride "visible" {
							visible = "[Building.IsMilitaryBuilding]"
						}
						blockoverride "text" {
							text = "[Building.GetCombatUnitProduction]"
							tooltip = "MILITARY_UNITS_PRODUCTION"
						}
					}

					### modifiers
					flowcontainer = {
						parentanchor = hcenter
						direction = vertical
						spacing = 5
						datamodel = "[Building.GetProducedModifiers.GetEntries]"
						visible = "[Not(IsDataModelEmpty(Building.GetProducedModifiers.GetEntries))]"
						item = {
							container = {
								maximumsize = { 250 -1 }
								minimumsize = { 250 39 }
								
								background = {
									using = entry_bg_simple
								}

								flowcontainer = {
									parentanchor = vcenter
									margin_left = 5
									icon = {
										size = { 25 25 }
										visible = "[And(Building.CanBeAffectedByInputShortage(ModifierEntry.Self),And(Building.HasAnyInputShortage,GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')))]"
										texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
										tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
										parentanchor = vcenter
									}

									icon = {
										size = { 25 25 }
										visible = "[And(Building.CanBeAffectedByInputShortage(ModifierEntry.Self),And(Not(Building.HasAnyInputShortage),GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')))]"
										texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
										tooltip = "GOODS_OUTPUT_PENALTY_LINGERING_TOOLTIP"
										parentanchor = vcenter
									}

									textbox = {
										text = "[ModifierEntry.GetName]"
										tooltip = "BUILDING_DETAILS_PRODUCED_MODIFIER_TOOLTIP"
										autoresize = yes
										multiline = yes
										align = left|nobaseline
										parentanchor = vcenter
										minimumsize = { 170 -1 }
										maximumsize = { 170 -1 }
										margin_left = 5
										margin_top = 5
										margin_bottom = 5
									}
								}

								textbox = {
									text = "[ModifierEntry.GetFormattedValue]"
									tooltip = "BUILDING_DETAILS_PRODUCED_MODIFIER_TOOLTIP"
									autoresize = yes
									multiline = yes
									align = right|nobaseline
									parentanchor = right|vcenter
									minimumsize = { 250 -1 }
									maximumsize = { 250 -1 }
									margin_right = 10
								}
							}
						}
					}

					### trade revenue
					building_process_entry = {
						blockoverride "visible" {
							visible = "[Building.HasTradeRouteRevenue]"
						}
						blockoverride "text" {
							text = "[concept_trade_revenue]"
						}
						blockoverride "text_right" {
							raw_text = "#variable [GetPlayer.GetCustom('currency_symbol')][Building.GetTradeRouteRevenue|K]#!"
						}
					}

					building_process_entry = {
						tooltip = BUILDING_URBANIZATION_TOOLTIP
						
						blockoverride "visible" {
							visible = "[Building.ProvidesUrbanization]"
						}
						
						blockoverride "text" {
							raw_text = "[concept_urbanization]"
						}
						blockoverride "text_right" {
							raw_text = "#variable [Building.CalcUrbanizationProvided|+=]#!"
						}
					}
				}
			}
		}

		widget = { size = { 10 20 }}

		flowcontainer = {
			name = "input_output_modifiers"
			direction = vertical

			using = visible_if_produces

			
			divider_clean = {
				visible = "[Or(Not( StringIsEmpty( Building.GetInputMultDesc )), Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) )))]"
			}

			widget = {
				size = { @panel_width 45 }
				parentanchor = hcenter
				visible = "[Or(Not( StringIsEmpty( Building.GetInputMultDesc )), Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) )))]"

				### consumption factor
				textbox = {
					margin_left = 10
					visible = "[Not( StringIsEmpty( Building.GetInputMultDesc ))]"
					text = "INPUT_MULT"
					tooltip = "INPUT_MULT_TOOLTIP"
					autoresize = yes
					default_format = "#title"
					using = fontsize_large
					parentanchor = vcenter
					align = nobaseline
				}

				### throughput
				textbox = {
					margin_right = 10
					visible = "[Not(And( StringIsEmpty(Building.GetThroughputDesc), EqualTo_CFixedPoint(Building.GetThroughputBonusCurrent, Building.GetThroughputBonusTarget) ))]"
					text = "THROUGHPUT"
					tooltip = "THROUGHPUT_TOOLTIP"
					autoresize = yes
					default_format = "#title"
					using = fontsize_large
					parentanchor = right|vcenter
					align = right|nobaseline
				}
			}

		}

		

		### FORMATIONS
		flowcontainer = {
			direction = vertical
			visible = "[Building.IsMilitaryBuilding]"
			margin_top = 5
			margin_bottom = 10
			parentanchor = hcenter
			name = formations_list
	
			default_header_2texts = {

				blockoverride "text1" {
					text = "FORMATIONS_PROVIDED_WITH_UNITS"
				}
			}

			flowcontainer = {
				direction = vertical
				parentanchor = hcenter

				flowcontainer = {
					sort_button = {
						size = { 250 30 }
						text = "concept_military_formation"
						align = left|nobaseline
					}
					sort_button = {
						size = { 70 30 }
						text = "concept_units_short"
						align = left|nobaseline
					}
					sort_button = {
						size = { 70 30 }
						text = "concept_supply"
						align = left|nobaseline
					}
					sort_button = {
						size = { 150 30 }
						text = "concept_mobilization_options"
						align = left|nobaseline
					}
				}
				flowcontainer = {
					direction = vertical
					datamodel = "[Building.GetMilitaryFormations]"

					item = {
						flowcontainer = {
							margin = { 5 5 }
							spacing = 10
							background = {
								using = entry_bg_simple
							}

							tooltipwidget = {
								FancyTooltip_MilitaryFormation = {}
							}

							icon = {
								size = { 40 40 }
								texture = "[MilitaryFormation.GetFlag]"
								color = "[MilitaryFormation.GetFlagColor]"
							}
							flowcontainer = {
								spacing = 10
								maximumsize = { 190 -1 }
								minimumsize = { 190 -1 }
								parentanchor = vcenter
								textbox = {
									autoresize = yes
									text = "[MilitaryFormation.GetNameNoFormatting]"
									parentanchor = vcenter
									align = nobaseline
									maximumsize = { 155 -1 }
									elide = right
									fontsize_min = 12
								}
								button_icon_goto = {
									parentanchor = vcenter
									size = { 25 25 }
										onclick = "[InformationPanelBar.OpenMilitaryFormationPanelTab( MilitaryFormation.AccessSelf, 'mobilization' )]"
									tooltip = "GO_TO_BUTTON_MILITARY_FORMATION"
									block "goto_visibility" {}
								}
							}
							textbox = {
								autoresize = yes
								maximumsize = { 60 -1 }
								minimumsize = { 60 -1 }
								text = "UNITS_PROVIDED_FROM_BUILDING"
								tooltip = "UNITS_PROVIDED_FROM_BUILDING_TOOLTIP"
								parentanchor = vcenter
								align = right|nobaseline
							}

							textbox = {
								autoresize = yes
								maximumsize = { 60 -1 }
								minimumsize = { 60 -1 }
								text = "[MilitaryFormation.GetSupply]"
								parentanchor = vcenter
								align = right|nobaseline
							}

							overlappingitembox = {
								size = { 140 25 }
								alpha = "[TransparentIfFalse(MilitaryFormation.IsMobilized)]"

								parentanchor = vcenter 

								datamodel = "[MilitaryFormation.GetMobilizationOptions]"

								item = {
									icon = {
										size = { 25 25 }
										texture = "[MobilizationOption.GetTexture]"
										visible = "[MobilizationOption.IsActivated(MilitaryFormation.AccessSelf)]"

										tooltipwidget = {
											FancyTooltip_MobilizationOption = {}
										}

									}
								}
							}
						}
					}
				}
			}

			flowcontainer = {
				margin_top = 10 
				direction = vertical
				parentanchor = hcenter

				combat_units_list = {
					visible = "[InDebugMode]"
					datacontext = "[Building.GetOwner]"
					datamodel = "[Building.GetCombatUnits]"

					blockoverride "combat_unit_goto_button" {}
					blockoverride "combat_unit_name_maximumsize" {
						maximumsize = { 205 -1 }
					}
				}
			}
		}


		### VACANCIES
		default_header_2texts = {
			blockoverride "text1" {
				text = "VACANCIES"
			}
		}
		empty_state = {
			blockoverride "visible" {
				visible = "[And(EqualTo_int64( Building.GetNoOfEmployed, Building.GetEmployeeCap ), Building.IsActive)]"
			}
			blockoverride "text" {
				text = "NO_VACANCIES"
			}
		}

		flowcontainer = {
			datacontext = "[Building.AccessPopsList]"
			datacontext = "[Building]"
			datamodel = "[PopList.AccessPopList]"
			direction = vertical
			using = default_list_position
			spacing = 10
			margin_bottom = 20
			margin_top = 10
			visible = "[And(NotEqualTo_int64( Building.GetNoOfEmployed, Building.GetEmployeeCap ), Building.IsActive)]"

			item = {
				flowcontainer = {
					tooltip = "[PopListItem.GetEmploymentDesc()]"
					spacing = 10
					visible = "[NotEqualTo_int64( Building.GetMaxPopSize(PopListItem.GetPopType), PopListItem.GetWorkingAdultsPopSize )]"

					default_progressbar_horizontal = {
						size = { @panel_width_minus_10 40 }
						visible = "[GreaterThan_int64(Building.GetMaxPopSize(PopListItem.GetPopType),'(int64)0')]"
						blockoverride "values" {
							min = 0
							max = "[IntToFloat(Building.GetMaxPopSize(PopListItem.GetPopType))]"
							value = "[IntToFloat(PopListItem.GetWorkingAdultsPopSize)]"
						}
						parentanchor = vcenter

						flowcontainer = {
							icon = {
								size = { 40 40 }
								texture = "[PopListItem.GetPopType.GetTexture]"
								parentanchor = vcenter
								tooltipwidget = {
									FancyTooltip_PopType = {
										datacontext = "[PopListItem.GetPopType]"
									}
								}
							}
							textbox = {
								raw_text = "#bold [PopListItem.GetWorkingAdultsPopSize|K]#! / #maximum [Building.GetMaxPopSize(PopListItem.GetPopType)|K]#!"
								autoresize = yes
								align = left|nobaseline
								parentanchor = vcenter
								margin_left = 10
							}
						}
					}
				}
			}
		}


		
		### DETAILED BUILDING OWNERSHIP
		flowcontainer = {
			using = visible_if_ownership_can_be_split

			using = default_list_position
			direction = vertical
			minimumsize = { @panel_width -1 }

			default_header_2texts = {
				blockoverride "text1" {
					text = "OWNERS"
				}
			}

			flowcontainer = {
				margin_top = 5
				margin_bottom = 5
				parentanchor = hcenter

				building_ownership_stacked_barchart = {}
			}

			flowcontainer = {
				parentanchor = hcenter
				sort_button = {
					size = { 320 30 }
					text = "OWNER"
					align = left|nobaseline
					#onclick = "TODO SORT" #TODO PRCAL-31240
				}
				
				sort_button = {
					size = { 120 30 }
					text = "OWNED"
					align = hcenter|nobaseline
					#onclick = "TODO SORT" #TODO PRCAL-31240
				}

				sort_button = {
					size = { 100 30 }
					text = "DIVIDENDS"
					align = hcenter|nobaseline
					#onclick = "TODO SORT" #TODO PRCAL-31240
				}	
			}

			flowcontainer = {
				datamodel = "[Building.GetBuildingOwnerships]"
				parentanchor = hcenter
				spacing = 3
				direction = vertical
				margin_top = 3
				margin_bottom = 10
				
				item = {
					container = {
						background = {
							using = fade_right_entry_header_colored
							color = "[BuildingOwnership.GetOwnershipTypeColor]"
							margin_top = 4
							margin_left = 5
						}

						using = building_ownership_share_tooltip
						flowcontainer = {
							margin_bottom = 4

							building_owner_icon = {}

							# Country ownership
							ownership_list_name = {
								visible = "[BuildingOwnership.IsCountryOwned]"
								blockoverride "oln_label" {
									text = "[BuildingOwnership.GetOwnerCountry.GetNameNoFlag]"
								}
								blockoverride "oln_button" {
									onclick = "[InformationPanelBar.OpenCountryPanel(BuildingOwnership.GetOwnerCountry.Self)]"
								}
							}

							# Private Ownership
							container = {
								visible = "[Not(BuildingOwnership.IsCountryOwned)]"

								# Workforce
								ownership_list_name = {
									visible = "[ObjectsEqual(Building.Self, BuildingOwnership.GetOwnerBuilding.Self)]"

									blockoverride "oln_label" {
										text = "BUILDING_OWNERSHIP_LABEL"
									}
									blockoverride "oln_button" {
										visible = no
									}
								}

								ownership_list_name = {
									visible = "[Not(ObjectsEqual(Building.Self, BuildingOwnership.GetOwnerBuilding.Self))]"

									blockoverride "oln_label"
									{
										text = "BUILDING_OWNERSHIP_LABEL"
									}
									blockoverride "oln_button" {
										onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(BuildingOwnership.GetOwnerBuilding.AccessSelf)]"
									}
								}
							}

							
							
							textbox = {
								size = { 120 30 }
								text = "[BuildingOwnership.GetLevel|v]"
								align = right|nobaseline
								margin_right = 5
								fontsize_min = 12
								elide = right
							}

							textbox = {
								size = { 100 30 }
								raw_text = "[GetPlayer.GetCustom('currency_symbol')][BuildingOwnership.GetDividendToOwner|D]"
								tooltip = "BUILDING_OWNERSHIP_DIVIDENDS_TOOLTIP"
								align = right|nobaseline
								default_format = "#v"
								margin_right = 5
							}
						}
						divider_clean = {
							parentanchor = bottom|hcenter
							size = { 100% 1 }
						}
					}
				}
			}
		}

		### PURE WORKFORCE OWNERSHIP EXPLANATION
		flowcontainer = {
			using = visible_if_ownership_always_workforce
			direction = vertical
			parentanchor = hcenter

			divider_clean = {}

			textbox = {
				using = default_list_position
				text = "LOCAL_WORKFORCE_OWNERSHIP_EXPLANATION"
				
				autoresize = yes
				multiline = yes
				maximumsize = { @panel_width -1 }
				minimumsize = { @panel_width -1 }
				margin_top = 10
				margin_bottom = 20
			}
		}

		

		divider_clean = {
			visible = "[Or(Building.IsSubsistenceBuilding, Building.IsUrbanCenter )]"
		}


		### SUBSISTENCE INFO
		textbox = {
			using = default_list_position
			text = "SUBSISTENCE_CONCEPT_CLEAN"
			visible = "[Building.IsSubsistenceBuilding]"
			autoresize = yes
			multiline = yes
			maximumsize = { @panel_width -1 }
			minimumsize = { @panel_width -1 }
			margin_top = 10
			margin_bottom = 20
		}

		### URBAN INFO
		textbox = {
			using = default_list_position
			text = "URBAN_CENTER_EXPLANATION"
			visible = "[Building.IsUrbanCenter]"
			autoresize = yes
			multiline = yes
			maximumsize = { @panel_width -1 }
			minimumsize = { @panel_width -1 }
			margin_top = 10
			margin_bottom = 20
		}

	}

	type ownership_list_name = flowcontainer {
		spacing = 5
		minimumsize = { 290 30 }

		textbox = {
			maximumsize = { 260 30 }
			block "oln_label" {
				raw_text = "todo"
			}
			
			align = nobaseline
			fontsize_min = 12
			elide = right
			margin_left = 5
			autoresize = yes
			parentanchor = vcenter
		}
		button_icon_goto = {
			size = { 25 25 }

			block "oln_button" {

			}
			
			tooltip = "GO_TO_BUTTON_BUILDING"
			parentanchor = vcenter
		}
	}

	type military_building_combat_unit_summary = flowcontainer {
		visible = "[Building.IsMilitaryBuilding]"
		margin_right = 10

		flowcontainer = {
			visible = "[LessThan_int32(GetDataModelSize(Building.GetCombatUnitTypes), '(int32)5')]"
			spacing = 2
			datamodel = "[Building.GetCombatUnitTypes]"

			item = {
				flowcontainer = {
					datamodel = "[DataModelFirst(Building.AccessState.AccessPopCultures, '(int32)1')]"
					
					item = {
						military_building_combat_unit_summary_list_item = {}
					}
				}
			}
		}

		overlappingitembox = {
			visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(Building.GetCombatUnitTypes), '(int32)5')]"
			spacing = 2
			datamodel = "[Building.GetCombatUnitTypes]"
			block "overlappingitembox_size" {
				size = { 440 75 }
			}

			item = {
				flowcontainer = {
					datamodel = "[DataModelFirst(Building.AccessState.AccessPopCultures, '(int32)1')]"
					
					item = {
						military_building_combat_unit_summary_list_item = {}
					}
				}
			}
		}
	}

	type military_building_combat_unit_summary_list_item = flowcontainer {
		direction = vertical
		icon = {
			modify_texture = {
				using = simple_frame_mask
			}
			icon = {
				using = simple_frame
				size = { 100% 100% }
			}
			block "icon_size" {
				size = { 75 75 }
			}
			texture = "[CombatUnitType.GetTextureForCulture(Culture.Self)]"

			tooltipwidget = {
				FancyTooltip_CombatUnitTypeWithCulture = {}
			}

			textbox = {
				parentanchor = left|bottom
				autoresize = yes
				raw_text = "#v [Building.GetNumUnitsOfCombatUnitType(CombatUnitType.Self)]#!"
				block "unit_number_margins" {
					margin = { 8 5 }
				}
				background = {
					using = blurry_dark_background
				}
			}
		}
	}

	type building_process_entry = widget {
		parentanchor = hcenter
		block "visible" {}

		background = {
			using = entry_bg_simple
		}

		textbox = {
			block "text" {
				raw_text = "INSERT_TEXT"
			}
			autoresize = yes
			multiline = yes
			resizeparent = yes
			maximumsize = { 250 -1 }
			minimumsize = { 250 -1 }
			align = left|nobaseline
			margin = { 10 8 }
		}

		textbox = {
			block "text_right" {}
			autoresize = yes
			multiline = yes
			maximumsize = { 250 -1 }
			minimumsize = { 250 -1 }
			align = right|nobaseline
			margin = { 10 8 }
		}
	}

	type building_process_entry_small = widget {
		parentanchor = hcenter
		block "visible" {}

		background = {
			using = entry_bg_simple
		}

		textbox = {
			block "text_right" {}
			autoresize = yes
			multiline = yes
			maximumsize = { @building_process_item_width -1 }
			minimumsize = { @building_process_item_width -1 }
			align = right|nobaseline
			margin = { 10 8 }
		}

		textbox = {
			block "text" {
				raw_text = "INSERT_TEXT"
			}
			autoresize = yes
			multiline = yes
			resizeparent = yes

			maximumsize = { @building_process_item_width -1 }
			minimumsize = { @building_process_item_width -1 }

			align = left|nobaseline
			margin = { 10 8 }
		}
	}

	type condensed_building_information = flowcontainer {
		direction = vertical
		parentanchor = hcenter
		datacontext = "[Building.AccessState]"

		block "animated_building_controls_trigger" {}

		alwaystransparent = no

		### EXPAND / SUBSIDIZE ETC
		widget = {
			size = { @panel_width 40 }

			block "background" {
				background = {
					using = entry_bg_simple
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 5


				vbox = {
					### DOWNSIZE / EXPAND
					building_level_controls = {
						blockoverride "controller_size" {
							size = { 130 35 }
						}
					}

					### BUILD PROGRESS
					hbox = {
						visible = "[Building.HasConstructionQueued]"

						default_progressbar_horizontal = {
							tooltip = "BUILDING_PROGRESS_TOOLTIP"
							size = { 110 5 }

							blockoverride "values" {
								value = "[Building.GetConstructionProgressPercentage]"
								min = 0
								max = 1
							}
						}
					}
				}

				### STATE NAME AND BUTTON
				block "state_name_button" {
					button = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						using = default_button
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
						tooltip = "GO_TO_BUTTON_BUILDING"
						using = tooltip_ne

						textbox = {
							size = { 100% 100% }
							margin = { 10 0 }
							align = nobaseline
							elide =  right
							fontsize_min = 14
							text = "[Building.GetState.GetNameNoFormatting]"
						}
					}
				}

				building_auto_expand_icon = {
					visible = "[Building.IsAutoExpanding]"
				}

				building_subsidized_icon = {
					visible = "[Building.IsSubsidized]"
				}

				building_privatize_icon = {
					visible = "[Building.CanBePrivatized]"
				}

				hbox = {
					layoutpolicy_horizontal = preferred
					layoutpolicy_vertical = expanding
					spacing = 10
					margin_right = 2

					expand = {}

					### STATE TRAITS
					hbox = {
						visible = "[Not(IsDataModelEmpty(State.AccessStateRegion.AccessTraits))]"
						datamodel = "[State.AccessStateRegion.AccessTraits]"

						item = {
							icon = {
								size = { 35 35 }
								tooltip = "TOOLTIP_STATE_TRAIT"
								using = tooltip_ne
								onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
								onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
								alwaystransparent = no
								texture = "[StateTrait.GetTexture]"
							}
						}
					}

					### TIMED MODIFIERS
					hbox = {
						visible = "[Not(IsDataModelEmpty(Building.GetTimedModifiers))]"
						margin = { 5 0 }
						datamodel = "[Building.GetTimedModifiers]"
						spacing = 5

						item = {
							icon = {
								tooltip = "[TimedModifier.GetTooltip]"
								texture = "[TimedModifier.GetIcon]"
								size = { 30 30 }
							}
						}
					}

					block "productivity" {
						textbox = {
							visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsistenceBuilding))]"
							using = productivity_tooltip_with_graph
							using = tooltip_ne
							raw_text = "[GetPlayer.GetCustom('currency_symbol')][Building.GetAverageAnnualEarningsPerEmployeeFormatted|+]"
							align = hcenter|nobaseline
							autoresize = yes
						}
					}

					button_icon_round = {
						size = { 36 36 }
						onclick = "[RightClickMenuManager.ToggleBuildingActions(Building.AccessSelf, PdxGuiWidget.AccessSelf)]"
						tooltip = "SHOW_BUILDING_ACTIONS"
						using = tooltip_ne

						blockoverride "icon" {
							texture = "gfx/interface/buttons/button_icons/menu.dds"
						}

						blockoverride "icon_size" {
							size = { 80% 80% }
						}
					}
				}
			}


		}

		block "divider" {}

		### PMS / EMPLOYMENT / CASH RESERVES
		container = {
			minimumsize = { @panel_width 80 }
			container = {
				parentanchor = vcenter

				flowcontainer = {
					parentanchor = vcenter
					margin_left = 2
					###################
					#mod
					###################
					visible = "[Not(Building.IsBuildingType('building_national_stockpile'))]"
					###################
					#end
					###################
					
					condensed_building_information_pms = {
						blockoverride "pms_slot_sizes" {
							addcolumn = 72
							addrow = 70
						}
						blockoverride "pms_minimumsize" {
							minimumsize = { 208 -1 }
						}
						blockoverride "pms_item_size" {
							size = { 70 70 }
						}
					}
				}

				block "extra_items_in_production_methods_list" {}
			}

			building_progressbars = {
				position = { -5 0 }
				parentanchor = right|vcenter

				blockoverride "progressbar_size" {
					size = { 230 26 }
				}
			}
		}
	}

	type building_nationalize_button = button_icon_round_action {
		visible = "[Building.GetBuildingType.CanSwitchOwner]"

		size = { 35 35 }
		enabled = "[IsValid( Building.NationalizeBuildingLevels( '(int32)1' ) )]"
		onclick = "[PopupManager.ShowNationalizeBuildingConfirmation(Building.Self)]"
		tooltip = "BUILDING_NATIONALIZE_TOOLTIP"
		using = confirm_button_sound
		

		blockoverride "icon" {
			texture = "gfx/interface/production_methods/nationalize.dds"
		}
		blockoverride "icon_size" {
			size = { 80% 80% }
		}

	}

	type building_privatize_toggle = building_privatize_toggle_base {

		blockoverride "toggle_privatize"
		{
			tooltip = "[Building.GetTogglePrivatizationTooltip]"
			visible = "[IsValid( Building.TogglePrivatization )]"
		}

		blockoverride "toggle_privatize_on_glow"
		{
			visible = "[Building.CanBePrivatized]"
		}

		blockoverride "toggle_privatize_on"
		{
			visible = "[Building.CanBePrivatized]"
			onclick = "[Execute( Building.TogglePrivatization )]"
		}

		blockoverride "toggle_privatize_off"
		{
			visible = "[Not(Building.CanBePrivatized)]"
			enabled = "[IsValid( Building.TogglePrivatization )]"
			onclick = "[Execute( Building.TogglePrivatization )]"
		}

	}

	type building_privatize_bulk_toggle = building_privatize_toggle_base {

		blockoverride "toggle_privatize"
		{
			visible = "[BuildingBrowserBuildingTypeItem.GetBuildingType.CanSwitchOwner]"
		}

		blockoverride "toggle_privatize_valid"
		{
			visible = "[IsValid( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization)]"
		}
		
		blockoverride "toggle_privatize_invalid"
		{
			visible = "[Not(IsValid( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization))]"
			tooltip = "PRIVATIZATION_ALL_INVALID"
		}
		
		blockoverride "toggle_privatize_on_glow"
		{
			visible = "[BuildingBrowserBuildingTypeItem.HasAllPrivatization]"
		}

		blockoverride "toggle_privatize_on"
		{
			visible = "[BuildingBrowserBuildingTypeItem.HasAllPrivatization]"
			onclick = "[Execute( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
			tooltip = "PRIVATIZATION_ALL_YES"
		}

		blockoverride "toggle_privatize_off"
		{
			visible = "[BuildingBrowserBuildingTypeItem.HasAllNoPrivatization]"
			onclick = "[Execute( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
			tooltip = "PRIVATIZATION_ALL_NO"
		}

		blockoverride "toggle_privatize_mixed"
		{
			visible = "[BuildingBrowserBuildingTypeItem.HasMixedPrivatization]"
			onclick = "[Execute( BuildingBrowserBuildingTypeItem.ToggleAllPrivatization )]"
			tooltip = "PRIVATIZATION_ALL_MIXED"
		}
	}

	type building_privatize_toggle_base = widget {
		size = { 35 35 }

		block "toggle_privatize"
		{

		}
		
		widget = {
			size = { 100% 100% }
			block "toggle_privatize_valid"
			{
				visible = yes
			}
		
			icon = {
				using = rotate_glow_blue
				size = { 130% 130% }
				block "toggle_privatize_on_glow"
				{
					visible = no
				}
				
				alwaystransparent = yes
				parentanchor = center
				using = default_fade_in_out
			}
			button_icon_round_action = {
				size = { 100% 100% }
				block "toggle_privatize_on"
				{
					visible = yes
				}
				
				using = icon_toggle_single_off_sound
	
				blockoverride "icon" {
					texture = "gfx/interface/production_methods/privatize.dds"
				}
				blockoverride "icon_size" {
					size = { 80% 80% }
				}
			}
	
			button_icon_round_action = {
				size = { 100% 100% }
				block "toggle_privatize_off"
				{
					visible = no
				}
				using = icon_toggle_single_on_sound
	
				blockoverride "icon" {
					texture = "gfx/interface/production_methods/privatize_not.dds"
				}
				blockoverride "icon_size" {
					size = { 80% 80% }
				}
			}
	
			button_icon_round_action = {
				size = { 100% 100% }
				block "toggle_privatize_mixed"
				{
					visible = no
				}
	
				using = icon_toggle_all_on_sound
	
				blockoverride "icon" {
					texture = "gfx/interface/production_methods/subsidized_mixed.dds"
				}
				blockoverride "icon_size" {
					size = { 70% 70% }
				}
			}
		}
		
		widget = {
			size = { 100% 100% }
			
			block "toggle_privatize_invalid"
			{
				visible = no
			}
			
			button_icon_round_action = {
				size = { 100% 100% }
				enabled = no
				
				blockoverride "icon" {
					texture = "gfx/interface/production_methods/privatize.dds"
				}
				blockoverride "icon_size" {
					size = { 70% 70% }
				}
			}
		}
	}

	### autoexpand, only the icon
	type building_auto_expand_icon = widget {
		size = { 30 30 }
		
		icon = {
			using = rotate_glow_blue
			size = { 100% 100% }
			alwaystransparent = yes
			parentanchor = center
			alpha = 0.3
		}
		
		icon = {
			size = { 100% 100% }
			tooltip = "AUTOEXPAND_BUILDING_ICON_TOOLTIP"
			using = tooltip_ne
			texture = "gfx/interface/production_methods/auto_expand.dds"
		}
	}

	### privatizing, only the icon
	type building_privatize_icon = widget {
		size = { 30 30 }
		
		icon = {
			using = rotate_glow_blue
			size = { 100% 100% }
			alwaystransparent = yes
			parentanchor = center
			alpha = 0.3
		}
		
		icon = {
			size = { 100% 100% }
			tooltip = "[Building.GetPrivatizationTooltip]"
			using = tooltip_ne
			texture = "gfx/interface/production_methods/privatize.dds"
		}
	}

	### subsidized, only the icon
	type building_subsidized_icon = widget {
		size = { 30 30 }
		
		icon = {
			using = rotate_glow_blue
			size = { 100% 100% }
			alwaystransparent = yes
			parentanchor = center
			alpha = 0.3
		}
		
		icon = {
			size = { 100% 100% }
			tooltip = "SUBSIDIZED_YES"
			using = tooltip_ne
			texture = "gfx/interface/production_methods/subsidized.dds"
		}
	}

	type condensed_building_information_pms = fixedgridbox {
		name = "tutorial_highlight_condensed_production_methods"
		datamodel = "[Building.AccessProductionMethodGroups]"
		flipdirection = yes

		block "pms_slot_sizes" {
			addcolumn = 52
			addrow = 50
		}
		parentanchor = vcenter

		block "pms_minimumsize" {
			minimumsize = { 208 -1 }
		}

		item = {
			widget = {
				###################
				#mod
				###################
				visible = "[Not(Or(Or(EqualTo_string(ProductionMethodGroup.GetKey,'pmg_market_liquidity'), EqualTo_string(ProductionMethodGroup.GetKey,'pmg_private_ownership_manufacture_stock')), Or(EqualTo_string(ProductionMethodGroup.GetKey,'pmg_private_ownership_mining_stock'), EqualTo_string(ProductionMethodGroup.GetKey,'pmg_private_ownership_railroad_stock'))))]"
				###################
				#end
				###################

				block "pms_item_size" {
					size = { 50 50 }
				}
				datacontext = "[Building.AccessProductionMethod(ProductionMethodGroup.Self)]"
				datacontext = "[ProductionMethod]"
				datacontext = "[Building]"
				datacontext = "[ProductionMethodGroup]"
				using = tooltip_ne
				tooltip = "CHANGE_FROM_CURRENT_PRODUCTION_METHOD_TOOLTIP"

				button = {
					visible = "[NotEqualTo_int32( GetDataModelSize( ProductionMethodGroup.AccessBuildingProductionMethods( Building.Self ) ), '(int32)1' )]"
					using = expand_button_bg_dropdown
					size = { 100% 100% }
					onclick = "[RightClickMenuManager.ToggleSwitchProductionMethodMenu(Building.AccessSelf, ProductionMethodGroup.AccessSelf, PdxGuiWidget.AccessSelf)]"
				}

				icon = {
					size = { 80% 80% }
					parentanchor = center
					texture = "[ProductionMethod.GetTexture]"
				}

				### new pm
				has_new_pm_icon = {
					position = { -2 2 }
					parentanchor = bottom|left
					blockoverride "visible" {
						visible = "[And(Building.IsOwner( GetPlayer.Self ), GetPlayer.HasNewProductionMethodInSameGroup( Building.GetBuildingType.Self, ProductionMethod.Self ))]"
					}
				}

				### nr available
				textbox = {
					raw_text = "#P #bold [ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf)]#!#!"
					parentanchor = top|right
					position = { -5 0 }
					autoresize = yes
					align = right|nobaseline
					block "pms_number_visibility" {
						visible = "[NotEqualTo_int32( ProductionMethodGroup.GetNumAvailableOptions(Building.AccessSelf), '(int32)1')]"
					}
					tooltip = "PRODUCTION_METHOD_OPTIONS"
					using = tooltip_above
					using = fontsize_small

					background = {
						using = default_background
						margin = { 8 4 }

					}
				}
			}
		}
	}

	type building_level_controls = container {
		minimumsize = { 110 35 }

		using = building_size_tooltip_with_ownership

		background = {
			using = entry_bg
			margin = { -3 0 }
		}

		margin_widget = {
			block "controller_size" {
				size = { 150 35 }
			}
			margin_left = 35
			margin_right = 35

		}

		building_size_with_ownership = {
			parentanchor = center
		}

		### DOWNSIZE
		button_icon_minus_action = {
			parentanchor = vcenter
			tooltip = "[Building.GetDownsizeTooltip]"
			onclick = "[Execute( Building.Downsize )]"
			enabled = "[IsValid( Building.Downsize )]"
			using = tooltip_below

			block "downsize_button_visibility" {
				visible = "[And(And( IsValid( Building.Downsize ), Not( ShouldAskConfirmation( Building.Downsize ) ) ), Not(Building.IsMilitaryBuilding))]"
			}
			
			block "button_size" {
				size = { 28 28 }
			}
		}

		### DOWNSIZE WITH CONFIRMATION
		button_icon_minus_action = {
			parentanchor = vcenter
			tooltip = "[Building.GetDownsizeTooltip]"
			onclick = "[PopupManager.AskConfirmation( Building.Downsize )]"
			enabled = "[IsValid( Building.Downsize )]"
			using = tooltip_below

			block "downsize_with_confirmation_button_visibility" {
				visible = "[And(And( IsValid( Building.Downsize ), ShouldAskConfirmation( Building.Downsize ) ), Not(Building.IsMilitaryBuilding))]"
			}
			
			block "button_size" {
				size = { 28 28 }
			}
		}

		### CANCEL CONSTRUCTION
		button_icon_minus_action = {
			parentanchor = vcenter
			tooltip = "[Building.GetCancelConstructionTooltip]"
			onclick = "[Execute( Building.CancelConstruction )]"
			using = tooltip_below
			
			block "cancel_button_visibility" {
				visible = "[And(IsValid( Building.CancelConstruction ), Not(Building.IsMilitaryBuilding))]"
			}

			block "button_size" {
				size = { 28 28 }
			}
		}

		### EXPAND
		block "expand_button" {
			expand_building_button = {
				widgetid = "[Concatenate('building_details_expand', Building.GetIDString)]"
				position = { 0 0 }
				parentanchor = right|vcenter
			}
		}
	}

	type building_level_controls_with_military = building_level_controls {
		blockoverride "expand_button" {
			expand_building_button_with_military  = {
				widgetid = "[Concatenate('building_details_expand', Building.GetIDString)]"
				position = { 0 0 }
				parentanchor = right|vcenter
			}
		}
	}

	type building_size_with_ownership = flowcontainer {
		direction = vertical

		alpha = "[TransparentIfFalse( Or( GreaterThan_int32(Building.GetExpansionLevel, '(int32)0'), Building.HasConstructionQueued ))]"

		### LEVEL

		spacing = 4

		widget = {
			parentanchor = hcenter
			size = {10 12} #ensure text is snugly encapsulated vertically

			textbox = {
				parentanchor = center
				using = tooltip_above
				elide = right
				fontsize_min = 12
				autoresize = yes
				align = nobaseline
				text = "BUILDING_SIZE"
			}
		}

		block "building_size_small_ownership_chart"
		{
			simple_building_ownership_stacked_barchart = {
				using = visible_if_ownership_can_be_split
				parentanchor = hcenter
			}
		}
	}

	type simple_building_ownership_stacked_barchart = v3_stacked_barchart {
		block "barchart_size" {
			size = { 60 6 }
		}

		blockoverride "barchart_datamodel" {
			datamodel = "[Building.GetBuildingOwnerships]"
		}

		blockoverride "barchart_item_stretchfactor" {
			layoutstretchfactor_horizontal = "[FixedPointToInt(Multiply_CFixedPoint(BuildingOwnership.GetOwnershipRatio, '(CFixedPoint)100'))]"
		}

		blockoverride "barchart_item_tooltip" {
			
		}

		blockoverride "barchart_item_icon" {
			
		}

		blockoverride "barchart_item_margins" {
			margin = { 0 0 }
		}

		blockoverride "barchart_item_background" {
			background = {
				texture = "gfx/interface/tooltip/stacked_barchart_small_item.dds"
				color = "[BuildingOwnership.GetOwnershipTypeColor]"
				spriteType = Corneredstretched
				spriteborder = { 3 3 }
			}
		}

		blockoverride "barchart_frame" {
			background = {
				name = "frame"
				texture = "gfx/interface/progressbar/progressbar_frame.dds"
				spriteType = Corneredstretched
				spriteborder = { 6 6 }
				texture_density = 2
				margin = { 3 3 }
			}
		}
	}

	type expand_building_button = widget {
		name = "tutorial_highlight_expand"

		block "button_size" {
			size = { 28 28 }
		}

		tooltip = "[Building.GetQueueConstructionTooltip]"

		block "expand_button_visibility" {
			visible = "[Building.IsPotentialQueueConstruction]"
		}

		button_icon_plus_action = { #regular expansion
			visible = "[Building.GetState.GetOwner.IsLocalPlayer]"

			size = { 100% 100% }

			onclick = "[Execute( Building.QueueConstruction )]"
			enabled = "[IsValid( Building.QueueConstruction )]"
		}

		button_icon_round_action = { #foreign investment
 			visible = "[Not(Building.GetState.GetOwner.IsLocalPlayer)]"

 			size = { 100% 100% }

			blockoverride "icon_size" {
				size = { 75% 75% }
			}
			
			blockoverride "icon" {
				texture = "gfx/interface/buttons/button_icons/foreign_invest.dds"
			}

			blockoverride "sound" {
				using = increase_button_sound
			}

			onclick = "[Execute( Building.QueueConstruction )]"
			enabled = "[IsValid( Building.QueueConstruction )]"
		}		
	}

	type expand_building_button_with_military = button_icon_plus_action {

		block "button_size" {
			size = { 28 28 }
		}

		tooltip = "[Building.GetQueueMilitaryConstructionTooltip( MilitaryFormation.Self, CombatUnitType.Self )]"
		onclick = "[Execute( Building.QueueMilitaryConstruction( MilitaryFormation.Self, CombatUnitType.Self ) )]"
		enabled = "[IsValid( Building.QueueMilitaryConstruction( MilitaryFormation.Self, CombatUnitType.Self ) )]"

		block "expand_button_visibility" {
			visible = "[And( Building.IsExpandable, Or( Not(Building.HasReachedLevelCap), IsValid(Building.QueueMilitaryConstruction( MilitaryFormation.Self, CombatUnitType.Self )) ))]"
		}

		button_icon_plus_action = { #regular expansion
			visible = "[Building.GetState.GetOwner.IsLocalPlayer]"

			block "button_size" {
				size = { 28 28 }
			}

			onclick = "[Execute( Building.QueueMilitaryConstruction( MilitaryFormation.Self, CombatUnitType.Self ) )]"
			enabled = "[IsValid( Building.QueueMilitaryConstruction( MilitaryFormation.Self, CombatUnitType.Self ) )]"
		}

		button_icon_round_action = { #foreign investment
 			visible = "[Not(Building.GetState.GetOwner.IsLocalPlayer)]"

 			block "button_size" {
				size = { 28 28 }
			}

			blockoverride "icon_size" {
				size = { 75% 75% }
			}
			
			blockoverride "icon" {
				texture = "gfx/interface/buttons/button_icons/foreign_invest.dds"
			}

			blockoverride "sound" {
				using = increase_button_sound
			}

			onclick = "[Execute( Building.QueueMilitaryConstruction( MilitaryFormation.Self, CombatUnitType.Self ) )]"
			enabled = "[IsValid( Building.QueueMilitaryConstruction( MilitaryFormation.Self, CombatUnitType.Self ) )]"
		}		
	}

	type building_ownership_chart = container { #unused, unsure it works anymore after changes elsewhere
		chart = {
			blockoverride "datamodel" {
				datamodel = "[Building.GetBuildingOwnerships]"
			}

			blockoverride "title" {}
			blockoverride "labels" {}
			blockoverride "background" {}

			blockoverride "chart_button_position" {
				position = { 8 -8 }
			}
			blockoverride "chart_button_button_position" {
				position = { 0 0 }
			}

			blockoverride "tooltip" {
				using = building_ownership_share_tooltip
			}

			blockoverride "pieslice" {
				value = "[FixedPointToFloat(BuildingOwnership.GetOwnershipRatio)]"
			}

			blockoverride "color" {
				color = "[BuildingOwnership.GetOwnershipTypeColor]"
			}
		}

		tiny_flag = {
			parentanchor = bottom
			position = { 5 -5 }

			datacontext = "[Building.GetOwner]"

			blockoverride "tooltip" {}
			tooltip = "BUILDING_CONTROLLER"
		}
	}
	
	type building_productivity_mini_chart = flowcontainer {
		direction = vertical
		margin = { 8 8 }
		using = productivity_tooltip_with_graph

		background = {
			using = entry_bg_simple
		}

		# graph
		widget = {
			block "graph_size" {
				size = { 150 60 }
			}
			
			background = {
				texture = "gfx/interface/graph/graph_frame.dds"
				spriteType = Corneredtiled
				spriteborder = { 2 2 }
				texture_density = 2
				margin = { 4 4 }
				alpha = 0.85

				modify_texture = {
					texture = "gfx/interface/backgrounds/default_bg_shading.dds"
					spriteType = Corneredstretched
					spriteborder = { 0 0 }
					blend_mode = overlay
					alpha = 0.7
				}
			}

			widget = {
				size = { 100% 100% }

				plotline = {
					visible = "[Not(IsEmpty(Building.GetEarningsPerEmployeeTrend))]"
					size = { 100% 100% }
					using = plot_line
					width = 2.5
					color = { .9 .9 .9 1.0 }
					plotpoints = "[GetTrendPlotPointsNormalized(Building.GetEarningsPerEmployeeTrend, '(CFixedPoint)0', GetMax(Building.GetEarningsPerEmployeeTrend) )]"
				}

				textbox = {
					visible = "[IsEmpty(Building.GetEarningsPerEmployeeTrend)]"
					text = "GRAPH_NOT_INITIALIZED"
					parentanchor = center
					autoresize = yes
					align = nobaseline
				}
			}
		}

		textbox = {
			name = "tutorial_highlight_productivity_value"
			raw_text = "[GetPlayer.GetCustom('currency_symbol')][Building.GetAverageAnnualEarningsPerEmployeeFormatted|+]"
			align = hcenter|nobaseline
			autoresize = yes
			multiline = yes
			parentanchor = hcenter
			using = fontsize_large
			margin_top = 8
		}
	}

	type building_progressbars = flowcontainer {
		direction = vertical
		spacing = 8
		widget = {
			onmousehierarchyenter = "[PdxGuiWidget.FindChild('employment_max').InterruptThenTriggerAnimation('hide_employment_max','show_employment_max')]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('employment_max').InterruptThenTriggerAnimation('show_employment_max','hide_employment_max')]"
			alwaystransparent = no

			block "progressbar_size" {
				size = { 161 26 }
			}

			default_progressbar_horizontal = {
				tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
				size = { 100% 100% }
				parentanchor = vcenter

				blockoverride "values" {
					value = "[FixedPointToFloat(Building.GetEmploymentPercentage)]"
					min = 0
					max = 1
				}
			}

			flowcontainer = {
				parentanchor = vcenter
				textbox = {
					text = "[Building.GetNoOfEmployed|1*v]"
					margin_left = 10
					margin_bottom = 5
					margin_top = 5
					align = hcenter|nobaseline
					autoresize = yes
					parentanchor = vcenter
					widgetanchor = vcenter
				}

				textbox = {
					alpha = 0
					name = employment_max

					state = {
						name = show_employment_max
						delay = 0.15
						alpha = 1
						duration = 0.15
						using = Animation_Curve_Default
					}
					state = {
						name = hide_employment_max
						alpha = 0
						duration = 0
						using = Animation_Curve_Default
					}

					visible = "[LessThan_int64(Building.GetNoOfEmployed, Building.GetEmployeeCap)]"
					raw_text = "/ #maximum [Building.GetEmployeeCap|1*]#!"
					margin_left = 7
					align = hcenter|nobaseline
					autoresize = yes
					parentanchor = vcenter
					widgetanchor = vcenter
				}
			}

			employment_indicator_icon = {
				blockoverride "indicator_icon_size" {
					size = { 25 25 }
				}
				parentanchor = right|vcenter
				position = { -2 0 }
			}
		}
		widget = {
			alpha = "[TransparentIfFalse(Building.IsActive)]"
			visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"

			block "progressbar_size" {
				size = { 161 26 }
			}

			parentanchor = hcenter
			using = cash_reserves_tooltip_with_graph
			onmousehierarchyenter = "[PdxGuiWidget.FindChild('cash_reserves_max').InterruptThenTriggerAnimation('hide_cash_reserves_max','show_cash_reserves_max')]"
			onmousehierarchyleave = "[PdxGuiWidget.FindChild('cash_reserves_max').InterruptThenTriggerAnimation('show_cash_reserves_max','hide_cash_reserves_max')]"
			alwaystransparent = no

			gold_progressbar_horizontal = {
				size = { 100% 100% }
				alpha = "[TransparentIfFalse(Building.IsActive)]"
				visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"

				blockoverride "glow_size" {
					size = { 40 100% }
				}

				parentanchor = vcenter
				blockoverride "values" {
					min = 0
					max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
					value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
				}

				progressbar_highlight = {
					visible = "[GreaterThanOrEqualTo_CFixedPoint(Building.GetCurrentCashReserves, Building.GetMaxCashReserves)]"
				}
			}

			changed_value_decreased_progressbar_horizontal = {
				size = { 100% 100% }
				visible = "[GreaterThan_CFixedPoint(GetPrevTrendValue(Building.GetCashReservesTrend), GetTrendValue(Building.GetCashReservesTrend))]"

				blockoverride "second_progressbar" {}

				blockoverride "values" {
					min = 0
					max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
					value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
				}
				blockoverride "glow_size" {
					size = { 40 100% }
				}
				blockoverride "arrow_texture_density" {
					texture_density = 6 #use to match height of progressbar
				}
			}

			changed_value_increased_progressbar_horizontal = {
				size = { 100% 100% }
				visible = "[GreaterThan_CFixedPoint(GetTrendValue(Building.GetCashReservesTrend), GetPrevTrendValue(Building.GetCashReservesTrend))]"

				blockoverride "second_progressbar" {}

				blockoverride "values" {
					min = 0
					max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
					value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
				}
				blockoverride "glow_size" {
					size = { 40 100% }
				}
				blockoverride "arrow_texture_density" {
					texture_density = 6 #use to match height of progressbar
				}
			}

			flowcontainer = {
				parentanchor = vcenter
				textbox = {
					raw_text = "[GetPlayer.GetCustom('currency_symbol')][Building.GetCurrentCashReserves|Dv]"
					margin_left = 4
					align = hcenter|nobaseline
					autoresize = yes
					parentanchor = vcenter
				}

				textbox = {
					alpha = 0
					name = cash_reserves_max

					state = {
						name = show_cash_reserves_max
						delay = 0.15
						alpha = 1
						duration = 0.15
						using = Animation_Curve_Default
					}
					state = {
						name = hide_cash_reserves_max
						alpha = 0
						duration = 0
						using = Animation_Curve_Default
					}

					raw_text = " / #maximum [Building.GetMaxCashReserves|k]#!"
					visible = "[LessThan_CFixedPoint(Building.GetCurrentCashReserves, Building.GetMaxCashReserves)]"
					align = hcenter|nobaseline
					autoresize = yes
					parentanchor = vcenter
				}
			}
		}
		### HQ
		textbox = {
			visible = "[Building.GetBuildingType.IsMilitaryBuilding]"
			raw_text = "[Building.GetHQ.GetName]"
			align = right|nobaseline
			layoutpolicy_horizontal = expanding
			elide = right
			autoresize = yes
			fontsize_min = 12

			block "progressbar_size" {
				size = { 161 26 }
			}

		}
	}

	type building_average_wage_label = textbox {
		text = "BUILDING_AVERAGE_WAGE"
		tooltip = TOOLTIP_BUILDING_AVERAGE_WAGE
		visible = "[Building.IsActive]"

		align = left|nobaseline
		autoresize = yes
		elide = right
		maximumsize = { 230 -1 }
		minimumsize = { 230 -1 }
	}

	type building_rank_label = textbox {
		visible = "[And(And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsistenceBuilding)), Not(Building.GetBuildingType.IsUnique))]"
		using = building_profitability_tooltip_with_graph
		text = "BUILDING_RANK"
		align = left|nobaseline
		autoresize = yes
		minimumsize = { 230 -1 }
		maximumsize = { 230 -1 }
		elide = right

		block "fontsize" {
			using = fontsize_large
			fontsize_min = 14
		}
	}

	type building_process_breakdown = container {
		### left
		textbox = {
			parentanchor = vcenter
			margin_left = 20
			align =  nobaseline
			using = empty_state_text_properties
			visible = "[Not(Building.IsActive)]"
			text = "BUILDING_INACTIVE_CONSUMPTION_EMPTY_STATE"
			multiline = yes
			max_width = @building_process_item_width
			min_width = @building_process_item_width
			autoresize = yes
		}

		flowcontainer = {
			name = "tutorial_highlight_expenses"
			direction = vertical
			spacing = 2
			parentanchor = left|vcenter
			minimumsize = { @building_process_item_width -1 }
			ignoreinvisible = yes
			visible = "[Building.IsActive]"

			### goods
			flowcontainer = {
				parentanchor = hcenter
				direction = vertical
				datamodel = "[Building.AccessConsumedGoods]"

				item = {
					widget = {
						size = { @building_process_item_width 42 }
						name = "tutorial_highlight_goods"
						tooltipwidget = {
							FancyTooltip_Goods = {}
						}

						button = {
							size = { 100% 40 }
							parentanchor = vcenter
							using = default_button
							onclick = "[InformationPanelBar.OpenGoodsStatePanel(Building.GetState, Goods.Self)]"
							onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
						}

						icon = {
							size = { 36 36 }
							texture = "[Goods.GetTexture]"
							position = { 5 0 }
							parentanchor = left|vcenter
						}

						flowcontainer = {
							parentanchor = left|vcenter 
							spacing = 3
							margin_left = 43
							margin_top = 7

							icon = {
								size = { 25 25 }
								visible = "[And(Not(Building.HasMaximumInputShortage(Goods.Self)),Building.HasInputShortage(Goods.Self))]"
								texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
								tooltip = "GOODS_INPUT_SHORTAGE_TOOLTIP"
								parentanchor = left|vcenter
							}

							icon = {
								size = { 25 25 }
								visible = "[Building.HasMaximumInputShortage(Goods.Self)]"
								texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
								tooltip = "GOODS_INPUT_SHORTAGE_MAX_TOOLTIP"
								parentanchor = left|vcenter
							}

							textbox = {
								raw_text = "#bold [FixedPointToInt(Building.GetConsumption(Goods.Self))|D]#!"
								visible = "[Not(Building.HasInputShortage(Goods.Self))]"
								autoresize = yes
								parentanchor = left|vcenter
								widgetanchor = left|vcenter
								align = left|nobaseline
								tooltip = "TOOLTIP_BUILDING_USES_UNITS_INFO"
							}

							textbox = {
								raw_text = "#bold #n [FixedPointToInt(Building.GetConsumption(Goods.Self))|D]#!#!"
								visible = "[Building.HasInputShortage(Goods.Self)]"
								autoresize = yes
								parentanchor = left|vcenter
								widgetanchor = left|vcenter
								align = left|nobaseline
								tooltip = "TOOLTIP_BUILDING_USES_UNITS_INFO"
							}
						}


						textbox = {
							raw_text = "[Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice )]"
							position = { -10 0 }
							autoresize = yes
							align = right|nobaseline
							parentanchor = right|vcenter
							widgetanchor = right|vcenter
							### This tooltip blocks going to the locked tooltip of the good, therefore it is commented out
							#tooltip = "TOOLTIP_BUILDING_USES_VALUE_INFO"
						}
					}
				}
			}

			### wages
			building_process_entry_small = {
				blockoverride "visible" {
					visible = "[GreaterThan_CFixedPoint(Building.GetLastWagesExpenses, '(CFixedPoint)0')]"
				}
				blockoverride "text" {
					text = "WAGES"
				}
				blockoverride "text_right" {
					raw_text = "#variable [GetPlayer.GetCustom('currency_symbol')][Building.GetLastWagesExpenses|K]#!"
					tooltip = "[Building.GetLastWagesExpensesDesc]"
				}
			}

			### slave upkeep
			building_process_entry_small = {
				blockoverride "visible" {
					visible = "[Or( Building.HasSlaves, GreaterThan_CFixedPoint(Building.GetLastSlaveUpkeep, '(CFixedPoint)0') )]"
				}
				blockoverride "text" {
					text = "SLAVE_UPKEEP"
					tooltip = "[Building.GetLastSlaveUpkeepDesc]"
				}
				blockoverride "text_right" {
					raw_text = "#variable [GetPlayer.GetCustom('currency_symbol')][Building.GetLastSlaveUpkeep|K]#!"
					tooltip = "[Building.GetLastSlaveUpkeepDesc]"
				}
			}

			### tariffs
			building_process_entry_small = {
				blockoverride "visible" {
					visible = "[GreaterThan_CFixedPoint(Building.GetTariffsPaid, '(CFixedPoint)0')]"
				}
				blockoverride "text" {
					text = "[concept_tariffs]"
				}
				blockoverride "text_right" {
					raw_text = "#variable [GetPlayer.GetCustom('currency_symbol')][Building.GetTariffsPaid|K]#!"
				}
			}

			### infrastructure
			building_process_entry_small = {
				tooltip = BUILDING_INFRA_USAGE_TOOLTIP
				
				blockoverride "visible" {
					visible = "[Building.UsesInfrastructure]"
				}
				blockoverride "text" {
					text = "[concept_infrastructure_usage]"
				}
				blockoverride "text_right" {
					raw_text = "#variable [Building.CalcInfrastructureUsage|=0]#!"
				}
			}
		}

		### center arrow
		icon = {
			size = { 30 30 }
			texture = "gfx/interface/icons/generic_icons/turns_into.dds"
			parentanchor = center
			alpha = "[TransparentIfFalse(Building.IsActive)]"
			using = visible_if_produces
		}

		### right
		flowcontainer = {
			name = "tutorial_highlight_revenues"
			direction = vertical
			spacing = 2
			minimumsize = { @building_process_item_width -1 }
			parentanchor = right|vcenter
			ignoreinvisible = yes
			alpha = "[TransparentIfFalse(Building.IsActive)]"

			### goods
			flowcontainer = {
				parentanchor = hcenter
				direction = vertical
				datamodel = "[Building.AccessProducedGoods]"

				item = {
					widget = {
						size = { @building_process_item_width 42 }
						tooltipwidget = {
							FancyTooltip_Goods = {}
						}

						button = {
							size = { 100% 40 }
							parentanchor = vcenter
							using = default_button
							onclick = "[InformationPanelBar.OpenGoodsStatePanel(Building.GetState, Goods.Self)]"
							onrightclick = "[RightClickMenuManager.ShowForGoods(Goods.AccessSelf)]"
						}

						icon = {
							size = { 36 36 }
							texture = "[Goods.GetTexture]"
							position = { 5 0 }
							parentanchor = left|vcenter
						}

						flowcontainer = {
							parentanchor = left|vcenter 
							spacing = 3
							margin_left = 43
							margin_top = 7

							icon = {
								size = { 25 25 }
								visible = "[And(Building.HasAnyInputShortage,GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
								texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
								tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
								parentanchor = left|vcenter
							}

							icon = {
								size = { 25 25 }
								visible = "[And(Not(Building.HasAnyInputShortage),GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
								texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
								tooltip = "GOODS_OUTPUT_PENALTY_LINGERING_TOOLTIP"
								parentanchor = left|vcenter
							}

							textbox = {
								raw_text = "#bold [FixedPointToInt(Building.GetProduction(Goods.Self))|D]#!"
								visible = "[Not(GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0'))]"
								parentanchor = left|vcenter
								autoresize = yes
								align = left|nobaseline
								tooltip = "TOOLTIP_BUILDING_PRODUCES_UNITS_INFO"
							}

							textbox = {
								raw_text = "#bold #n [FixedPointToInt(Building.GetProduction(Goods.Self))|D]#!#!"
								visible = "[GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')]"
								parentanchor = left|vcenter
								autoresize = yes
								align = left|nobaseline
								tooltip = "TOOLTIP_BUILDING_PRODUCES_UNITS_INFO"
							}
						}

						textbox = {
							raw_text = "[Goods.GetCompareIconAgainstBasePriceNoFormatting( Goods.GetStatePrice )]"
							position = { -10 0 }
							autoresize = yes
							align = right|nobaseline
							parentanchor = right|vcenter
							### This tooltip blocks going to the locked tooltip of the good, therefore it is commented out
							#tooltip = "TOOLTIP_BUILDING_PRODUCES_VALUE_INFO"
						}
					}
				}
			}

			### military production
			building_process_entry_small = {
				blockoverride "visible" {
					visible = "[Building.IsMilitaryBuilding]"
				}
				blockoverride "text" {
					text = "[Building.GetCombatUnitProduction]"
					tooltip = "MILITARY_UNITS_PRODUCTION"
				}
			}

			### modifiers
			flowcontainer = {
				parentanchor = hcenter
				direction = vertical
				spacing = 5
				datamodel = "[Building.GetProducedModifiers.GetEntries]"
				visible = "[Not(IsDataModelEmpty(Building.GetProducedModifiers.GetEntries))]"
				item = {
					container = {
						maximumsize = { @building_process_item_width -1 }
						minimumsize = { @building_process_item_width 39 }
						
						background = {
							using = entry_bg_simple
						}

						flowcontainer = {
							parentanchor = vcenter
							margin_left = 5
							icon = {
								size = { 25 25 }
								visible = "[And(Building.CanBeAffectedByInputShortage(ModifierEntry.Self),And(Building.HasAnyInputShortage,GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')))]"
								texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
								tooltip = "GOODS_OUTPUT_PENALTY_TOOLTIP"
								parentanchor = vcenter
							}

							icon = {
								size = { 25 25 }
								visible = "[And(Building.CanBeAffectedByInputShortage(ModifierEntry.Self),And(Not(Building.HasAnyInputShortage),GreaterThan_CFixedPoint(Building.GetInputShortagePenalty, '(CFixedPoint)0')))]"
								texture = "gfx/interface/icons/generic_icons/goods_shortage.dds"
								tooltip = "GOODS_OUTPUT_PENALTY_LINGERING_TOOLTIP"
								parentanchor = vcenter
							}

							textbox = {
								text = "[ModifierEntry.GetName]"
								tooltip = "BUILDING_DETAILS_PRODUCED_MODIFIER_TOOLTIP"
								autoresize = yes
								multiline = yes
								align = left|nobaseline
								parentanchor = vcenter
								minimumsize = { 170 -1 }
								maximumsize = { 170 -1 }
								margin_left = 5
								margin_top = 5
								margin_bottom = 5
							}
						}

						textbox = {
							text = "[ModifierEntry.GetFormattedValue]"
							tooltip = "BUILDING_DETAILS_PRODUCED_MODIFIER_TOOLTIP"
							autoresize = yes
							multiline = yes
							align = right|nobaseline
							parentanchor = right|vcenter
							minimumsize = { @building_process_item_width -1 }
							maximumsize = { @building_process_item_width -1 }
							margin_right = 10
						}
					}
				}
			}

			### trade revenue
			building_process_entry_small = {
				blockoverride "visible" {
					visible = "[Building.HasTradeRouteRevenue]"
				}
				blockoverride "text" {
					text = "[concept_trade_revenue]"
				}
				blockoverride "text_right" {
					raw_text = "#variable [GetPlayer.GetCustom('currency_symbol')][Building.GetTradeRouteRevenue|K]#!"
				}
			}

			building_process_entry_small = {
				tooltip = BUILDING_URBANIZATION_TOOLTIP
				
				blockoverride "visible" {
					visible = "[Building.ProvidesUrbanization]"
				}
				
				blockoverride "text" {
					raw_text = "[concept_urbanization]"
				}
				blockoverride "text_right" {
					raw_text = "#variable [Building.CalcUrbanizationProvided|+=]#!"
				}
			}
		}
	}

	# standard 
	type property_portfolio_stacked_bar_chart = property_portfolio_stacked_bar_chart_base {
		block "barchart_size" {
			size = { @panel_width 40 } #450 or so and up
		}

		blockoverride "barchart_datamodel" {
			datamodel = "[Building.GetCappedAssetsLong]"
		}

		blockoverride "barchart_plus_others_info" {
			visible = "[DataModelHasItems( Building.GetCappedAssetsLongRest )]"
			raw_text = "+[GetDataModelSize( Building.GetCappedAssetsLongRest )]"
			autoresize = yes

			tooltip = "PROPERTY_SHARE_REMAINDER_TOOLTIP_LONG"
		}
	}

	# version of property_portfolio_stacked_bar_chart using a smaller amount of max elements in the chart
	type property_portfolio_stacked_bar_chart_short = property_portfolio_stacked_bar_chart_base {
		block "barchart_size" {
			size = { 380 40 } #380 or so or less
		}

		blockoverride "barchart_datamodel" {
			datamodel = "[Building.GetCappedAssetsShort]"
		}

		blockoverride "barchart_plus_others_info" {
			visible = "[DataModelHasItems( Building.GetCappedAssetsShortRest )]"
			raw_text = "+[GetDataModelSize( Building.GetCappedAssetsShortRest )]"
			autoresize = yes

			tooltip = "PROPERTY_SHARE_REMAINDER_TOOLTIP_SHORT"
		}
	}

	# "base type" for the two sizes of bar chart, don't use this directly
	type property_portfolio_stacked_bar_chart_base = v3_stacked_barchart {

		blockoverride "barchart_item_stretchfactor" {
			layoutstretchfactor_horizontal = "[FixedPointToInt(Multiply_CFixedPoint(BuildingOwnership.GetPropertyRatio, '(CFixedPoint)100'))]"
		}

		blockoverride "barchart_item_tooltip" {
			tooltip = "PROPERTY_SHARE_CHART_TOOLTIP"
		}

		blockoverride "barchart_item_color" {
			color = "[BuildingOwnership.GetOwnedBuilding.GetState.GetOwner.GetMapColor]"
		}

		blockoverride "barchart_item_icon_properties" {
			size = { 30 30 }
			texture = "[BuildingOwnership.GetOwnedBuilding.GetTexture]"

			textbox = {
				autoresize = yes
				text = "[BuildingOwnership.GetLevel|v]"
				using = fontsize_small
				margin_left = 2
				margin_top = 1
				align = left|nobaseline
			}
		}
	}

	# standard 
	type building_ownership_stacked_barchart = building_ownership_stacked_barchart_base {
		block "barchart_size" {
			size = { @panel_width 40 } #450 or so and up
		}

		blockoverride "barchart_datamodel" {
			datamodel = "[Building.GetCappedOwnersLong]"
		}

		blockoverride "barchart_plus_others_info" {
			visible = "[DataModelHasItems( Building.GetCappedOwnersLongRest )]"
			raw_text = "[GetDataModelSize( Building.GetCappedOwnersLongRest )|=]"
			autoresize = yes

			tooltip = "OWNERSHIP_SHARE_CHART_REMAINDER_TOOLTIP_LONG"
		}

	}


	# version of building_ownership_stacked_barchart using a smaller amount of max elements in the chart
	type building_ownership_stacked_barchart_short = building_ownership_stacked_barchart_base {
		block "barchart_size" {
			size = { 380 40 } #380 or so or less
		}

		blockoverride "barchart_datamodel" {
			datamodel = "[Building.GetCappedOwnersShort]"
		}

		blockoverride "barchart_plus_others_info" {
			visible = "[DataModelHasItems( Building.GetCappedOwnersShortRest )]"
			raw_text = "[GetDataModelSize( Building.GetCappedOwnersShortRest )|=]"
			autoresize = yes

			tooltip = "OWNERSHIP_SHARE_CHART_REMAINDER_TOOLTIP_SHORT"
		}

		blockoverride "building_owner_icon_size" {
			size = { 25 25 }
		}
	}


	# "base type" for the two sizes of bar chart, don't use this directly
	type building_ownership_stacked_barchart_base = v3_stacked_barchart {
		blockoverride "barchart_item_stretchfactor" {
			layoutstretchfactor_horizontal = "[FixedPointToInt(Multiply_CFixedPoint(BuildingOwnership.GetOwnershipRatio, '(CFixedPoint)100'))]"
		}

		blockoverride "barchart_item_tooltip" {
			using = building_ownership_share_tooltip
		}

		blockoverride "barchart_item_color" {
			color = "[BuildingOwnership.GetOwnershipTypeColor]"
		}

		blockoverride "barchart_item_icon" {
			building_owner_icon = {
				block "building_owner_icon_size" {}
			}
		}
	}


	

	type building_owner_icon = widget {
		size = { 30 30 }

		#national ownership
		widget = {
			visible = "[BuildingOwnership.IsCountryOwned]"
			size = { 100% 100% }

			tiny_flag = {
				datacontext = "[BuildingOwnership.GetOwnerCountry]"
				parentanchor = center
			}
		}
		#private ownership
		widget = {
			visible = "[Not(BuildingOwnership.IsCountryOwned)]"
			size = { 100% 100% }
			

			#local workforce
			icon = {
				visible = "[ObjectsEqual(BuildingOwnership.GetOwnedBuilding.Self, BuildingOwnership.GetOwnerBuilding.Self)]"
				datacontext_from_model = {
					datamodel = "[BuildingOwnership.GetOwnedBuilding.AccessPopsList.AccessPopList]"
					index = 0
				}

				texture = "[PopListItem.GetPopType.GetTexture]"

				size = { 100% 100% }
			}
			
			#dirty capitalists and aristocrats
			icon = {
				visible = "[Not(ObjectsEqual(BuildingOwnership.GetOwnedBuilding.Self, BuildingOwnership.GetOwnerBuilding.Self))]"
				size = { 100% 100% }
				texture = "[BuildingOwnership.GetOwnerBuilding.GetTexture]"
			}
		}
	}

	type building_ownership_or_property_portfolio_stacked_barchart = container {
		property_portfolio_stacked_bar_chart = {
			visible = "[Not(IsDataModelEmpty(Building.GetBuildingAssets))]"
		}
		building_ownership_stacked_barchart = {
			using = visible_if_ownership_can_be_split
		}
	}

	type building_ownership_or_property_portfolio_stacked_barchart_short = container {
		property_portfolio_stacked_bar_chart_short = {
			visible = "[Not(IsDataModelEmpty(Building.GetBuildingAssets))]"
		}
		building_ownership_stacked_barchart_short = {
			using = visible_if_ownership_can_be_split
		}
	}
}


template visible_if_ownership_can_be_split
{
	# The buildings ownership can be split between multiple entities:
	# It is not a Manor House, Financial District (GetBuildingAssets)
	# It is not a Government Building. 
	# It is not a Trade Center (HasTradeRouteRevenue)
	# It is not a Urban Center
	# Or it is simply a level 0 building
	visible = "[And( Not(Building.HasTradeRouteRevenue), And( Not(Building.IsUrbanCenter), And( And( IsDataModelEmpty(Building.GetBuildingAssets), Not(Building.IsGovernmentFunded) ), NotEqualTo_int32(Building.GetExpansionLevel, '(int32)0'))))]"
}

template visible_if_ownership_always_workforce
{
	visible = "[Building.GetBuildingType.IsAlwaysSelfOwning]"
}
